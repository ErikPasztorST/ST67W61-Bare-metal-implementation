
G0_minimal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004034  08004034  00005034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800403c  0800403c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004044  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000006c  080040b0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080040b0  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bcc  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d82  00000000  00000000  00018c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000698c  00000000  00000000  0001b9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00022370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf9  00000000  00000000  00022f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d7c4  00000000  00000000  00023b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014745  00000000  00000000  00041325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b63b8  00000000  00000000  00055a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010be22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002880  00000000  00000000  0010be68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0010e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ddc 	.word	0x08003ddc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08003ddc 	.word	0x08003ddc

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_sqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5609      	ldrsb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_uqi>:
 800013c:	b402      	push	{r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0049      	lsls	r1, r1, #1
 8000144:	5c09      	ldrb	r1, [r1, r0]
 8000146:	0049      	lsls	r1, r1, #1
 8000148:	448e      	add	lr, r1
 800014a:	bc02      	pop	{r1}
 800014c:	4770      	bx	lr
 800014e:	46c0      	nop			@ (mov r8, r8)

08000150 <__gnu_thumb1_case_shi>:
 8000150:	b403      	push	{r0, r1}
 8000152:	4671      	mov	r1, lr
 8000154:	0849      	lsrs	r1, r1, #1
 8000156:	0040      	lsls	r0, r0, #1
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	5e09      	ldrsh	r1, [r1, r0]
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	448e      	add	lr, r1
 8000160:	bc03      	pop	{r0, r1}
 8000162:	4770      	bx	lr

08000164 <__udivsi3>:
 8000164:	2200      	movs	r2, #0
 8000166:	0843      	lsrs	r3, r0, #1
 8000168:	428b      	cmp	r3, r1
 800016a:	d374      	bcc.n	8000256 <__udivsi3+0xf2>
 800016c:	0903      	lsrs	r3, r0, #4
 800016e:	428b      	cmp	r3, r1
 8000170:	d35f      	bcc.n	8000232 <__udivsi3+0xce>
 8000172:	0a03      	lsrs	r3, r0, #8
 8000174:	428b      	cmp	r3, r1
 8000176:	d344      	bcc.n	8000202 <__udivsi3+0x9e>
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d328      	bcc.n	80001d0 <__udivsi3+0x6c>
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d30d      	bcc.n	80001a0 <__udivsi3+0x3c>
 8000184:	22ff      	movs	r2, #255	@ 0xff
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	ba12      	rev	r2, r2
 800018a:	0c03      	lsrs	r3, r0, #16
 800018c:	428b      	cmp	r3, r1
 800018e:	d302      	bcc.n	8000196 <__udivsi3+0x32>
 8000190:	1212      	asrs	r2, r2, #8
 8000192:	0209      	lsls	r1, r1, #8
 8000194:	d065      	beq.n	8000262 <__udivsi3+0xfe>
 8000196:	0b03      	lsrs	r3, r0, #12
 8000198:	428b      	cmp	r3, r1
 800019a:	d319      	bcc.n	80001d0 <__udivsi3+0x6c>
 800019c:	e000      	b.n	80001a0 <__udivsi3+0x3c>
 800019e:	0a09      	lsrs	r1, r1, #8
 80001a0:	0bc3      	lsrs	r3, r0, #15
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x46>
 80001a6:	03cb      	lsls	r3, r1, #15
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b83      	lsrs	r3, r0, #14
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x52>
 80001b2:	038b      	lsls	r3, r1, #14
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b43      	lsrs	r3, r0, #13
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x5e>
 80001be:	034b      	lsls	r3, r1, #13
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0b03      	lsrs	r3, r0, #12
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x6a>
 80001ca:	030b      	lsls	r3, r1, #12
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0ac3      	lsrs	r3, r0, #11
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x76>
 80001d6:	02cb      	lsls	r3, r1, #11
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a83      	lsrs	r3, r0, #10
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x82>
 80001e2:	028b      	lsls	r3, r1, #10
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a43      	lsrs	r3, r0, #9
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x8e>
 80001ee:	024b      	lsls	r3, r1, #9
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	0a03      	lsrs	r3, r0, #8
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x9a>
 80001fa:	020b      	lsls	r3, r1, #8
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	d2cd      	bcs.n	800019e <__udivsi3+0x3a>
 8000202:	09c3      	lsrs	r3, r0, #7
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xa8>
 8000208:	01cb      	lsls	r3, r1, #7
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0983      	lsrs	r3, r0, #6
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xb4>
 8000214:	018b      	lsls	r3, r1, #6
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0943      	lsrs	r3, r0, #5
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xc0>
 8000220:	014b      	lsls	r3, r1, #5
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xcc>
 800022c:	010b      	lsls	r3, r1, #4
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	08c3      	lsrs	r3, r0, #3
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xd8>
 8000238:	00cb      	lsls	r3, r1, #3
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0883      	lsrs	r3, r0, #2
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xe4>
 8000244:	008b      	lsls	r3, r1, #2
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	0843      	lsrs	r3, r0, #1
 800024c:	428b      	cmp	r3, r1
 800024e:	d301      	bcc.n	8000254 <__udivsi3+0xf0>
 8000250:	004b      	lsls	r3, r1, #1
 8000252:	1ac0      	subs	r0, r0, r3
 8000254:	4152      	adcs	r2, r2
 8000256:	1a41      	subs	r1, r0, r1
 8000258:	d200      	bcs.n	800025c <__udivsi3+0xf8>
 800025a:	4601      	mov	r1, r0
 800025c:	4152      	adcs	r2, r2
 800025e:	4610      	mov	r0, r2
 8000260:	4770      	bx	lr
 8000262:	e7ff      	b.n	8000264 <__udivsi3+0x100>
 8000264:	b501      	push	{r0, lr}
 8000266:	2000      	movs	r0, #0
 8000268:	f000 f8f0 	bl	800044c <__aeabi_idiv0>
 800026c:	bd02      	pop	{r1, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_uidivmod>:
 8000270:	2900      	cmp	r1, #0
 8000272:	d0f7      	beq.n	8000264 <__udivsi3+0x100>
 8000274:	e776      	b.n	8000164 <__udivsi3>
 8000276:	4770      	bx	lr

08000278 <__divsi3>:
 8000278:	4603      	mov	r3, r0
 800027a:	430b      	orrs	r3, r1
 800027c:	d47f      	bmi.n	800037e <__divsi3+0x106>
 800027e:	2200      	movs	r2, #0
 8000280:	0843      	lsrs	r3, r0, #1
 8000282:	428b      	cmp	r3, r1
 8000284:	d374      	bcc.n	8000370 <__divsi3+0xf8>
 8000286:	0903      	lsrs	r3, r0, #4
 8000288:	428b      	cmp	r3, r1
 800028a:	d35f      	bcc.n	800034c <__divsi3+0xd4>
 800028c:	0a03      	lsrs	r3, r0, #8
 800028e:	428b      	cmp	r3, r1
 8000290:	d344      	bcc.n	800031c <__divsi3+0xa4>
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d328      	bcc.n	80002ea <__divsi3+0x72>
 8000298:	0c03      	lsrs	r3, r0, #16
 800029a:	428b      	cmp	r3, r1
 800029c:	d30d      	bcc.n	80002ba <__divsi3+0x42>
 800029e:	22ff      	movs	r2, #255	@ 0xff
 80002a0:	0209      	lsls	r1, r1, #8
 80002a2:	ba12      	rev	r2, r2
 80002a4:	0c03      	lsrs	r3, r0, #16
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d302      	bcc.n	80002b0 <__divsi3+0x38>
 80002aa:	1212      	asrs	r2, r2, #8
 80002ac:	0209      	lsls	r1, r1, #8
 80002ae:	d065      	beq.n	800037c <__divsi3+0x104>
 80002b0:	0b03      	lsrs	r3, r0, #12
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d319      	bcc.n	80002ea <__divsi3+0x72>
 80002b6:	e000      	b.n	80002ba <__divsi3+0x42>
 80002b8:	0a09      	lsrs	r1, r1, #8
 80002ba:	0bc3      	lsrs	r3, r0, #15
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x4c>
 80002c0:	03cb      	lsls	r3, r1, #15
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b83      	lsrs	r3, r0, #14
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x58>
 80002cc:	038b      	lsls	r3, r1, #14
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0b43      	lsrs	r3, r0, #13
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x64>
 80002d8:	034b      	lsls	r3, r1, #13
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0b03      	lsrs	r3, r0, #12
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x70>
 80002e4:	030b      	lsls	r3, r1, #12
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0ac3      	lsrs	r3, r0, #11
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x7c>
 80002f0:	02cb      	lsls	r3, r1, #11
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a83      	lsrs	r3, r0, #10
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0x88>
 80002fc:	028b      	lsls	r3, r1, #10
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	0a43      	lsrs	r3, r0, #9
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__divsi3+0x94>
 8000308:	024b      	lsls	r3, r1, #9
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	0a03      	lsrs	r3, r0, #8
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__divsi3+0xa0>
 8000314:	020b      	lsls	r3, r1, #8
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	d2cd      	bcs.n	80002b8 <__divsi3+0x40>
 800031c:	09c3      	lsrs	r3, r0, #7
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xae>
 8000322:	01cb      	lsls	r3, r1, #7
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0983      	lsrs	r3, r0, #6
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xba>
 800032e:	018b      	lsls	r3, r1, #6
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0943      	lsrs	r3, r0, #5
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xc6>
 800033a:	014b      	lsls	r3, r1, #5
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xd2>
 8000346:	010b      	lsls	r3, r1, #4
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	08c3      	lsrs	r3, r0, #3
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xde>
 8000352:	00cb      	lsls	r3, r1, #3
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	0883      	lsrs	r3, r0, #2
 800035a:	428b      	cmp	r3, r1
 800035c:	d301      	bcc.n	8000362 <__divsi3+0xea>
 800035e:	008b      	lsls	r3, r1, #2
 8000360:	1ac0      	subs	r0, r0, r3
 8000362:	4152      	adcs	r2, r2
 8000364:	0843      	lsrs	r3, r0, #1
 8000366:	428b      	cmp	r3, r1
 8000368:	d301      	bcc.n	800036e <__divsi3+0xf6>
 800036a:	004b      	lsls	r3, r1, #1
 800036c:	1ac0      	subs	r0, r0, r3
 800036e:	4152      	adcs	r2, r2
 8000370:	1a41      	subs	r1, r0, r1
 8000372:	d200      	bcs.n	8000376 <__divsi3+0xfe>
 8000374:	4601      	mov	r1, r0
 8000376:	4152      	adcs	r2, r2
 8000378:	4610      	mov	r0, r2
 800037a:	4770      	bx	lr
 800037c:	e05d      	b.n	800043a <__divsi3+0x1c2>
 800037e:	0fca      	lsrs	r2, r1, #31
 8000380:	d000      	beq.n	8000384 <__divsi3+0x10c>
 8000382:	4249      	negs	r1, r1
 8000384:	1003      	asrs	r3, r0, #32
 8000386:	d300      	bcc.n	800038a <__divsi3+0x112>
 8000388:	4240      	negs	r0, r0
 800038a:	4053      	eors	r3, r2
 800038c:	2200      	movs	r2, #0
 800038e:	469c      	mov	ip, r3
 8000390:	0903      	lsrs	r3, r0, #4
 8000392:	428b      	cmp	r3, r1
 8000394:	d32d      	bcc.n	80003f2 <__divsi3+0x17a>
 8000396:	0a03      	lsrs	r3, r0, #8
 8000398:	428b      	cmp	r3, r1
 800039a:	d312      	bcc.n	80003c2 <__divsi3+0x14a>
 800039c:	22fc      	movs	r2, #252	@ 0xfc
 800039e:	0189      	lsls	r1, r1, #6
 80003a0:	ba12      	rev	r2, r2
 80003a2:	0a03      	lsrs	r3, r0, #8
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d30c      	bcc.n	80003c2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	1192      	asrs	r2, r2, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d308      	bcc.n	80003c2 <__divsi3+0x14a>
 80003b0:	0189      	lsls	r1, r1, #6
 80003b2:	1192      	asrs	r2, r2, #6
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d304      	bcc.n	80003c2 <__divsi3+0x14a>
 80003b8:	0189      	lsls	r1, r1, #6
 80003ba:	d03a      	beq.n	8000432 <__divsi3+0x1ba>
 80003bc:	1192      	asrs	r2, r2, #6
 80003be:	e000      	b.n	80003c2 <__divsi3+0x14a>
 80003c0:	0989      	lsrs	r1, r1, #6
 80003c2:	09c3      	lsrs	r3, r0, #7
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x154>
 80003c8:	01cb      	lsls	r3, r1, #7
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0983      	lsrs	r3, r0, #6
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x160>
 80003d4:	018b      	lsls	r3, r1, #6
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0943      	lsrs	r3, r0, #5
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x16c>
 80003e0:	014b      	lsls	r3, r1, #5
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0903      	lsrs	r3, r0, #4
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x178>
 80003ec:	010b      	lsls	r3, r1, #4
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	08c3      	lsrs	r3, r0, #3
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x184>
 80003f8:	00cb      	lsls	r3, r1, #3
 80003fa:	1ac0      	subs	r0, r0, r3
 80003fc:	4152      	adcs	r2, r2
 80003fe:	0883      	lsrs	r3, r0, #2
 8000400:	428b      	cmp	r3, r1
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x190>
 8000404:	008b      	lsls	r3, r1, #2
 8000406:	1ac0      	subs	r0, r0, r3
 8000408:	4152      	adcs	r2, r2
 800040a:	d2d9      	bcs.n	80003c0 <__divsi3+0x148>
 800040c:	0843      	lsrs	r3, r0, #1
 800040e:	428b      	cmp	r3, r1
 8000410:	d301      	bcc.n	8000416 <__divsi3+0x19e>
 8000412:	004b      	lsls	r3, r1, #1
 8000414:	1ac0      	subs	r0, r0, r3
 8000416:	4152      	adcs	r2, r2
 8000418:	1a41      	subs	r1, r0, r1
 800041a:	d200      	bcs.n	800041e <__divsi3+0x1a6>
 800041c:	4601      	mov	r1, r0
 800041e:	4663      	mov	r3, ip
 8000420:	4152      	adcs	r2, r2
 8000422:	105b      	asrs	r3, r3, #1
 8000424:	4610      	mov	r0, r2
 8000426:	d301      	bcc.n	800042c <__divsi3+0x1b4>
 8000428:	4240      	negs	r0, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d500      	bpl.n	8000430 <__divsi3+0x1b8>
 800042e:	4249      	negs	r1, r1
 8000430:	4770      	bx	lr
 8000432:	4663      	mov	r3, ip
 8000434:	105b      	asrs	r3, r3, #1
 8000436:	d300      	bcc.n	800043a <__divsi3+0x1c2>
 8000438:	4240      	negs	r0, r0
 800043a:	b501      	push	{r0, lr}
 800043c:	2000      	movs	r0, #0
 800043e:	f000 f805 	bl	800044c <__aeabi_idiv0>
 8000442:	bd02      	pop	{r1, pc}

08000444 <__aeabi_idivmod>:
 8000444:	2900      	cmp	r1, #0
 8000446:	d0f8      	beq.n	800043a <__divsi3+0x1c2>
 8000448:	e716      	b.n	8000278 <__divsi3>
 800044a:	4770      	bx	lr

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_uldivmod>:
 8000450:	2b00      	cmp	r3, #0
 8000452:	d111      	bne.n	8000478 <__aeabi_uldivmod+0x28>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d10f      	bne.n	8000478 <__aeabi_uldivmod+0x28>
 8000458:	2900      	cmp	r1, #0
 800045a:	d100      	bne.n	800045e <__aeabi_uldivmod+0xe>
 800045c:	2800      	cmp	r0, #0
 800045e:	d002      	beq.n	8000466 <__aeabi_uldivmod+0x16>
 8000460:	2100      	movs	r1, #0
 8000462:	43c9      	mvns	r1, r1
 8000464:	0008      	movs	r0, r1
 8000466:	b407      	push	{r0, r1, r2}
 8000468:	4802      	ldr	r0, [pc, #8]	@ (8000474 <__aeabi_uldivmod+0x24>)
 800046a:	a102      	add	r1, pc, #8	@ (adr r1, 8000474 <__aeabi_uldivmod+0x24>)
 800046c:	1840      	adds	r0, r0, r1
 800046e:	9002      	str	r0, [sp, #8]
 8000470:	bd03      	pop	{r0, r1, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	ffffffd9 	.word	0xffffffd9
 8000478:	b403      	push	{r0, r1}
 800047a:	4668      	mov	r0, sp
 800047c:	b501      	push	{r0, lr}
 800047e:	9802      	ldr	r0, [sp, #8]
 8000480:	f000 f806 	bl	8000490 <__udivmoddi4>
 8000484:	9b01      	ldr	r3, [sp, #4]
 8000486:	469e      	mov	lr, r3
 8000488:	b002      	add	sp, #8
 800048a:	bc0c      	pop	{r2, r3}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <report_callback>:
}
#endif /* __ICCARM__ */

static void report_callback(void)
{
	char *report = NULL;
 800067c:	2300      	movs	r3, #0
{
 800067e:	b513      	push	{r0, r1, r4, lr}
	int32_t ret;

	ret = spi_iface_receive_report(&report);
 8000680:	a801      	add	r0, sp, #4
	char *report = NULL;
 8000682:	9301      	str	r3, [sp, #4]
	ret = spi_iface_receive_report(&report);
 8000684:	f002 fa8e 	bl	8002ba4 <spi_iface_receive_report>
//	printf("Report: %s", report);

	if (wait_for_scan_report == 1 && ret == 16)
 8000688:	4c0b      	ldr	r4, [pc, #44]	@ (80006b8 <report_callback+0x3c>)
 800068a:	7823      	ldrb	r3, [r4, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d102      	bne.n	8000696 <report_callback+0x1a>
	{
		if (strncmp(report, "+CW:SCAN_DONE\r\n", 16) == 0) wait_for_scan_report = 0;
 8000690:	490a      	ldr	r1, [pc, #40]	@ (80006bc <report_callback+0x40>)
	if (wait_for_scan_report == 1 && ret == 16)
 8000692:	2810      	cmp	r0, #16
 8000694:	d006      	beq.n	80006a4 <report_callback+0x28>
	}
	else if (wait_for_ip_report == 1 && ret == 12)
 8000696:	4c0a      	ldr	r4, [pc, #40]	@ (80006c0 <report_callback+0x44>)
 8000698:	7823      	ldrb	r3, [r4, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <report_callback+0x34>
 800069e:	280c      	cmp	r0, #12
 80006a0:	d106      	bne.n	80006b0 <report_callback+0x34>
	{
		if (strncmp(report, "+CW:GOTIP\r\n", 12) == 0) wait_for_ip_report = 0;
 80006a2:	4908      	ldr	r1, [pc, #32]	@ (80006c4 <report_callback+0x48>)
 80006a4:	9801      	ldr	r0, [sp, #4]
 80006a6:	f7ff fd2d 	bl	8000104 <strcmp>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d100      	bne.n	80006b0 <report_callback+0x34>
 80006ae:	7020      	strb	r0, [r4, #0]
	}
	free(report);
 80006b0:	9801      	ldr	r0, [sp, #4]
 80006b2:	f002 fb59 	bl	8002d68 <free>
}
 80006b6:	bd13      	pop	{r0, r1, r4, pc}
 80006b8:	20000089 	.word	0x20000089
 80006bc:	08003df4 	.word	0x08003df4
 80006c0:	20000088 	.word	0x20000088
 80006c4:	08003e04 	.word	0x08003e04

080006c8 <__io_putchar>:
  HAL_UART_Transmit(&huart2, (unsigned char *)&ch, 1, 1000);
 80006c8:	23fa      	movs	r3, #250	@ 0xfa
{
 80006ca:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart2, (unsigned char *)&ch, 1, 1000);
 80006cc:	009b      	lsls	r3, r3, #2
{
 80006ce:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (unsigned char *)&ch, 1, 1000);
 80006d0:	2201      	movs	r2, #1
 80006d2:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <__io_putchar+0x18>)
 80006d4:	a901      	add	r1, sp, #4
 80006d6:	f001 fe84 	bl	80023e2 <HAL_UART_Transmit>
  return ch;
 80006da:	9801      	ldr	r0, [sp, #4]
}
 80006dc:	bd0e      	pop	{r1, r2, r3, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	2000008c 	.word	0x2000008c

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b510      	push	{r4, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e8:	223c      	movs	r2, #60	@ 0x3c
 80006ea:	2100      	movs	r1, #0
 80006ec:	a805      	add	r0, sp, #20
 80006ee:	f002 fe5f 	bl	80033b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f2:	2210      	movs	r2, #16
 80006f4:	2100      	movs	r1, #0
 80006f6:	a801      	add	r0, sp, #4
 80006f8:	f002 fe5a 	bl	80033b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2080      	movs	r0, #128	@ 0x80
 80006fe:	0080      	lsls	r0, r0, #2
 8000700:	f000 fc08 	bl	8000f14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800070e:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000710:	3308      	adds	r3, #8
 8000712:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	029b      	lsls	r3, r3, #10
 8000718:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	049b      	lsls	r3, r3, #18
 800071e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000722:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000726:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f000 fc1a 	bl	8000f6c <HAL_RCC_OscConfig>
 8000738:	2800      	cmp	r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073e:	e7fe      	b.n	800073e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000746:	0021      	movs	r1, r4
 8000748:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074e:	f000 fea5 	bl	800149c <HAL_RCC_ClockConfig>
 8000752:	2800      	cmp	r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x76>
 8000756:	b672      	cpsid	i
  while (1)
 8000758:	e7fe      	b.n	8000758 <SystemClock_Config+0x74>
}
 800075a:	b014      	add	sp, #80	@ 0x50
 800075c:	bd10      	pop	{r4, pc}
	...

08000760 <MX_SPI1_Init>:
  hspi1.Instance = SPI1;
 8000760:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <MX_SPI1_Init+0x44>)
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_SPI1_Init+0x48>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000764:	22e0      	movs	r2, #224	@ 0xe0
{
 8000766:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8000768:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076a:	2382      	movs	r3, #130	@ 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	00d2      	lsls	r2, r2, #3
 800076e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000770:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000776:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800077c:	3afa      	subs	r2, #250	@ 0xfa
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000780:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000782:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000784:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000788:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800078c:	3aff      	subs	r2, #255	@ 0xff
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000790:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000792:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000794:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000796:	f001 f9b9 	bl	8001b0c <HAL_SPI_Init>
 800079a:	2800      	cmp	r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_SPI1_Init+0x42>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MX_SPI1_Init+0x40>
}
 80007a2:	bd10      	pop	{r4, pc}
 80007a4:	20000120 	.word	0x20000120
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_USART2_UART_Init>:
{
 80007ac:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_USART2_UART_Init+0x60>)
 80007b0:	4c17      	ldr	r4, [pc, #92]	@ (8000810 <MX_USART2_UART_Init+0x64>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b2:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 80007b4:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	23e1      	movs	r3, #225	@ 0xe1
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007bc:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	0020      	movs	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c0:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c2:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c4:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c6:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c8:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ca:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007cc:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ce:	6263      	str	r3, [r4, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	f001 fed5 	bl	8002580 <HAL_UART_Init>
 80007d6:	1e01      	subs	r1, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x32>
 80007da:	b672      	cpsid	i
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MX_USART2_UART_Init+0x30>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	0020      	movs	r0, r4
 80007e0:	f001 ff48 	bl	8002674 <HAL_UARTEx_SetTxFifoThreshold>
 80007e4:	1e01      	subs	r1, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x40>
 80007e8:	b672      	cpsid	i
  while (1)
 80007ea:	e7fe      	b.n	80007ea <MX_USART2_UART_Init+0x3e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	0020      	movs	r0, r4
 80007ee:	f001 ff61 	bl	80026b4 <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x4e>
 80007f6:	b672      	cpsid	i
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MX_USART2_UART_Init+0x4c>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007fa:	0020      	movs	r0, r4
 80007fc:	f001 ff1c 	bl	8002638 <HAL_UARTEx_DisableFifoMode>
 8000800:	2800      	cmp	r0, #0
 8000802:	d001      	beq.n	8000808 <MX_USART2_UART_Init+0x5c>
 8000804:	b672      	cpsid	i
  while (1)
 8000806:	e7fe      	b.n	8000806 <MX_USART2_UART_Init+0x5a>
}
 8000808:	bd10      	pop	{r4, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	40004400 	.word	0x40004400
 8000810:	2000008c 	.word	0x2000008c

08000814 <main>:
{
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 8000818:	f000 fa10 	bl	8000c3c <HAL_Init>
  SystemClock_Config();
 800081c:	f7ff ff62 	bl	80006e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	2214      	movs	r2, #20
 8000822:	2100      	movs	r1, #0
 8000824:	a805      	add	r0, sp, #20
 8000826:	f002 fdc3 	bl	80033b0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000830:	4b4d      	ldr	r3, [pc, #308]	@ (8000968 <main+0x154>)
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|BOOT_Pin|CHIP_EN_Pin, GPIO_PIN_RESET);
 8000832:	484e      	ldr	r0, [pc, #312]	@ (800096c <main+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	430a      	orrs	r2, r1
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
 800083c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083e:	400a      	ands	r2, r1
 8000840:	9201      	str	r2, [sp, #4]
 8000842:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000846:	311c      	adds	r1, #28
 8000848:	430a      	orrs	r2, r1
 800084a:	635a      	str	r2, [r3, #52]	@ 0x34
 800084c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084e:	400a      	ands	r2, r1
 8000850:	9202      	str	r2, [sp, #8]
 8000852:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|BOOT_Pin|CHIP_EN_Pin, GPIO_PIN_RESET);
 8000856:	4946      	ldr	r1, [pc, #280]	@ (8000970 <main+0x15c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	432a      	orrs	r2, r5
 800085a:	635a      	str	r2, [r3, #52]	@ 0x34
 800085c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085e:	402a      	ands	r2, r5
 8000860:	9203      	str	r2, [sp, #12]
 8000862:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000866:	4332      	orrs	r2, r6
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
 800086a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|BOOT_Pin|CHIP_EN_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4033      	ands	r3, r6
 8000870:	9304      	str	r3, [sp, #16]
 8000872:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|BOOT_Pin|CHIP_EN_Pin, GPIO_PIN_RESET);
 8000874:	f000 fb34 	bl	8000ee0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	019b      	lsls	r3, r3, #6
 800087c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	2388      	movs	r3, #136	@ 0x88
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000880:	483c      	ldr	r0, [pc, #240]	@ (8000974 <main+0x160>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f000 fa6b 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin|CHIP_EN_Pin;
 800088e:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	4836      	ldr	r0, [pc, #216]	@ (800096c <main+0x158>)
 8000892:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SPI_CS_Pin|CHIP_EN_Pin;
 8000894:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f000 fa62 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOOT_Pin;
 80008a0:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	4832      	ldr	r0, [pc, #200]	@ (800096c <main+0x158>)
  GPIO_InitStruct.Pin = BOOT_Pin;
 80008a4:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80008a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = BOOT_Pin;
 80008a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f000 fa58 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008ba:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008be:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c0:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f000 fa4c 	bl	8000d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_RDY_Pin;
 80008cc:	2308      	movs	r3, #8
 80008ce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d0:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(SPI_RDY_GPIO_Port, &GPIO_InitStruct);
 80008d2:	4826      	ldr	r0, [pc, #152]	@ (800096c <main+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d4:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(SPI_RDY_GPIO_Port, &GPIO_InitStruct);
 80008d6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SPI_RDY_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f000 fa42 	bl	8000d64 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80008e0:	0022      	movs	r2, r4
 80008e2:	2103      	movs	r1, #3
 80008e4:	2006      	movs	r0, #6
 80008e6:	f000 f9ed 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80008ea:	2006      	movs	r0, #6
 80008ec:	f000 fa14 	bl	8000d18 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80008f0:	0022      	movs	r2, r4
 80008f2:	2103      	movs	r1, #3
 80008f4:	2007      	movs	r0, #7
 80008f6:	f000 f9e5 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 fa0c 	bl	8000d18 <HAL_NVIC_EnableIRQ>
  MX_SPI1_Init();
 8000900:	f7ff ff2e 	bl	8000760 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000904:	f7ff ff52 	bl	80007ac <MX_USART2_UART_Init>
  ret = spi_iface_init(&report_callback);
 8000908:	481b      	ldr	r0, [pc, #108]	@ (8000978 <main+0x164>)
  char *resp = NULL;
 800090a:	9405      	str	r4, [sp, #20]
  ret = spi_iface_init(&report_callback);
 800090c:	f001 ffc0 	bl	8002890 <spi_iface_init>
  spi_iface_send("AT+CWMODE=1,0", &resp);
 8000910:	a905      	add	r1, sp, #20
 8000912:	481a      	ldr	r0, [pc, #104]	@ (800097c <main+0x168>)
 8000914:	f002 f850 	bl	80029b8 <spi_iface_send>
  spi_iface_send("AT+SLCLDTIM", &resp);
 8000918:	a905      	add	r1, sp, #20
 800091a:	4819      	ldr	r0, [pc, #100]	@ (8000980 <main+0x16c>)
 800091c:	f002 f84c 	bl	80029b8 <spi_iface_send>
  spi_iface_send("AT+CWLAPOPT=1,3", &resp);
 8000920:	a905      	add	r1, sp, #20
 8000922:	4818      	ldr	r0, [pc, #96]	@ (8000984 <main+0x170>)
 8000924:	f002 f848 	bl	80029b8 <spi_iface_send>
  wait_for_scan_report = 1;
 8000928:	4c17      	ldr	r4, [pc, #92]	@ (8000988 <main+0x174>)
  spi_iface_send("AT+CWLAP=0", &resp);
 800092a:	4818      	ldr	r0, [pc, #96]	@ (800098c <main+0x178>)
 800092c:	a905      	add	r1, sp, #20
  wait_for_scan_report = 1;
 800092e:	7025      	strb	r5, [r4, #0]
  spi_iface_send("AT+CWLAP=0", &resp);
 8000930:	f002 f842 	bl	80029b8 <spi_iface_send>
  while(wait_for_scan_report) {}
 8000934:	7823      	ldrb	r3, [r4, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1fc      	bne.n	8000934 <main+0x120>
  wait_for_ip_report = 1;
 800093a:	4c15      	ldr	r4, [pc, #84]	@ (8000990 <main+0x17c>)
 800093c:	3301      	adds	r3, #1
  spi_iface_send("AT+CWJAP=\"TOMCAT\",\"freescale2\"", &resp);
 800093e:	4815      	ldr	r0, [pc, #84]	@ (8000994 <main+0x180>)
 8000940:	a905      	add	r1, sp, #20
  wait_for_ip_report = 1;
 8000942:	7023      	strb	r3, [r4, #0]
  spi_iface_send("AT+CWJAP=\"TOMCAT\",\"freescale2\"", &resp);
 8000944:	f002 f838 	bl	80029b8 <spi_iface_send>
  while(wait_for_ip_report) {}
 8000948:	7823      	ldrb	r3, [r4, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1fc      	bne.n	8000948 <main+0x134>
  spi_iface_send("AT+CIPSTA?", &resp);
 800094e:	a905      	add	r1, sp, #20
 8000950:	4811      	ldr	r0, [pc, #68]	@ (8000998 <main+0x184>)
 8000952:	f002 f831 	bl	80029b8 <spi_iface_send>
  spi_iface_send("AT+PING=\"www.google.com\",64,8,500", &resp);
 8000956:	4811      	ldr	r0, [pc, #68]	@ (800099c <main+0x188>)
 8000958:	a905      	add	r1, sp, #20
 800095a:	f002 f82d 	bl	80029b8 <spi_iface_send>
  free(resp);
 800095e:	9805      	ldr	r0, [sp, #20]
 8000960:	f002 fa02 	bl	8002d68 <free>
  while (1)
 8000964:	e7fe      	b.n	8000964 <main+0x150>
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	40021000 	.word	0x40021000
 800096c:	50000400 	.word	0x50000400
 8000970:	00004011 	.word	0x00004011
 8000974:	50000800 	.word	0x50000800
 8000978:	0800067d 	.word	0x0800067d
 800097c:	08003e10 	.word	0x08003e10
 8000980:	08003e1e 	.word	0x08003e1e
 8000984:	08003e2a 	.word	0x08003e2a
 8000988:	20000089 	.word	0x20000089
 800098c:	08003e3a 	.word	0x08003e3a
 8000990:	20000088 	.word	0x20000088
 8000994:	08003e45 	.word	0x08003e45
 8000998:	08003e64 	.word	0x08003e64
 800099c:	08003e6f 	.word	0x08003e6f

080009a0 <HAL_GPIO_EXTI_Rising_Callback>:
{
 80009a0:	b510      	push	{r4, lr}
  if (pin == SPI_RDY_Pin)
 80009a2:	2808      	cmp	r0, #8
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_EXTI_Rising_Callback+0xa>
	  spi_iface_ncp_ready_high();
 80009a6:	f001 fea7 	bl	80026f8 <spi_iface_ncp_ready_high>
}
 80009aa:	bd10      	pop	{r4, pc}

080009ac <HAL_GPIO_EXTI_Falling_Callback>:
{
 80009ac:	b510      	push	{r4, lr}
  if (pin == SPI_RDY_Pin)
 80009ae:	2808      	cmp	r0, #8
 80009b0:	d101      	bne.n	80009b6 <HAL_GPIO_EXTI_Falling_Callback+0xa>
	  spi_iface_ncp_ready_low();
 80009b2:	f001 feaf 	bl	8002714 <spi_iface_ncp_ready_low>
}
 80009b6:	bd10      	pop	{r4, pc}

080009b8 <Error_Handler>:
 80009b8:	b672      	cpsid	i
  while (1)
 80009ba:	e7fe      	b.n	80009ba <Error_Handler+0x2>

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b507      	push	{r0, r1, r2, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2101      	movs	r1, #1
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x3c>)
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009c2:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009c6:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	430a      	orrs	r2, r1
 80009ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80009cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ce:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009d8:	0549      	lsls	r1, r1, #21
 80009da:	430a      	orrs	r2, r1
 80009dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009e0:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	400b      	ands	r3, r1
 80009e4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009e6:	2103      	movs	r1, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009ea:	f000 f96b 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ee:	20c0      	movs	r0, #192	@ 0xc0
 80009f0:	00c0      	lsls	r0, r0, #3
 80009f2:	f000 f95b 	bl	8000cac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bd07      	pop	{r0, r1, r2, pc}
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	0004      	movs	r4, r0
 8000a00:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	2214      	movs	r2, #20
 8000a04:	2100      	movs	r1, #0
 8000a06:	a803      	add	r0, sp, #12
 8000a08:	f002 fcd2 	bl	80033b0 <memset>
  if(hspi->Instance==SPI1)
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <HAL_SPI_MspInit+0x58>)
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d11c      	bne.n	8000a4e <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_SPI_MspInit+0x5c>)
 8000a18:	0149      	lsls	r1, r1, #5
 8000a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a26:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a30:	430a      	orrs	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a36:	400b      	ands	r3, r1
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8000a3c:	23e0      	movs	r3, #224	@ 0xe0
 8000a3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	3bde      	subs	r3, #222	@ 0xde
 8000a42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f000 f98b 	bl	8000d64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	40013000 	.word	0x40013000
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	0004      	movs	r4, r0
 8000a60:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	2214      	movs	r2, #20
 8000a64:	2100      	movs	r1, #0
 8000a66:	a802      	add	r0, sp, #8
 8000a68:	f002 fca2 	bl	80033b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	224c      	movs	r2, #76	@ 0x4c
 8000a6e:	2100      	movs	r1, #0
 8000a70:	a807      	add	r0, sp, #28
 8000a72:	f002 fc9d 	bl	80033b0 <memset>
  if(huart->Instance==USART2)
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0x78>)
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d127      	bne.n	8000ace <HAL_UART_MspInit+0x72>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a7e:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a82:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f000 fdc8 	bl	8001618 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8000a8c:	f7ff ff94 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_UART_MspInit+0x7c>)
 8000a94:	0289      	lsls	r1, r1, #10
 8000a96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	9200      	str	r2, [sp, #0]
 8000aa6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000aac:	4311      	orrs	r1, r2
 8000aae:	6359      	str	r1, [r3, #52]	@ 0x34
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aba:	230c      	movs	r3, #12
 8000abc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	3b0a      	subs	r3, #10
 8000ac0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f000 f94b 	bl	8000d64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ace:	b01a      	add	sp, #104	@ 0x68
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler>

08000ade <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler>

08000ae0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000ae0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_RDY_Pin);
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f000 fa02 	bl	8000eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000ae8:	bd10      	pop	{r4, pc}

08000aea <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000aea:	2080      	movs	r0, #128	@ 0x80
{
 8000aec:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000aee:	0080      	lsls	r0, r0, #2
 8000af0:	f000 f9fc 	bl	8000eec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000af4:	2080      	movs	r0, #128	@ 0x80
 8000af6:	0180      	lsls	r0, r0, #6
 8000af8:	f000 f9f8 	bl	8000eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000afc:	bd10      	pop	{r4, pc}

08000afe <SysTick_Handler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f8b0 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bd10      	pop	{r4, pc}

08000b06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b06:	b570      	push	{r4, r5, r6, lr}
 8000b08:	000e      	movs	r6, r1
 8000b0a:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	42a5      	cmp	r5, r4
 8000b10:	db01      	blt.n	8000b16 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000b12:	0020      	movs	r0, r4
 8000b14:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000b16:	e000      	b.n	8000b1a <_read+0x14>
 8000b18:	bf00      	nop
 8000b1a:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	3501      	adds	r5, #1
 8000b1e:	e7f6      	b.n	8000b0e <_read+0x8>

08000b20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	000e      	movs	r6, r1
 8000b24:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2500      	movs	r5, #0
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	db01      	blt.n	8000b30 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000b2c:	0020      	movs	r0, r4
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000b30:	5d70      	ldrb	r0, [r6, r5]
 8000b32:	f7ff fdc9 	bl	80006c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	3501      	adds	r5, #1
 8000b38:	e7f6      	b.n	8000b28 <_write+0x8>

08000b3a <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8000b3a:	2001      	movs	r0, #1
}
 8000b3c:	4240      	negs	r0, r0
 8000b3e:	4770      	bx	lr

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	019b      	lsls	r3, r3, #6
  return 0;
}
 8000b44:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000b46:	604b      	str	r3, [r1, #4]
}
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4770      	bx	lr

08000b4e <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000b4e:	2000      	movs	r0, #0
 8000b50:	4770      	bx	lr
	...

08000b54 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	490b      	ldr	r1, [pc, #44]	@ (8000b84 <_sbrk+0x30>)
 8000b56:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <_sbrk+0x34>)
{
 8000b58:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	490b      	ldr	r1, [pc, #44]	@ (8000b8c <_sbrk+0x38>)
{
 8000b5e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000b60:	6808      	ldr	r0, [r1, #0]
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d101      	bne.n	8000b6a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000b66:	480a      	ldr	r0, [pc, #40]	@ (8000b90 <_sbrk+0x3c>)
 8000b68:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	6808      	ldr	r0, [r1, #0]
 8000b6c:	18c3      	adds	r3, r0, r3
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d906      	bls.n	8000b80 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000b72:	f002 fca5 	bl	80034c0 <__errno>
 8000b76:	230c      	movs	r3, #12
 8000b78:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000b7e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000b80:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000b82:	e7fc      	b.n	8000b7e <_sbrk+0x2a>
 8000b84:	00000400 	.word	0x00000400
 8000b88:	20024000 	.word	0x20024000
 8000b8c:	20000184 	.word	0x20000184
 8000b90:	200002e0 	.word	0x200002e0

08000b94 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	4770      	bx	lr
	...

08000b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b9c:	f7ff fffa 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	@ (8000bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LoopForever+0xe>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <LoopForever+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc6:	f002 fc81 	bl	80034cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bca:	f7ff fe23 	bl	8000814 <main>

08000bce <LoopForever>:

LoopForever:
  b LoopForever
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
  ldr   r0, =_estack
 8000bd0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000bdc:	08004044 	.word	0x08004044
  ldr r2, =_sbss
 8000be0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000be4:	200002dc 	.word	0x200002dc

08000be8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_COMP_IRQHandler>
	...

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <HAL_InitTick+0x44>)
{
 8000bf0:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000bf2:	7819      	ldrb	r1, [r3, #0]
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bfc:	20fa      	movs	r0, #250	@ 0xfa
 8000bfe:	0080      	lsls	r0, r0, #2
 8000c00:	f7ff fab0 	bl	8000164 <__udivsi3>
 8000c04:	4c0b      	ldr	r4, [pc, #44]	@ (8000c34 <HAL_InitTick+0x48>)
 8000c06:	0001      	movs	r1, r0
 8000c08:	6820      	ldr	r0, [r4, #0]
 8000c0a:	f7ff faab 	bl	8000164 <__udivsi3>
 8000c0e:	f000 f88f 	bl	8000d30 <HAL_SYSTICK_Config>
 8000c12:	1e04      	subs	r4, r0, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	2d03      	cmp	r5, #3
 8000c18:	d8ee      	bhi.n	8000bf8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	0029      	movs	r1, r5
 8000c20:	4240      	negs	r0, r0
 8000c22:	f000 f84f 	bl	8000cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <HAL_InitTick+0x4c>)
 8000c28:	0020      	movs	r0, r4
 8000c2a:	601d      	str	r5, [r3, #0]
  return status;
 8000c2c:	e7e5      	b.n	8000bfa <HAL_InitTick+0xe>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_Init+0x24>)
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	6811      	ldr	r1, [r2, #0]
{
 8000c44:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c46:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c48:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4c:	f7ff ffce 	bl	8000bec <HAL_InitTick>
 8000c50:	1e04      	subs	r4, r0, #0
 8000c52:	d103      	bne.n	8000c5c <HAL_Init+0x20>
  HAL_MspInit();
 8000c54:	f7ff feb2 	bl	80009bc <HAL_MspInit>
}
 8000c58:	0020      	movs	r0, r4
 8000c5a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000c5c:	2401      	movs	r4, #1
 8000c5e:	e7fb      	b.n	8000c58 <HAL_Init+0x1c>
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c64:	4a03      	ldr	r2, [pc, #12]	@ (8000c74 <HAL_IncTick+0x10>)
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <HAL_IncTick+0x14>)
 8000c68:	6811      	ldr	r1, [r2, #0]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	185b      	adds	r3, r3, r1
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	4770      	bx	lr
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	20000188 	.word	0x20000188
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c7c:	4b01      	ldr	r3, [pc, #4]	@ (8000c84 <HAL_GetTick+0x8>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
}
 8000c80:	4770      	bx	lr
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	20000188 	.word	0x20000188

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff6 	bl	8000c7c <HAL_GetTick>
 8000c90:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	1c63      	adds	r3, r4, #1
 8000c94:	d002      	beq.n	8000c9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_Delay+0x20>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	1b40      	subs	r0, r0, r5
 8000ca2:	42a0      	cmp	r0, r4
 8000ca4:	d3fa      	bcc.n	8000c9c <HAL_Delay+0x14>
  {
  }
}
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cac:	4a03      	ldr	r2, [pc, #12]	@ (8000cbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8000cae:	4904      	ldr	r1, [pc, #16]	@ (8000cc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8000cb0:	6813      	ldr	r3, [r2, #0]
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	4303      	orrs	r3, r0
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	4770      	bx	lr
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	fffff9ff 	.word	0xfffff9ff

08000cc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc6:	24ff      	movs	r4, #255	@ 0xff
 8000cc8:	2203      	movs	r2, #3
 8000cca:	000b      	movs	r3, r1
 8000ccc:	0021      	movs	r1, r4
 8000cce:	4002      	ands	r2, r0
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cda:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	db0a      	blt.n	8000cf6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	24c0      	movs	r4, #192	@ 0xc0
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <HAL_NVIC_SetPriority+0x4c>)
 8000ce4:	0880      	lsrs	r0, r0, #2
 8000ce6:	0080      	lsls	r0, r0, #2
 8000ce8:	1880      	adds	r0, r0, r2
 8000cea:	00a4      	lsls	r4, r4, #2
 8000cec:	5902      	ldr	r2, [r0, r4]
 8000cee:	400a      	ands	r2, r1
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000cf4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	4010      	ands	r0, r2
 8000cfa:	3808      	subs	r0, #8
 8000cfc:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <HAL_NVIC_SetPriority+0x50>)
 8000cfe:	0880      	lsrs	r0, r0, #2
 8000d00:	0080      	lsls	r0, r0, #2
 8000d02:	1880      	adds	r0, r0, r2
 8000d04:	69c2      	ldr	r2, [r0, #28]
 8000d06:	4011      	ands	r1, r2
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	61c1      	str	r1, [r0, #28]
 8000d0c:	e7f2      	b.n	8000cf4 <HAL_NVIC_SetPriority+0x30>
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	db05      	blt.n	8000d28 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1c:	231f      	movs	r3, #31
 8000d1e:	4018      	ands	r0, r3
 8000d20:	3b1e      	subs	r3, #30
 8000d22:	4083      	lsls	r3, r0
 8000d24:	4a01      	ldr	r2, [pc, #4]	@ (8000d2c <HAL_NVIC_EnableIRQ+0x14>)
 8000d26:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d28:	4770      	bx	lr
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	2280      	movs	r2, #128	@ 0x80
 8000d32:	1e43      	subs	r3, r0, #1
 8000d34:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d20d      	bcs.n	8000d58 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d44:	6a03      	ldr	r3, [r0, #32]
 8000d46:	0609      	lsls	r1, r1, #24
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000d58:	4770      	bx	lr
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	e000e010 	.word	0xe000e010
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000d64:	2300      	movs	r3, #0
{
 8000d66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d68:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	680a      	ldr	r2, [r1, #0]
 8000d6c:	0014      	movs	r4, r2
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8000d72:	b005      	add	sp, #20
 8000d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d76:	2501      	movs	r5, #1
 8000d78:	0014      	movs	r4, r2
 8000d7a:	409d      	lsls	r5, r3
 8000d7c:	402c      	ands	r4, r5
 8000d7e:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000d80:	422a      	tst	r2, r5
 8000d82:	d100      	bne.n	8000d86 <HAL_GPIO_Init+0x22>
 8000d84:	e095      	b.n	8000eb2 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d86:	684a      	ldr	r2, [r1, #4]
 8000d88:	005f      	lsls	r7, r3, #1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4664      	mov	r4, ip
 8000d90:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d92:	2403      	movs	r4, #3
 8000d94:	40bc      	lsls	r4, r7
 8000d96:	43e4      	mvns	r4, r4
 8000d98:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d9a:	1e54      	subs	r4, r2, #1
 8000d9c:	2c01      	cmp	r4, #1
 8000d9e:	d82e      	bhi.n	8000dfe <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000da0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000da2:	9c01      	ldr	r4, [sp, #4]
 8000da4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da6:	68cc      	ldr	r4, [r1, #12]
 8000da8:	40bc      	lsls	r4, r7
 8000daa:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000dac:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dae:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	43ac      	bics	r4, r5
 8000db4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	4664      	mov	r4, ip
 8000db8:	0924      	lsrs	r4, r4, #4
 8000dba:	4034      	ands	r4, r6
 8000dbc:	409c      	lsls	r4, r3
 8000dbe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000dc0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000dc2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc4:	9c01      	ldr	r4, [sp, #4]
 8000dc6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc8:	688c      	ldr	r4, [r1, #8]
 8000dca:	40bc      	lsls	r4, r7
 8000dcc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000dce:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd0:	2a02      	cmp	r2, #2
 8000dd2:	d116      	bne.n	8000e02 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd4:	2507      	movs	r5, #7
 8000dd6:	260f      	movs	r6, #15
 8000dd8:	401d      	ands	r5, r3
 8000dda:	00ad      	lsls	r5, r5, #2
 8000ddc:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000dde:	08dc      	lsrs	r4, r3, #3
 8000de0:	00a4      	lsls	r4, r4, #2
 8000de2:	1904      	adds	r4, r0, r4
 8000de4:	9402      	str	r4, [sp, #8]
 8000de6:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de8:	9603      	str	r6, [sp, #12]
 8000dea:	0026      	movs	r6, r4
 8000dec:	9c03      	ldr	r4, [sp, #12]
 8000dee:	43a6      	bics	r6, r4
 8000df0:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df2:	690e      	ldr	r6, [r1, #16]
 8000df4:	40ae      	lsls	r6, r5
 8000df6:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000df8:	9c02      	ldr	r4, [sp, #8]
 8000dfa:	6226      	str	r6, [r4, #32]
 8000dfc:	e001      	b.n	8000e02 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	2a03      	cmp	r2, #3
 8000e00:	d1df      	bne.n	8000dc2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e02:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000e04:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e06:	9d01      	ldr	r5, [sp, #4]
 8000e08:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000e0e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e10:	4662      	mov	r2, ip
 8000e12:	02a4      	lsls	r4, r4, #10
 8000e14:	4222      	tst	r2, r4
 8000e16:	d04c      	beq.n	8000eb2 <HAL_GPIO_Init+0x14e>
        temp = EXTI->EXTICR[position >> 2u];
 8000e18:	4a27      	ldr	r2, [pc, #156]	@ (8000eb8 <HAL_GPIO_Init+0x154>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e1a:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8000e1c:	089c      	lsrs	r4, r3, #2
 8000e1e:	00a4      	lsls	r4, r4, #2
 8000e20:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e22:	220f      	movs	r2, #15
 8000e24:	401d      	ands	r5, r3
 8000e26:	00ed      	lsls	r5, r5, #3
 8000e28:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e2a:	27a0      	movs	r7, #160	@ 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8000e2c:	6e26      	ldr	r6, [r4, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e2e:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e30:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e32:	2200      	movs	r2, #0
 8000e34:	42b8      	cmp	r0, r7
 8000e36:	d010      	beq.n	8000e5a <HAL_GPIO_Init+0xf6>
 8000e38:	4f20      	ldr	r7, [pc, #128]	@ (8000ebc <HAL_GPIO_Init+0x158>)
 8000e3a:	3201      	adds	r2, #1
 8000e3c:	42b8      	cmp	r0, r7
 8000e3e:	d00c      	beq.n	8000e5a <HAL_GPIO_Init+0xf6>
 8000e40:	4f1f      	ldr	r7, [pc, #124]	@ (8000ec0 <HAL_GPIO_Init+0x15c>)
 8000e42:	3201      	adds	r2, #1
 8000e44:	42b8      	cmp	r0, r7
 8000e46:	d008      	beq.n	8000e5a <HAL_GPIO_Init+0xf6>
 8000e48:	4f1e      	ldr	r7, [pc, #120]	@ (8000ec4 <HAL_GPIO_Init+0x160>)
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	42b8      	cmp	r0, r7
 8000e4e:	d004      	beq.n	8000e5a <HAL_GPIO_Init+0xf6>
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_GPIO_Init+0x164>)
 8000e52:	1882      	adds	r2, r0, r2
 8000e54:	1e57      	subs	r7, r2, #1
 8000e56:	41ba      	sbcs	r2, r7
 8000e58:	3204      	adds	r2, #4
 8000e5a:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5c:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e5e:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8000e60:	6622      	str	r2, [r4, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8000e62:	4c15      	ldr	r4, [pc, #84]	@ (8000eb8 <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 8000e64:	9a00      	ldr	r2, [sp, #0]
        temp = EXTI->RTSR1;
 8000e66:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8000e68:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000e6a:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8000e6c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e6e:	02ff      	lsls	r7, r7, #11
 8000e70:	d401      	bmi.n	8000e76 <HAL_GPIO_Init+0x112>
        temp &= ~(iocurrent);
 8000e72:	0035      	movs	r5, r6
 8000e74:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e76:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8000e78:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8000e7a:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8000e7c:	9d00      	ldr	r5, [sp, #0]
 8000e7e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e80:	02bf      	lsls	r7, r7, #10
 8000e82:	d401      	bmi.n	8000e88 <HAL_GPIO_Init+0x124>
        temp &= ~(iocurrent);
 8000e84:	0035      	movs	r5, r6
 8000e86:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e88:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8000e8a:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8000e8c:	4c0f      	ldr	r4, [pc, #60]	@ (8000ecc <HAL_GPIO_Init+0x168>)
          temp |= iocurrent;
 8000e8e:	9d00      	ldr	r5, [sp, #0]
        temp = EXTI->EMR1;
 8000e90:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8000e92:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e94:	03bf      	lsls	r7, r7, #14
 8000e96:	d401      	bmi.n	8000e9c <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000e98:	0035      	movs	r5, r6
 8000e9a:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e9c:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8000e9e:	67e5      	str	r5, [r4, #124]	@ 0x7c
        temp = EXTI->IMR1;
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8000ed0 <HAL_GPIO_Init+0x16c>)
          temp |= iocurrent;
 8000ea2:	9e00      	ldr	r6, [sp, #0]
        temp = EXTI->IMR1;
 8000ea4:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
          temp |= iocurrent;
 8000ea6:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea8:	03ff      	lsls	r7, r7, #15
 8000eaa:	d401      	bmi.n	8000eb0 <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8000eac:	4015      	ands	r5, r2
 8000eae:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8000eb0:	67e6      	str	r6, [r4, #124]	@ 0x7c
    position++;
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	e759      	b.n	8000d6a <HAL_GPIO_Init+0x6>
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000800 	.word	0x50000800
 8000ec4:	50000c00 	.word	0x50000c00
 8000ec8:	affff000 	.word	0xaffff000
 8000ecc:	40021808 	.word	0x40021808
 8000ed0:	40021804 	.word	0x40021804

08000ed4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ed4:	6900      	ldr	r0, [r0, #16]
 8000ed6:	4008      	ands	r0, r1
 8000ed8:	1e43      	subs	r3, r0, #1
 8000eda:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000edc:	b2c0      	uxtb	r0, r0
}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000eea:	e7fc      	b.n	8000ee6 <HAL_GPIO_WritePin+0x6>

08000eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eec:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000eee:	4d08      	ldr	r5, [pc, #32]	@ (8000f10 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8000ef0:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000ef2:	68eb      	ldr	r3, [r5, #12]
 8000ef4:	4218      	tst	r0, r3
 8000ef6:	d002      	beq.n	8000efe <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ef8:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000efa:	f7ff fd51 	bl	80009a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000efe:	692b      	ldr	r3, [r5, #16]
 8000f00:	4223      	tst	r3, r4
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f04:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000f06:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f08:	f7ff fd50 	bl	80009ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40021800 	.word	0x40021800

08000f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f14:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f16:	4c11      	ldr	r4, [pc, #68]	@ (8000f5c <HAL_PWREx_ControlVoltageScaling+0x48>)
 8000f18:	4911      	ldr	r1, [pc, #68]	@ (8000f60 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8000f1a:	6823      	ldr	r3, [r4, #0]
{
 8000f1c:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f1e:	400b      	ands	r3, r1
 8000f20:	4303      	orrs	r3, r0
 8000f22:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f24:	2380      	movs	r3, #128	@ 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d10e      	bne.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000f30:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	2306      	movs	r3, #6
 8000f36:	4358      	muls	r0, r3
 8000f38:	f7ff f914 	bl	8000164 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f3c:	2280      	movs	r2, #128	@ 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f3e:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f40:	00d2      	lsls	r2, r2, #3
 8000f42:	6961      	ldr	r1, [r4, #20]
 8000f44:	0008      	movs	r0, r1
 8000f46:	4010      	ands	r0, r2
 8000f48:	4211      	tst	r1, r2
 8000f4a:	d100      	bne.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8000f4c:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8000f52:	3b01      	subs	r3, #1
 8000f54:	e7f5      	b.n	8000f42 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8000f56:	2003      	movs	r0, #3
 8000f58:	e7f8      	b.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x38>
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	40007000 	.word	0x40007000
 8000f60:	fffff9ff 	.word	0xfffff9ff
 8000f64:	20000000 	.word	0x20000000
 8000f68:	000f4240 	.word	0x000f4240

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	0004      	movs	r4, r0
 8000f70:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8000f78:	b005      	add	sp, #20
 8000f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7c:	6803      	ldr	r3, [r0, #0]
 8000f7e:	07db      	lsls	r3, r3, #31
 8000f80:	d414      	bmi.n	8000fac <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	079b      	lsls	r3, r3, #30
 8000f86:	d460      	bmi.n	800104a <HAL_RCC_OscConfig+0xde>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	071b      	lsls	r3, r3, #28
 8000f8c:	d500      	bpl.n	8000f90 <HAL_RCC_OscConfig+0x24>
 8000f8e:	e0c5      	b.n	800111c <HAL_RCC_OscConfig+0x1b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	075b      	lsls	r3, r3, #29
 8000f94:	d500      	bpl.n	8000f98 <HAL_RCC_OscConfig+0x2c>
 8000f96:	e0f6      	b.n	8001186 <HAL_RCC_OscConfig+0x21a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	069b      	lsls	r3, r3, #26
 8000f9c:	d500      	bpl.n	8000fa0 <HAL_RCC_OscConfig+0x34>
 8000f9e:	e164      	b.n	800126a <HAL_RCC_OscConfig+0x2fe>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fa0:	6a23      	ldr	r3, [r4, #32]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d000      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x3c>
 8000fa6:	e1a5      	b.n	80012f4 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8000fa8:	2000      	movs	r0, #0
 8000faa:	e7e5      	b.n	8000f78 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fac:	2238      	movs	r2, #56	@ 0x38
 8000fae:	4dc4      	ldr	r5, [pc, #784]	@ (80012c0 <HAL_RCC_OscConfig+0x354>)
 8000fb0:	68ab      	ldr	r3, [r5, #8]
 8000fb2:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb4:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000fb6:	2b10      	cmp	r3, #16
 8000fb8:	d109      	bne.n	8000fce <HAL_RCC_OscConfig+0x62>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fba:	43d3      	mvns	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000fbc:	079b      	lsls	r3, r3, #30
 8000fbe:	d108      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x66>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	039b      	lsls	r3, r3, #14
 8000fc4:	d5dd      	bpl.n	8000f82 <HAL_RCC_OscConfig+0x16>
 8000fc6:	6863      	ldr	r3, [r4, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1da      	bne.n	8000f82 <HAL_RCC_OscConfig+0x16>
 8000fcc:	e7d3      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d0f6      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x54>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	6863      	ldr	r3, [r4, #4]
 8000fd6:	0252      	lsls	r2, r2, #9
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d111      	bne.n	8001000 <HAL_RCC_OscConfig+0x94>
 8000fdc:	682a      	ldr	r2, [r5, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fe4b 	bl	8000c7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe6:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000fe8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fea:	02bf      	lsls	r7, r7, #10
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	423b      	tst	r3, r7
 8000ff0:	d1c7      	bne.n	8000f82 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fe43 	bl	8000c7c <HAL_GetTick>
 8000ff6:	1b80      	subs	r0, r0, r6
 8000ff8:	2864      	cmp	r0, #100	@ 0x64
 8000ffa:	d9f7      	bls.n	8000fec <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	e7bb      	b.n	8000f78 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001000:	21a0      	movs	r1, #160	@ 0xa0
 8001002:	02c9      	lsls	r1, r1, #11
 8001004:	428b      	cmp	r3, r1
 8001006:	d108      	bne.n	800101a <HAL_RCC_OscConfig+0xae>
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	6829      	ldr	r1, [r5, #0]
 800100c:	02db      	lsls	r3, r3, #11
 800100e:	430b      	orrs	r3, r1
 8001010:	602b      	str	r3, [r5, #0]
 8001012:	682b      	ldr	r3, [r5, #0]
 8001014:	431a      	orrs	r2, r3
 8001016:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001018:	e7e3      	b.n	8000fe2 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101a:	682a      	ldr	r2, [r5, #0]
 800101c:	49a9      	ldr	r1, [pc, #676]	@ (80012c4 <HAL_RCC_OscConfig+0x358>)
 800101e:	400a      	ands	r2, r1
 8001020:	602a      	str	r2, [r5, #0]
 8001022:	682a      	ldr	r2, [r5, #0]
 8001024:	49a8      	ldr	r1, [pc, #672]	@ (80012c8 <HAL_RCC_OscConfig+0x35c>)
 8001026:	400a      	ands	r2, r1
 8001028:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1d9      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800102e:	f7ff fe25 	bl	8000c7c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001032:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001034:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	02bf      	lsls	r7, r7, #10
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	423b      	tst	r3, r7
 800103c:	d0a1      	beq.n	8000f82 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103e:	f7ff fe1d 	bl	8000c7c <HAL_GetTick>
 8001042:	1b80      	subs	r0, r0, r6
 8001044:	2864      	cmp	r0, #100	@ 0x64
 8001046:	d9f7      	bls.n	8001038 <HAL_RCC_OscConfig+0xcc>
 8001048:	e7d8      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104a:	2238      	movs	r2, #56	@ 0x38
 800104c:	4d9c      	ldr	r5, [pc, #624]	@ (80012c0 <HAL_RCC_OscConfig+0x354>)
 800104e:	68ab      	ldr	r3, [r5, #8]
 8001050:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001052:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001054:	2b10      	cmp	r3, #16
 8001056:	d128      	bne.n	80010aa <HAL_RCC_OscConfig+0x13e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001058:	2103      	movs	r1, #3
 800105a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800105c:	2a02      	cmp	r2, #2
 800105e:	d126      	bne.n	80010ae <HAL_RCC_OscConfig+0x142>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001060:	682a      	ldr	r2, [r5, #0]
 8001062:	0552      	lsls	r2, r2, #21
 8001064:	d503      	bpl.n	800106e <HAL_RCC_OscConfig+0x102>
 8001066:	68e2      	ldr	r2, [r4, #12]
 8001068:	2a00      	cmp	r2, #0
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x102>
 800106c:	e783      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	6869      	ldr	r1, [r5, #4]
 8001070:	6962      	ldr	r2, [r4, #20]
 8001072:	4896      	ldr	r0, [pc, #600]	@ (80012cc <HAL_RCC_OscConfig+0x360>)
 8001074:	0212      	lsls	r2, r2, #8
 8001076:	4001      	ands	r1, r0
 8001078:	430a      	orrs	r2, r1
 800107a:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0x12e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	4a93      	ldr	r2, [pc, #588]	@ (80012d0 <HAL_RCC_OscConfig+0x364>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001084:	4993      	ldr	r1, [pc, #588]	@ (80012d4 <HAL_RCC_OscConfig+0x368>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001086:	4013      	ands	r3, r2
 8001088:	6922      	ldr	r2, [r4, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	4a91      	ldr	r2, [pc, #580]	@ (80012d8 <HAL_RCC_OscConfig+0x36c>)
 8001092:	049b      	lsls	r3, r3, #18
 8001094:	0f5b      	lsrs	r3, r3, #29
 8001096:	40da      	lsrs	r2, r3
 8001098:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800109a:	4b90      	ldr	r3, [pc, #576]	@ (80012dc <HAL_RCC_OscConfig+0x370>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f7ff fda5 	bl	8000bec <HAL_InitTick>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d100      	bne.n	80010a8 <HAL_RCC_OscConfig+0x13c>
 80010a6:	e76f      	b.n	8000f88 <HAL_RCC_OscConfig+0x1c>
 80010a8:	e765      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0d8      	beq.n	8001060 <HAL_RCC_OscConfig+0xf4>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ae:	68e3      	ldr	r3, [r4, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	4a86      	ldr	r2, [pc, #536]	@ (80012d0 <HAL_RCC_OscConfig+0x364>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010ba:	4013      	ands	r3, r2
 80010bc:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010be:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010c0:	4313      	orrs	r3, r2
 80010c2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	682a      	ldr	r2, [r5, #0]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4313      	orrs	r3, r2
 80010cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010ce:	f7ff fdd5 	bl	8000c7c <HAL_GetTick>
 80010d2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	423b      	tst	r3, r7
 80010d8:	d007      	beq.n	80010ea <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	686a      	ldr	r2, [r5, #4]
 80010dc:	6963      	ldr	r3, [r4, #20]
 80010de:	497b      	ldr	r1, [pc, #492]	@ (80012cc <HAL_RCC_OscConfig+0x360>)
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	400a      	ands	r2, r1
 80010e4:	4313      	orrs	r3, r2
 80010e6:	606b      	str	r3, [r5, #4]
 80010e8:	e74e      	b.n	8000f88 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fdc7 	bl	8000c7c <HAL_GetTick>
 80010ee:	1b80      	subs	r0, r0, r6
 80010f0:	2802      	cmp	r0, #2
 80010f2:	d9ef      	bls.n	80010d4 <HAL_RCC_OscConfig+0x168>
 80010f4:	e782      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	4a79      	ldr	r2, [pc, #484]	@ (80012e0 <HAL_RCC_OscConfig+0x374>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fa:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80010fc:	4013      	ands	r3, r2
 80010fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001100:	f7ff fdbc 	bl	8000c7c <HAL_GetTick>
 8001104:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001106:	00ff      	lsls	r7, r7, #3
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	423b      	tst	r3, r7
 800110c:	d100      	bne.n	8001110 <HAL_RCC_OscConfig+0x1a4>
 800110e:	e73b      	b.n	8000f88 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fdb4 	bl	8000c7c <HAL_GetTick>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	2802      	cmp	r0, #2
 8001118:	d9f6      	bls.n	8001108 <HAL_RCC_OscConfig+0x19c>
 800111a:	e76f      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800111c:	2238      	movs	r2, #56	@ 0x38
 800111e:	4d68      	ldr	r5, [pc, #416]	@ (80012c0 <HAL_RCC_OscConfig+0x354>)
 8001120:	68ab      	ldr	r3, [r5, #8]
 8001122:	4013      	ands	r3, r2
 8001124:	2b18      	cmp	r3, #24
 8001126:	d108      	bne.n	800113a <HAL_RCC_OscConfig+0x1ce>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001128:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800112a:	079b      	lsls	r3, r3, #30
 800112c:	d400      	bmi.n	8001130 <HAL_RCC_OscConfig+0x1c4>
 800112e:	e72f      	b.n	8000f90 <HAL_RCC_OscConfig+0x24>
 8001130:	69a3      	ldr	r3, [r4, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <HAL_RCC_OscConfig+0x1cc>
 8001136:	e72b      	b.n	8000f90 <HAL_RCC_OscConfig+0x24>
 8001138:	e71d      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113a:	69a2      	ldr	r2, [r4, #24]
 800113c:	2301      	movs	r3, #1
 800113e:	2a00      	cmp	r2, #0
 8001140:	d010      	beq.n	8001164 <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_LSI_ENABLE();
 8001142:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001144:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001146:	4313      	orrs	r3, r2
 8001148:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800114a:	f7ff fd97 	bl	8000c7c <HAL_GetTick>
 800114e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001150:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001152:	423b      	tst	r3, r7
 8001154:	d000      	beq.n	8001158 <HAL_RCC_OscConfig+0x1ec>
 8001156:	e71b      	b.n	8000f90 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fd90 	bl	8000c7c <HAL_GetTick>
 800115c:	1b80      	subs	r0, r0, r6
 800115e:	2802      	cmp	r0, #2
 8001160:	d9f6      	bls.n	8001150 <HAL_RCC_OscConfig+0x1e4>
 8001162:	e74b      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_LSI_DISABLE();
 8001164:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001166:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001168:	439a      	bics	r2, r3
 800116a:	662a      	str	r2, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800116c:	f7ff fd86 	bl	8000c7c <HAL_GetTick>
 8001170:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001172:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001174:	423b      	tst	r3, r7
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x20e>
 8001178:	e70a      	b.n	8000f90 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fd7f 	bl	8000c7c <HAL_GetTick>
 800117e:	1b80      	subs	r0, r0, r6
 8001180:	2802      	cmp	r0, #2
 8001182:	d9f6      	bls.n	8001172 <HAL_RCC_OscConfig+0x206>
 8001184:	e73a      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001186:	2238      	movs	r2, #56	@ 0x38
 8001188:	4d4d      	ldr	r5, [pc, #308]	@ (80012c0 <HAL_RCC_OscConfig+0x354>)
 800118a:	68ab      	ldr	r3, [r5, #8]
 800118c:	4013      	ands	r3, r2
 800118e:	2b20      	cmp	r3, #32
 8001190:	d108      	bne.n	80011a4 <HAL_RCC_OscConfig+0x238>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001192:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001194:	079b      	lsls	r3, r3, #30
 8001196:	d400      	bmi.n	800119a <HAL_RCC_OscConfig+0x22e>
 8001198:	e6fe      	b.n	8000f98 <HAL_RCC_OscConfig+0x2c>
 800119a:	68a3      	ldr	r3, [r4, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d000      	beq.n	80011a2 <HAL_RCC_OscConfig+0x236>
 80011a0:	e6fa      	b.n	8000f98 <HAL_RCC_OscConfig+0x2c>
 80011a2:	e6e8      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011a4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011a8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80011aa:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80011ac:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011ae:	4213      	tst	r3, r2
 80011b0:	d108      	bne.n	80011c4 <HAL_RCC_OscConfig+0x258>
        __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80011b4:	4313      	orrs	r3, r2
 80011b6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80011b8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80011ba:	4013      	ands	r3, r2
 80011bc:	9303      	str	r3, [sp, #12]
 80011be:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80011c0:	2301      	movs	r3, #1
 80011c2:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c4:	2780      	movs	r7, #128	@ 0x80
 80011c6:	4e47      	ldr	r6, [pc, #284]	@ (80012e4 <HAL_RCC_OscConfig+0x378>)
 80011c8:	007f      	lsls	r7, r7, #1
 80011ca:	6833      	ldr	r3, [r6, #0]
 80011cc:	423b      	tst	r3, r7
 80011ce:	d015      	beq.n	80011fc <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d0:	68a3      	ldr	r3, [r4, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d122      	bne.n	800121c <HAL_RCC_OscConfig+0x2b0>
 80011d6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80011d8:	4313      	orrs	r3, r2
 80011da:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd4e 	bl	8000c7c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e0:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80011e2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e4:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80011e6:	423b      	tst	r3, r7
 80011e8:	d038      	beq.n	800125c <HAL_RCC_OscConfig+0x2f0>
      if (pwrclkchanged == SET)
 80011ea:	9b00      	ldr	r3, [sp, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d000      	beq.n	80011f2 <HAL_RCC_OscConfig+0x286>
 80011f0:	e6d2      	b.n	8000f98 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80011f2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80011f4:	4a3c      	ldr	r2, [pc, #240]	@ (80012e8 <HAL_RCC_OscConfig+0x37c>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80011fa:	e6cd      	b.n	8000f98 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011fc:	6833      	ldr	r3, [r6, #0]
 80011fe:	433b      	orrs	r3, r7
 8001200:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001202:	f7ff fd3b 	bl	8000c7c <HAL_GetTick>
 8001206:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	423b      	tst	r3, r7
 800120c:	d1e0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x264>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fd35 	bl	8000c7c <HAL_GetTick>
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	2802      	cmp	r0, #2
 8001218:	d9f6      	bls.n	8001208 <HAL_RCC_OscConfig+0x29c>
 800121a:	e6ef      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800121e:	2b05      	cmp	r3, #5
 8001220:	d105      	bne.n	800122e <HAL_RCC_OscConfig+0x2c2>
 8001222:	3b01      	subs	r3, #1
 8001224:	4313      	orrs	r3, r2
 8001226:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8001228:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800122a:	2301      	movs	r3, #1
 800122c:	e7d4      	b.n	80011d8 <HAL_RCC_OscConfig+0x26c>
 800122e:	2101      	movs	r1, #1
 8001230:	438a      	bics	r2, r1
 8001232:	65ea      	str	r2, [r5, #92]	@ 0x5c
 8001234:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001236:	3103      	adds	r1, #3
 8001238:	438a      	bics	r2, r1
 800123a:	65ea      	str	r2, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1cd      	bne.n	80011dc <HAL_RCC_OscConfig+0x270>
        tickstart = HAL_GetTick();
 8001240:	f7ff fd1c 	bl	8000c7c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001244:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001246:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001248:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800124a:	423b      	tst	r3, r7
 800124c:	d0cd      	beq.n	80011ea <HAL_RCC_OscConfig+0x27e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fd15 	bl	8000c7c <HAL_GetTick>
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <HAL_RCC_OscConfig+0x380>)
 8001254:	1b80      	subs	r0, r0, r6
 8001256:	4298      	cmp	r0, r3
 8001258:	d9f6      	bls.n	8001248 <HAL_RCC_OscConfig+0x2dc>
 800125a:	e6cf      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f7ff fd0e 	bl	8000c7c <HAL_GetTick>
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_RCC_OscConfig+0x380>)
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	4298      	cmp	r0, r3
 8001266:	d9bd      	bls.n	80011e4 <HAL_RCC_OscConfig+0x278>
 8001268:	e6c8      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800126a:	69e3      	ldr	r3, [r4, #28]
 800126c:	4d14      	ldr	r5, [pc, #80]	@ (80012c0 <HAL_RCC_OscConfig+0x354>)
 800126e:	2b00      	cmp	r3, #0
 8001270:	d013      	beq.n	800129a <HAL_RCC_OscConfig+0x32e>
      __HAL_RCC_HSI48_ENABLE();
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	682a      	ldr	r2, [r5, #0]
 8001276:	03db      	lsls	r3, r3, #15
 8001278:	4313      	orrs	r3, r2
 800127a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800127c:	f7ff fcfe 	bl	8000c7c <HAL_GetTick>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001280:	2780      	movs	r7, #128	@ 0x80
      tickstart = HAL_GetTick();
 8001282:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001284:	043f      	lsls	r7, r7, #16
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	423b      	tst	r3, r7
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x322>
 800128c:	e688      	b.n	8000fa0 <HAL_RCC_OscConfig+0x34>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800128e:	f7ff fcf5 	bl	8000c7c <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	2802      	cmp	r0, #2
 8001296:	d9f6      	bls.n	8001286 <HAL_RCC_OscConfig+0x31a>
 8001298:	e6b0      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSI48_DISABLE();
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_RCC_OscConfig+0x384>)
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800129e:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSI48_DISABLE();
 80012a0:	4013      	ands	r3, r2
 80012a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012a4:	f7ff fcea 	bl	8000c7c <HAL_GetTick>
 80012a8:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80012aa:	043f      	lsls	r7, r7, #16
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	423b      	tst	r3, r7
 80012b0:	d100      	bne.n	80012b4 <HAL_RCC_OscConfig+0x348>
 80012b2:	e675      	b.n	8000fa0 <HAL_RCC_OscConfig+0x34>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b4:	f7ff fce2 	bl	8000c7c <HAL_GetTick>
 80012b8:	1b80      	subs	r0, r0, r6
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f6      	bls.n	80012ac <HAL_RCC_OscConfig+0x340>
 80012be:	e69d      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	fffeffff 	.word	0xfffeffff
 80012c8:	fffbffff 	.word	0xfffbffff
 80012cc:	ffff80ff 	.word	0xffff80ff
 80012d0:	ffffc7ff 	.word	0xffffc7ff
 80012d4:	20000000 	.word	0x20000000
 80012d8:	00f42400 	.word	0x00f42400
 80012dc:	20000008 	.word	0x20000008
 80012e0:	fffffeff 	.word	0xfffffeff
 80012e4:	40007000 	.word	0x40007000
 80012e8:	efffffff 	.word	0xefffffff
 80012ec:	00001388 	.word	0x00001388
 80012f0:	ffbfffff 	.word	0xffbfffff
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f4:	2138      	movs	r1, #56	@ 0x38
 80012f6:	4d43      	ldr	r5, [pc, #268]	@ (8001404 <HAL_RCC_OscConfig+0x498>)
 80012f8:	68aa      	ldr	r2, [r5, #8]
 80012fa:	400a      	ands	r2, r1
 80012fc:	2a10      	cmp	r2, #16
 80012fe:	d053      	beq.n	80013a8 <HAL_RCC_OscConfig+0x43c>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001300:	4a41      	ldr	r2, [pc, #260]	@ (8001408 <HAL_RCC_OscConfig+0x49c>)
 8001302:	2b02      	cmp	r3, #2
 8001304:	d13a      	bne.n	800137c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_PLL_DISABLE();
 8001306:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001308:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800130a:	4013      	ands	r3, r2
 800130c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800130e:	f7ff fcb5 	bl	8000c7c <HAL_GetTick>
 8001312:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001314:	04bf      	lsls	r7, r7, #18
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	423b      	tst	r3, r7
 800131a:	d129      	bne.n	8001370 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800131e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001320:	68ea      	ldr	r2, [r5, #12]
 8001322:	430b      	orrs	r3, r1
 8001324:	4939      	ldr	r1, [pc, #228]	@ (800140c <HAL_RCC_OscConfig+0x4a0>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001326:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	400a      	ands	r2, r1
 800132a:	4313      	orrs	r3, r2
 800132c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4313      	orrs	r3, r2
 8001332:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001334:	4313      	orrs	r3, r2
 8001336:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001338:	4313      	orrs	r3, r2
 800133a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800133c:	0212      	lsls	r2, r2, #8
 800133e:	4313      	orrs	r3, r2
 8001340:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	682a      	ldr	r2, [r5, #0]
 8001346:	045b      	lsls	r3, r3, #17
 8001348:	4313      	orrs	r3, r2
 800134a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	68ea      	ldr	r2, [r5, #12]
 8001350:	055b      	lsls	r3, r3, #21
 8001352:	4313      	orrs	r3, r2
 8001354:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001356:	f7ff fc91 	bl	8000c7c <HAL_GetTick>
 800135a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	4233      	tst	r3, r6
 8001360:	d000      	beq.n	8001364 <HAL_RCC_OscConfig+0x3f8>
 8001362:	e621      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fc8a 	bl	8000c7c <HAL_GetTick>
 8001368:	1b00      	subs	r0, r0, r4
 800136a:	2802      	cmp	r0, #2
 800136c:	d9f6      	bls.n	800135c <HAL_RCC_OscConfig+0x3f0>
 800136e:	e645      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fc84 	bl	8000c7c <HAL_GetTick>
 8001374:	1b80      	subs	r0, r0, r6
 8001376:	2802      	cmp	r0, #2
 8001378:	d9cd      	bls.n	8001316 <HAL_RCC_OscConfig+0x3aa>
 800137a:	e63f      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL_DISABLE();
 800137c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001380:	4013      	ands	r3, r2
 8001382:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001384:	f7ff fc7a 	bl	8000c7c <HAL_GetTick>
 8001388:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800138a:	04b6      	lsls	r6, r6, #18
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	4233      	tst	r3, r6
 8001390:	d104      	bne.n	800139c <HAL_RCC_OscConfig+0x430>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001392:	68eb      	ldr	r3, [r5, #12]
 8001394:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <HAL_RCC_OscConfig+0x4a4>)
 8001396:	4013      	ands	r3, r2
 8001398:	60eb      	str	r3, [r5, #12]
 800139a:	e605      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fc6e 	bl	8000c7c <HAL_GetTick>
 80013a0:	1b00      	subs	r0, r0, r4
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9f2      	bls.n	800138c <HAL_RCC_OscConfig+0x420>
 80013a6:	e629      	b.n	8000ffc <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d100      	bne.n	80013ae <HAL_RCC_OscConfig+0x442>
 80013ac:	e5e3      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80013b0:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80013b4:	4002      	ands	r2, r0
 80013b6:	428a      	cmp	r2, r1
 80013b8:	d000      	beq.n	80013bc <HAL_RCC_OscConfig+0x450>
 80013ba:	e5dc      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013bc:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013c0:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d000      	beq.n	80013c8 <HAL_RCC_OscConfig+0x45c>
 80013c6:	e5d6      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013c8:	21fe      	movs	r1, #254	@ 0xfe
 80013ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80013cc:	01c9      	lsls	r1, r1, #7
 80013ce:	4001      	ands	r1, r0
 80013d0:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d2:	4291      	cmp	r1, r2
 80013d4:	d000      	beq.n	80013d8 <HAL_RCC_OscConfig+0x46c>
 80013d6:	e5ce      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013d8:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013dc:	0392      	lsls	r2, r2, #14
 80013de:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013e0:	428a      	cmp	r2, r1
 80013e2:	d000      	beq.n	80013e6 <HAL_RCC_OscConfig+0x47a>
 80013e4:	e5c7      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80013e6:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80013ea:	0512      	lsls	r2, r2, #20
 80013ec:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013ee:	428a      	cmp	r2, r1
 80013f0:	d000      	beq.n	80013f4 <HAL_RCC_OscConfig+0x488>
 80013f2:	e5c0      	b.n	8000f76 <HAL_RCC_OscConfig+0xa>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80013f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80013f6:	0f40      	lsrs	r0, r0, #29
 80013f8:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	1e43      	subs	r3, r0, #1
 80013fe:	4198      	sbcs	r0, r3
 8001400:	b2c0      	uxtb	r0, r0
 8001402:	e5b9      	b.n	8000f78 <HAL_RCC_OscConfig+0xc>
 8001404:	40021000 	.word	0x40021000
 8001408:	feffffff 	.word	0xfeffffff
 800140c:	11c1808c 	.word	0x11c1808c
 8001410:	eefefffc 	.word	0xeefefffc

08001414 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001414:	2338      	movs	r3, #56	@ 0x38
{
 8001416:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001418:	4c1d      	ldr	r4, [pc, #116]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x7c>)
 800141a:	68a2      	ldr	r2, [r4, #8]
 800141c:	421a      	tst	r2, r3
 800141e:	d105      	bne.n	800142c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001420:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001422:	481c      	ldr	r0, [pc, #112]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001428:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800142a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800142c:	68a2      	ldr	r2, [r4, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	2a08      	cmp	r2, #8
 8001432:	d027      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001434:	68a2      	ldr	r2, [r4, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	2a10      	cmp	r2, #16
 800143a:	d117      	bne.n	800146c <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800143c:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800143e:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001440:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001442:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001444:	0649      	lsls	r1, r1, #25
 8001446:	0f49      	lsrs	r1, r1, #29
 8001448:	326f      	adds	r2, #111	@ 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800144a:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800144c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800144e:	4015      	ands	r5, r2
    switch (pllsource)
 8001450:	079b      	lsls	r3, r3, #30
 8001452:	d109      	bne.n	8001468 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001454:	4810      	ldr	r0, [pc, #64]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001456:	f7fe fe85 	bl	8000164 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800145a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800145c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800145e:	0f49      	lsrs	r1, r1, #29
 8001460:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001462:	f7fe fe7f 	bl	8000164 <__udivsi3>
 8001466:	e7e0      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001468:	480a      	ldr	r0, [pc, #40]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x80>)
 800146a:	e7f4      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800146c:	68a2      	ldr	r2, [r4, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	2a20      	cmp	r2, #32
 8001472:	d009      	beq.n	8001488 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001474:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 8001476:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001478:	4013      	ands	r3, r2
 800147a:	2b18      	cmp	r3, #24
 800147c:	d1d5      	bne.n	800142a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 800147e:	20fa      	movs	r0, #250	@ 0xfa
 8001480:	01c0      	lsls	r0, r0, #7
 8001482:	e7d2      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x84>)
 8001486:	e7d0      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8001488:	2080      	movs	r0, #128	@ 0x80
 800148a:	0200      	lsls	r0, r0, #8
 800148c:	e7cd      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x16>
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	40021000 	.word	0x40021000
 8001494:	00f42400 	.word	0x00f42400
 8001498:	007a1200 	.word	0x007a1200

0800149c <HAL_RCC_ClockConfig>:
{
 800149c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800149e:	0004      	movs	r4, r0
 80014a0:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
}
 80014a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014aa:	2707      	movs	r7, #7
 80014ac:	4e48      	ldr	r6, [pc, #288]	@ (80015d0 <HAL_RCC_ClockConfig+0x134>)
 80014ae:	6833      	ldr	r3, [r6, #0]
 80014b0:	403b      	ands	r3, r7
 80014b2:	428b      	cmp	r3, r1
 80014b4:	d32a      	bcc.n	800150c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	0793      	lsls	r3, r2, #30
 80014ba:	d43b      	bmi.n	8001534 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014bc:	07d2      	lsls	r2, r2, #31
 80014be:	d448      	bmi.n	8001552 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	2707      	movs	r7, #7
 80014c2:	6833      	ldr	r3, [r6, #0]
 80014c4:	403b      	ands	r3, r7
 80014c6:	42ab      	cmp	r3, r5
 80014c8:	d90a      	bls.n	80014e0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	6833      	ldr	r3, [r6, #0]
 80014cc:	43bb      	bics	r3, r7
 80014ce:	432b      	orrs	r3, r5
 80014d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80014d2:	f7ff fbd3 	bl	8000c7c <HAL_GetTick>
 80014d6:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d8:	6833      	ldr	r3, [r6, #0]
 80014da:	403b      	ands	r3, r7
 80014dc:	42ab      	cmp	r3, r5
 80014de:	d168      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	4d3c      	ldr	r5, [pc, #240]	@ (80015d4 <HAL_RCC_ClockConfig+0x138>)
 80014e4:	075b      	lsls	r3, r3, #29
 80014e6:	d46c      	bmi.n	80015c2 <HAL_RCC_ClockConfig+0x126>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014e8:	f7ff ff94 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80014ec:	68ab      	ldr	r3, [r5, #8]
 80014ee:	493a      	ldr	r1, [pc, #232]	@ (80015d8 <HAL_RCC_ClockConfig+0x13c>)
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	0f1b      	lsrs	r3, r3, #28
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	585b      	ldr	r3, [r3, r1]
 80014f8:	211f      	movs	r1, #31
 80014fa:	400b      	ands	r3, r1
 80014fc:	40d8      	lsrs	r0, r3
 80014fe:	4a37      	ldr	r2, [pc, #220]	@ (80015dc <HAL_RCC_ClockConfig+0x140>)
  return HAL_InitTick(uwTickPrio);
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <HAL_RCC_ClockConfig+0x144>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001502:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f7ff fb71 	bl	8000bec <HAL_InitTick>
 800150a:	e7cd      	b.n	80014a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150c:	6833      	ldr	r3, [r6, #0]
 800150e:	43bb      	bics	r3, r7
 8001510:	430b      	orrs	r3, r1
 8001512:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001514:	f7ff fbb2 	bl	8000c7c <HAL_GetTick>
 8001518:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800151a:	6833      	ldr	r3, [r6, #0]
 800151c:	403b      	ands	r3, r7
 800151e:	42ab      	cmp	r3, r5
 8001520:	d0c9      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001522:	f7ff fbab 	bl	8000c7c <HAL_GetTick>
 8001526:	9b01      	ldr	r3, [sp, #4]
 8001528:	1ac0      	subs	r0, r0, r3
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_RCC_ClockConfig+0x148>)
 800152c:	4298      	cmp	r0, r3
 800152e:	d9f4      	bls.n	800151a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001530:	2003      	movs	r0, #3
 8001532:	e7b9      	b.n	80014a8 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	4927      	ldr	r1, [pc, #156]	@ (80015d4 <HAL_RCC_ClockConfig+0x138>)
 8001536:	0753      	lsls	r3, r2, #29
 8001538:	d504      	bpl.n	8001544 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	6888      	ldr	r0, [r1, #8]
 800153e:	01db      	lsls	r3, r3, #7
 8001540:	4303      	orrs	r3, r0
 8001542:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001544:	688b      	ldr	r3, [r1, #8]
 8001546:	4828      	ldr	r0, [pc, #160]	@ (80015e8 <HAL_RCC_ClockConfig+0x14c>)
 8001548:	4003      	ands	r3, r0
 800154a:	68a0      	ldr	r0, [r4, #8]
 800154c:	4303      	orrs	r3, r0
 800154e:	608b      	str	r3, [r1, #8]
 8001550:	e7b4      	b.n	80014bc <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	6860      	ldr	r0, [r4, #4]
 8001554:	4f1f      	ldr	r7, [pc, #124]	@ (80015d4 <HAL_RCC_ClockConfig+0x138>)
 8001556:	2803      	cmp	r0, #3
 8001558:	d829      	bhi.n	80015ae <HAL_RCC_ClockConfig+0x112>
 800155a:	f7fe fdef 	bl	800013c <__gnu_thumb1_case_uqi>
 800155e:	0220      	.short	0x0220
 8001560:	241c      	.short	0x241c
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	039b      	lsls	r3, r3, #14
 8001566:	d59e      	bpl.n	80014a6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001568:	2207      	movs	r2, #7
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4393      	bics	r3, r2
 800156e:	4303      	orrs	r3, r0
 8001570:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001572:	f7ff fb83 	bl	8000c7c <HAL_GetTick>
 8001576:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001578:	2338      	movs	r3, #56	@ 0x38
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	401a      	ands	r2, r3
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	429a      	cmp	r2, r3
 8001584:	d09c      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001586:	f7ff fb79 	bl	8000c7c <HAL_GetTick>
 800158a:	9b01      	ldr	r3, [sp, #4]
 800158c:	1ac0      	subs	r0, r0, r3
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_RCC_ClockConfig+0x148>)
 8001590:	4298      	cmp	r0, r3
 8001592:	d9f1      	bls.n	8001578 <HAL_RCC_ClockConfig+0xdc>
 8001594:	e7cc      	b.n	8001530 <HAL_RCC_ClockConfig+0x94>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	d4e5      	bmi.n	8001568 <HAL_RCC_ClockConfig+0xcc>
 800159c:	e783      	b.n	80014a6 <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	055b      	lsls	r3, r3, #21
 80015a2:	d4e1      	bmi.n	8001568 <HAL_RCC_ClockConfig+0xcc>
 80015a4:	e77f      	b.n	80014a6 <HAL_RCC_ClockConfig+0xa>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a8:	079b      	lsls	r3, r3, #30
 80015aa:	d4dd      	bmi.n	8001568 <HAL_RCC_ClockConfig+0xcc>
 80015ac:	e77b      	b.n	80014a6 <HAL_RCC_ClockConfig+0xa>
 80015ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b0:	e7fa      	b.n	80015a8 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b2:	f7ff fb63 	bl	8000c7c <HAL_GetTick>
 80015b6:	9b01      	ldr	r3, [sp, #4]
 80015b8:	1ac0      	subs	r0, r0, r3
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_RCC_ClockConfig+0x148>)
 80015bc:	4298      	cmp	r0, r3
 80015be:	d98b      	bls.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
 80015c0:	e7b6      	b.n	8001530 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015c2:	68ab      	ldr	r3, [r5, #8]
 80015c4:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_RCC_ClockConfig+0x150>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	68e2      	ldr	r2, [r4, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60ab      	str	r3, [r5, #8]
 80015ce:	e78b      	b.n	80014e8 <HAL_RCC_ClockConfig+0x4c>
 80015d0:	40022000 	.word	0x40022000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08003fcc 	.word	0x08003fcc
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	00001388 	.word	0x00001388
 80015e8:	fffff0ff 	.word	0xfffff0ff
 80015ec:	ffff8fff 	.word	0xffff8fff

080015f0 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80015f2:	4907      	ldr	r1, [pc, #28]	@ (8001610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80015f6:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80015f8:	045b      	lsls	r3, r3, #17
 80015fa:	0f5b      	lsrs	r3, r3, #29
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	585b      	ldr	r3, [r3, r1]
 8001600:	211f      	movs	r1, #31
 8001602:	6810      	ldr	r0, [r2, #0]
 8001604:	400b      	ands	r3, r1
 8001606:	40d8      	lsrs	r0, r3
}
 8001608:	4770      	bx	lr
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	40021000 	.word	0x40021000
 8001610:	08003fac 	.word	0x08003fac
 8001614:	20000000 	.word	0x20000000

08001618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800161a:	6803      	ldr	r3, [r0, #0]
{
 800161c:	0004      	movs	r4, r0
 800161e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001620:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001622:	039b      	lsls	r3, r3, #14
 8001624:	d552      	bpl.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	4d97      	ldr	r5, [pc, #604]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800162e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001630:	4213      	tst	r3, r2
 8001632:	d108      	bne.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001636:	4313      	orrs	r3, r2
 8001638:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800163a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800163c:	4013      	ands	r3, r2
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001646:	2780      	movs	r7, #128	@ 0x80
 8001648:	4e90      	ldr	r6, [pc, #576]	@ (800188c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800164a:	007f      	lsls	r7, r7, #1
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	433b      	orrs	r3, r7
 8001650:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001652:	f7ff fb13 	bl	8000c7c <HAL_GetTick>
 8001656:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001658:	6833      	ldr	r3, [r6, #0]
 800165a:	423b      	tst	r3, r7
 800165c:	d028      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800165e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001660:	23c0      	movs	r3, #192	@ 0xc0
 8001662:	0010      	movs	r0, r2
 8001664:	009b      	lsls	r3, r3, #2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001666:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001668:	4e89      	ldr	r6, [pc, #548]	@ (8001890 <HAL_RCCEx_PeriphCLKConfig+0x278>)
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800166a:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800166c:	421a      	tst	r2, r3
 800166e:	d018      	beq.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001670:	4281      	cmp	r1, r0
 8001672:	d016      	beq.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001674:	2280      	movs	r2, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001676:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8001678:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800167a:	0019      	movs	r1, r3
        __HAL_RCC_BACKUPRESET_FORCE();
 800167c:	0252      	lsls	r2, r2, #9
 800167e:	4302      	orrs	r2, r0
 8001680:	65ea      	str	r2, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001682:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001684:	4883      	ldr	r0, [pc, #524]	@ (8001894 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001686:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001688:	4002      	ands	r2, r0
 800168a:	65ea      	str	r2, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800168c:	65e9      	str	r1, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800168e:	07db      	lsls	r3, r3, #31
 8001690:	d507      	bpl.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff faf3 	bl	8000c7c <HAL_GetTick>
 8001696:	0007      	movs	r7, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001698:	2202      	movs	r2, #2
 800169a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800169c:	4213      	tst	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80016a0:	e0e9      	b.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016a2:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80016a4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80016a6:	4033      	ands	r3, r6
 80016a8:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016aa:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016ac:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80016ae:	e006      	b.n	80016be <HAL_RCCEx_PeriphCLKConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff fae4 	bl	8000c7c <HAL_GetTick>
 80016b4:	9b01      	ldr	r3, [sp, #4]
 80016b6:	1ac0      	subs	r0, r0, r3
 80016b8:	2802      	cmp	r0, #2
 80016ba:	d9cd      	bls.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x40>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80016bc:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d103      	bne.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0xb4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80016c6:	4a74      	ldr	r2, [pc, #464]	@ (8001898 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	63eb      	str	r3, [r5, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	07da      	lsls	r2, r3, #31
 80016d0:	d506      	bpl.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016d2:	2503      	movs	r5, #3
 80016d4:	496c      	ldr	r1, [pc, #432]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80016d6:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016d8:	43aa      	bics	r2, r5
 80016da:	6865      	ldr	r5, [r4, #4]
 80016dc:	432a      	orrs	r2, r5
 80016de:	654a      	str	r2, [r1, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016e0:	079a      	lsls	r2, r3, #30
 80016e2:	d506      	bpl.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80016e4:	250c      	movs	r5, #12
 80016e6:	4968      	ldr	r1, [pc, #416]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80016e8:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016ea:	43aa      	bics	r2, r5
 80016ec:	68a5      	ldr	r5, [r4, #8]
 80016ee:	432a      	orrs	r2, r5
 80016f0:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016f2:	075a      	lsls	r2, r3, #29
 80016f4:	d506      	bpl.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016f6:	2530      	movs	r5, #48	@ 0x30
 80016f8:	4963      	ldr	r1, [pc, #396]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80016fa:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80016fc:	43aa      	bics	r2, r5
 80016fe:	68e5      	ldr	r5, [r4, #12]
 8001700:	432a      	orrs	r2, r5
 8001702:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001704:	06da      	lsls	r2, r3, #27
 8001706:	d506      	bpl.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001708:	495f      	ldr	r1, [pc, #380]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800170a:	4d64      	ldr	r5, [pc, #400]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800170c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800170e:	402a      	ands	r2, r5
 8001710:	6925      	ldr	r5, [r4, #16]
 8001712:	432a      	orrs	r2, r5
 8001714:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001716:	04da      	lsls	r2, r3, #19
 8001718:	d506      	bpl.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800171a:	495b      	ldr	r1, [pc, #364]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800171c:	4d5c      	ldr	r5, [pc, #368]	@ (8001890 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800171e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001720:	402a      	ands	r2, r5
 8001722:	6965      	ldr	r5, [r4, #20]
 8001724:	432a      	orrs	r2, r5
 8001726:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001728:	059a      	lsls	r2, r3, #22
 800172a:	d506      	bpl.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800172c:	4956      	ldr	r1, [pc, #344]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800172e:	4d5c      	ldr	r5, [pc, #368]	@ (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001730:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001732:	402a      	ands	r2, r5
 8001734:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8001736:	432a      	orrs	r2, r5
 8001738:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800173a:	055a      	lsls	r2, r3, #21
 800173c:	d506      	bpl.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800173e:	4952      	ldr	r1, [pc, #328]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001740:	4d58      	ldr	r5, [pc, #352]	@ (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001742:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001744:	402a      	ands	r2, r5
 8001746:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001748:	432a      	orrs	r2, r5
 800174a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800174c:	069a      	lsls	r2, r3, #26
 800174e:	d506      	bpl.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001750:	494d      	ldr	r1, [pc, #308]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001752:	4d55      	ldr	r5, [pc, #340]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001754:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001756:	402a      	ands	r2, r5
 8001758:	69a5      	ldr	r5, [r4, #24]
 800175a:	432a      	orrs	r2, r5
 800175c:	654a      	str	r2, [r1, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800175e:	065a      	lsls	r2, r3, #25
 8001760:	d506      	bpl.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001762:	4949      	ldr	r1, [pc, #292]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001764:	4d51      	ldr	r5, [pc, #324]	@ (80018ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001766:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001768:	402a      	ands	r2, r5
 800176a:	69e5      	ldr	r5, [r4, #28]
 800176c:	432a      	orrs	r2, r5
 800176e:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001770:	045a      	lsls	r2, r3, #17
 8001772:	d50f      	bpl.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001774:	4944      	ldr	r1, [pc, #272]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001776:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8001778:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	0892      	lsrs	r2, r2, #2
 800177e:	432a      	orrs	r2, r5
 8001780:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	05d2      	lsls	r2, r2, #23
 8001786:	4295      	cmp	r5, r2
 8001788:	d104      	bne.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	68cd      	ldr	r5, [r1, #12]
 800178e:	0252      	lsls	r2, r2, #9
 8001790:	432a      	orrs	r2, r5
 8001792:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001794:	031a      	lsls	r2, r3, #12
 8001796:	d506      	bpl.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001798:	2540      	movs	r5, #64	@ 0x40
 800179a:	493b      	ldr	r1, [pc, #236]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800179c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800179e:	43aa      	bics	r2, r5
 80017a0:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80017a2:	432a      	orrs	r2, r5
 80017a4:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80017a6:	029a      	lsls	r2, r3, #10
 80017a8:	d50f      	bpl.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80017aa:	4937      	ldr	r1, [pc, #220]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80017ac:	4e40      	ldr	r6, [pc, #256]	@ (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80017ae:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80017b0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80017b2:	4032      	ands	r2, r6
 80017b4:	432a      	orrs	r2, r5
 80017b6:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80017b8:	2280      	movs	r2, #128	@ 0x80
 80017ba:	03d2      	lsls	r2, r2, #15
 80017bc:	4295      	cmp	r5, r2
 80017be:	d104      	bne.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80017c0:	2280      	movs	r2, #128	@ 0x80
 80017c2:	68cd      	ldr	r5, [r1, #12]
 80017c4:	0452      	lsls	r2, r2, #17
 80017c6:	432a      	orrs	r2, r5
 80017c8:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80017ca:	025a      	lsls	r2, r3, #9
 80017cc:	d50d      	bpl.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80017ce:	4d2e      	ldr	r5, [pc, #184]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80017d0:	4e38      	ldr	r6, [pc, #224]	@ (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80017d2:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80017d4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80017d6:	4031      	ands	r1, r6
 80017d8:	4311      	orrs	r1, r2
 80017da:	6569      	str	r1, [r5, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80017dc:	2180      	movs	r1, #128	@ 0x80
 80017de:	0449      	lsls	r1, r1, #17
 80017e0:	428a      	cmp	r2, r1
 80017e2:	d102      	bne.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80017e4:	68e9      	ldr	r1, [r5, #12]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	60ea      	str	r2, [r5, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80017ea:	051a      	lsls	r2, r3, #20
 80017ec:	d50d      	bpl.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80017ee:	2603      	movs	r6, #3
 80017f0:	4925      	ldr	r1, [pc, #148]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80017f2:	6a25      	ldr	r5, [r4, #32]
 80017f4:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80017f6:	43b2      	bics	r2, r6
 80017f8:	432a      	orrs	r2, r5
 80017fa:	658a      	str	r2, [r1, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80017fc:	2d01      	cmp	r5, #1
 80017fe:	d104      	bne.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	68cd      	ldr	r5, [r1, #12]
 8001804:	0252      	lsls	r2, r2, #9
 8001806:	432a      	orrs	r2, r5
 8001808:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800180a:	049a      	lsls	r2, r3, #18
 800180c:	d50d      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800180e:	260c      	movs	r6, #12
 8001810:	491d      	ldr	r1, [pc, #116]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001812:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8001814:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8001816:	43b2      	bics	r2, r6
 8001818:	432a      	orrs	r2, r5
 800181a:	658a      	str	r2, [r1, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800181c:	2d04      	cmp	r5, #4
 800181e:	d104      	bne.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x212>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001820:	2280      	movs	r2, #128	@ 0x80
 8001822:	68cd      	ldr	r5, [r1, #12]
 8001824:	0252      	lsls	r2, r2, #9
 8001826:	432a      	orrs	r2, r5
 8001828:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800182a:	2580      	movs	r5, #128	@ 0x80
 800182c:	046d      	lsls	r5, r5, #17
 800182e:	422b      	tst	r3, r5
 8001830:	d00d      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001832:	4915      	ldr	r1, [pc, #84]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001834:	4f1c      	ldr	r7, [pc, #112]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001836:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8001838:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800183a:	403a      	ands	r2, r7
 800183c:	4332      	orrs	r2, r6
 800183e:	658a      	str	r2, [r1, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	0192      	lsls	r2, r2, #6
 8001844:	4296      	cmp	r6, r2
 8001846:	d102      	bne.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x236>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001848:	68ca      	ldr	r2, [r1, #12]
 800184a:	4315      	orrs	r5, r2
 800184c:	60cd      	str	r5, [r1, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800184e:	019b      	lsls	r3, r3, #6
 8001850:	d50f      	bpl.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001852:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001854:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001856:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001858:	4c0d      	ldr	r4, [pc, #52]	@ (8001890 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800185a:	4023      	ands	r3, r4
 800185c:	430b      	orrs	r3, r1
 800185e:	6593      	str	r3, [r2, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4299      	cmp	r1, r3
 8001866:	d104      	bne.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	68d1      	ldr	r1, [r2, #12]
 800186c:	045b      	lsls	r3, r3, #17
 800186e:	430b      	orrs	r3, r1
 8001870:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001872:	b005      	add	sp, #20
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff fa01 	bl	8000c7c <HAL_GetTick>
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800187c:	1bc0      	subs	r0, r0, r7
 800187e:	4298      	cmp	r0, r3
 8001880:	d800      	bhi.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001882:	e709      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8001884:	e71a      	b.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	fffffcff 	.word	0xfffffcff
 8001894:	fffeffff 	.word	0xfffeffff
 8001898:	efffffff 	.word	0xefffffff
 800189c:	fffff3ff 	.word	0xfffff3ff
 80018a0:	fff3ffff 	.word	0xfff3ffff
 80018a4:	ffcfffff 	.word	0xffcfffff
 80018a8:	ffffcfff 	.word	0xffffcfff
 80018ac:	ffff3fff 	.word	0xffff3fff
 80018b0:	ffbfffff 	.word	0xffbfffff
 80018b4:	feffffff 	.word	0xfeffffff
 80018b8:	00001388 	.word	0x00001388

080018bc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	000e      	movs	r6, r1
 80018c0:	b085      	sub	sp, #20
 80018c2:	0015      	movs	r5, r2
 80018c4:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80018c6:	f7ff f9d9 	bl	8000c7c <HAL_GetTick>
 80018ca:	19ad      	adds	r5, r5, r6
 80018cc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80018ce:	f7ff f9d5 	bl	8000c7c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018d2:	2780      	movs	r7, #128	@ 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80018d4:	4b25      	ldr	r3, [pc, #148]	@ (800196c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80018d6:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	0d1b      	lsrs	r3, r3, #20
 80018de:	436b      	muls	r3, r5
 80018e0:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	6893      	ldr	r3, [r2, #8]
 80018e6:	0018      	movs	r0, r3
 80018e8:	4038      	ands	r0, r7
 80018ea:	423b      	tst	r3, r7
 80018ec:	d032      	beq.n	8001954 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 80018ee:	1c73      	adds	r3, r6, #1
 80018f0:	d0f8      	beq.n	80018e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80018f2:	f7ff f9c3 	bl	8000c7c <HAL_GetTick>
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	1ac0      	subs	r0, r0, r3
 80018fa:	42a8      	cmp	r0, r5
 80018fc:	d32c      	bcc.n	8001958 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018fe:	21e0      	movs	r1, #224	@ 0xe0
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	438a      	bics	r2, r1
 8001906:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001908:	2282      	movs	r2, #130	@ 0x82
 800190a:	6861      	ldr	r1, [r4, #4]
 800190c:	0052      	lsls	r2, r2, #1
 800190e:	4291      	cmp	r1, r2
 8001910:	d10c      	bne.n	800192c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8001912:	2180      	movs	r1, #128	@ 0x80
 8001914:	68a2      	ldr	r2, [r4, #8]
 8001916:	0209      	lsls	r1, r1, #8
 8001918:	428a      	cmp	r2, r1
 800191a:	d003      	beq.n	8001924 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800191c:	2180      	movs	r1, #128	@ 0x80
 800191e:	00c9      	lsls	r1, r1, #3
 8001920:	428a      	cmp	r2, r1
 8001922:	d103      	bne.n	800192c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001924:	2140      	movs	r1, #64	@ 0x40
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	438a      	bics	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001930:	0189      	lsls	r1, r1, #6
 8001932:	428a      	cmp	r2, r1
 8001934:	d106      	bne.n	8001944 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 800193a:	4001      	ands	r1, r0
 800193c:	6019      	str	r1, [r3, #0]
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001944:	0023      	movs	r3, r4
 8001946:	2201      	movs	r2, #1
 8001948:	335d      	adds	r3, #93	@ 0x5d
 800194a:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800194c:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001950:	345c      	adds	r4, #92	@ 0x5c
 8001952:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8001954:	b005      	add	sp, #20
 8001956:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8001958:	9b03      	ldr	r3, [sp, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d000      	beq.n	8001960 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
 800195e:	002b      	movs	r3, r5
      count--;
 8001960:	9a03      	ldr	r2, [sp, #12]
 8001962:	001d      	movs	r5, r3
 8001964:	3a01      	subs	r2, #1
 8001966:	9203      	str	r2, [sp, #12]
 8001968:	e7bb      	b.n	80018e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	20000000 	.word	0x20000000
 8001970:	ffffdfff 	.word	0xffffdfff

08001974 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001978:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800197a:	b085      	sub	sp, #20
 800197c:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 800197e:	ab02      	add	r3, sp, #8
 8001980:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001982:	0004      	movs	r4, r0
 8001984:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001986:	f7ff f979 	bl	8000c7c <HAL_GetTick>
 800198a:	19ed      	adds	r5, r5, r7
 800198c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800198e:	f7ff f975 	bl	8000c7c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001992:	2223      	movs	r2, #35	@ 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001994:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8001996:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001998:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4353      	muls	r3, r2
 80019a0:	0d1b      	lsrs	r3, r3, #20
 80019a2:	436b      	muls	r3, r5
 80019a4:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80019a6:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 80019a8:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 80019aa:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80019ac:	688b      	ldr	r3, [r1, #8]
 80019ae:	0018      	movs	r0, r3
 80019b0:	4030      	ands	r0, r6
 80019b2:	4233      	tst	r3, r6
 80019b4:	d03b      	beq.n	8001a2e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80019b6:	23c0      	movs	r3, #192	@ 0xc0
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	429e      	cmp	r6, r3
 80019bc:	d104      	bne.n	80019c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	7013      	strb	r3, [r2, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80019c6:	7813      	ldrb	r3, [r2, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80019c8:	1c7b      	adds	r3, r7, #1
 80019ca:	d0ef      	beq.n	80019ac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80019cc:	f7ff f956 	bl	8000c7c <HAL_GetTick>
 80019d0:	9b00      	ldr	r3, [sp, #0]
 80019d2:	1ac0      	subs	r0, r0, r3
 80019d4:	42a8      	cmp	r0, r5
 80019d6:	d32c      	bcc.n	8001a32 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019d8:	21e0      	movs	r1, #224	@ 0xe0
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	438a      	bics	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019e2:	2282      	movs	r2, #130	@ 0x82
 80019e4:	6861      	ldr	r1, [r4, #4]
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	4291      	cmp	r1, r2
 80019ea:	d10c      	bne.n	8001a06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 80019ec:	2180      	movs	r1, #128	@ 0x80
 80019ee:	68a2      	ldr	r2, [r4, #8]
 80019f0:	0209      	lsls	r1, r1, #8
 80019f2:	428a      	cmp	r2, r1
 80019f4:	d003      	beq.n	80019fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	00c9      	lsls	r1, r1, #3
 80019fa:	428a      	cmp	r2, r1
 80019fc:	d103      	bne.n	8001a06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019fe:	2140      	movs	r1, #64	@ 0x40
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	438a      	bics	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a0a:	0189      	lsls	r1, r1, #6
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	d106      	bne.n	8001a1e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
        {
          SPI_RESET_CRC(hspi);
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8001a14:	4001      	ands	r1, r0
 8001a16:	6019      	str	r1, [r3, #0]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a1e:	0023      	movs	r3, r4
 8001a20:	2201      	movs	r2, #1
 8001a22:	335d      	adds	r3, #93	@ 0x5d
 8001a24:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a26:	2300      	movs	r3, #0

        return HAL_TIMEOUT;
 8001a28:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001a2a:	345c      	adds	r4, #92	@ 0x5c
 8001a2c:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8001a2e:	b005      	add	sp, #20
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8001a32:	9b03      	ldr	r3, [sp, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d000      	beq.n	8001a3a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
 8001a38:	002b      	movs	r3, r5
      count--;
 8001a3a:	9a03      	ldr	r2, [sp, #12]
 8001a3c:	001d      	movs	r5, r3
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	9203      	str	r2, [sp, #12]
 8001a42:	e7b0      	b.n	80019a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8001a44:	20000000 	.word	0x20000000
 8001a48:	ffffdfff 	.word	0xffffdfff

08001a4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a4e:	2382      	movs	r3, #130	@ 0x82
{
 8001a50:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a52:	6842      	ldr	r2, [r0, #4]
{
 8001a54:	0004      	movs	r4, r0
 8001a56:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d10d      	bne.n	8001a7a <SPI_EndRxTransaction+0x2e>
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	6883      	ldr	r3, [r0, #8]
 8001a62:	0212      	lsls	r2, r2, #8
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d003      	beq.n	8001a70 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	00d2      	lsls	r2, r2, #3
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d104      	bne.n	8001a7a <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001a70:	2140      	movs	r1, #64	@ 0x40
 8001a72:	6822      	ldr	r2, [r4, #0]
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	438b      	bics	r3, r1
 8001a78:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a7a:	003a      	movs	r2, r7
 8001a7c:	0031      	movs	r1, r6
 8001a7e:	0020      	movs	r0, r4
 8001a80:	f7ff ff1c 	bl	80018bc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001a84:	1e05      	subs	r5, r0, #0
 8001a86:	d005      	beq.n	8001a94 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a88:	2320      	movs	r3, #32
 8001a8a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001a8c:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8001a92:	e016      	b.n	8001ac2 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a94:	2382      	movs	r3, #130	@ 0x82
 8001a96:	6862      	ldr	r2, [r4, #4]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d111      	bne.n	8001ac2 <SPI_EndRxTransaction+0x76>
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	68a3      	ldr	r3, [r4, #8]
 8001aa2:	0212      	lsls	r2, r2, #8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d108      	bne.n	8001ac2 <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ab0:	21c0      	movs	r1, #192	@ 0xc0
 8001ab2:	003b      	movs	r3, r7
 8001ab4:	0032      	movs	r2, r6
 8001ab6:	0020      	movs	r0, r4
 8001ab8:	00c9      	lsls	r1, r1, #3
 8001aba:	f7ff ff5b 	bl	8001974 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d1e2      	bne.n	8001a88 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ac6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac6:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ac8:	0013      	movs	r3, r2
{
 8001aca:	000d      	movs	r5, r1
 8001acc:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ace:	000a      	movs	r2, r1
 8001ad0:	21c0      	movs	r1, #192	@ 0xc0
 8001ad2:	0149      	lsls	r1, r1, #5
{
 8001ad4:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ad6:	f7ff ff4d 	bl	8001974 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d005      	beq.n	8001aea <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ade:	2320      	movs	r3, #32
    return HAL_TIMEOUT;
 8001ae0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ae2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001aea:	0032      	movs	r2, r6
 8001aec:	0029      	movs	r1, r5
 8001aee:	0020      	movs	r0, r4
 8001af0:	f7ff fee4 	bl	80018bc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d1f2      	bne.n	8001ade <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001af8:	21c0      	movs	r1, #192	@ 0xc0
 8001afa:	0033      	movs	r3, r6
 8001afc:	002a      	movs	r2, r5
 8001afe:	0020      	movs	r0, r4
 8001b00:	00c9      	lsls	r1, r1, #3
 8001b02:	f7ff ff37 	bl	8001974 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d0ee      	beq.n	8001ae8 <SPI_EndRxTxTransaction+0x22>
 8001b0a:	e7e8      	b.n	8001ade <SPI_EndRxTxTransaction+0x18>

08001b0c <HAL_SPI_Init>:
{
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d067      	beq.n	8001be6 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d165      	bne.n	8001be8 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b1c:	2282      	movs	r2, #130	@ 0x82
 8001b1e:	6861      	ldr	r1, [r4, #4]
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	4291      	cmp	r1, r2
 8001b24:	d000      	beq.n	8001b28 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b26:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b28:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b2a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b2e:	355d      	adds	r5, #93	@ 0x5d
 8001b30:	782b      	ldrb	r3, [r5, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8001b38:	0023      	movs	r3, r4
 8001b3a:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8001b3c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001b3e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8001b40:	f7fe ff5c 	bl	80009fc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b44:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001b46:	2240      	movs	r2, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b48:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001b4a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b4c:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001b4e:	680b      	ldr	r3, [r1, #0]
 8001b50:	4393      	bics	r3, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b52:	22e0      	movs	r2, #224	@ 0xe0
  __HAL_SPI_DISABLE(hspi);
 8001b54:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b56:	00d2      	lsls	r2, r2, #3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4296      	cmp	r6, r2
 8001b5c:	d948      	bls.n	8001bf0 <HAL_SPI_Init+0xe4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b5e:	22f0      	movs	r2, #240	@ 0xf0
 8001b60:	0018      	movs	r0, r3
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	4296      	cmp	r6, r2
 8001b66:	d000      	beq.n	8001b6a <HAL_SPI_Init+0x5e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b68:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b6a:	2282      	movs	r2, #130	@ 0x82
 8001b6c:	2784      	movs	r7, #132	@ 0x84
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	68a2      	ldr	r2, [r4, #8]
 8001b76:	023f      	lsls	r7, r7, #8
 8001b78:	403a      	ands	r2, r7
 8001b7a:	2702      	movs	r7, #2
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	69a5      	ldr	r5, [r4, #24]
 8001b82:	403a      	ands	r2, r7
 8001b84:	4313      	orrs	r3, r2
 8001b86:	2201      	movs	r2, #1
 8001b88:	6967      	ldr	r7, [r4, #20]
 8001b8a:	4017      	ands	r7, r2
 8001b8c:	433b      	orrs	r3, r7
 8001b8e:	2780      	movs	r7, #128	@ 0x80
 8001b90:	00bf      	lsls	r7, r7, #2
 8001b92:	402f      	ands	r7, r5
 8001b94:	433b      	orrs	r3, r7
 8001b96:	69e7      	ldr	r7, [r4, #28]
 8001b98:	3237      	adds	r2, #55	@ 0x37
 8001b9a:	4017      	ands	r7, r2
 8001b9c:	433b      	orrs	r3, r7
 8001b9e:	6a27      	ldr	r7, [r4, #32]
 8001ba0:	3248      	adds	r2, #72	@ 0x48
 8001ba2:	4017      	ands	r7, r2
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	433b      	orrs	r3, r7
 8001ba8:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8001baa:	0192      	lsls	r2, r2, #6
 8001bac:	4017      	ands	r7, r2
 8001bae:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001bb0:	2710      	movs	r7, #16
 8001bb2:	2208      	movs	r2, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bb4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001bb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001bb8:	0c2d      	lsrs	r5, r5, #16
 8001bba:	403b      	ands	r3, r7
 8001bbc:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8001bbe:	4017      	ands	r7, r2
 8001bc0:	433b      	orrs	r3, r7
 8001bc2:	27f0      	movs	r7, #240	@ 0xf0
 8001bc4:	013f      	lsls	r7, r7, #4
 8001bc6:	403e      	ands	r6, r7
 8001bc8:	4333      	orrs	r3, r6
 8001bca:	2604      	movs	r6, #4
 8001bcc:	4035      	ands	r5, r6
 8001bce:	432b      	orrs	r3, r5
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bd4:	69cb      	ldr	r3, [r1, #28]
 8001bd6:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <HAL_SPI_Init+0xec>)
 8001bd8:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bda:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bdc:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001bde:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001be0:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001be2:	345d      	adds	r4, #93	@ 0x5d
 8001be4:	7023      	strb	r3, [r4, #0]
}
 8001be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bec:	6163      	str	r3, [r4, #20]
 8001bee:	e79b      	b.n	8001b28 <HAL_SPI_Init+0x1c>
 8001bf0:	2080      	movs	r0, #128	@ 0x80
 8001bf2:	0140      	lsls	r0, r0, #5
 8001bf4:	e7b6      	b.n	8001b64 <HAL_SPI_Init+0x58>
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	fffff7ff 	.word	0xfffff7ff

08001bfc <HAL_SPI_TransmitReceive>:
{
 8001bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bfe:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001c00:	0003      	movs	r3, r0
 8001c02:	335c      	adds	r3, #92	@ 0x5c
{
 8001c04:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001c06:	781a      	ldrb	r2, [r3, #0]
{
 8001c08:	0004      	movs	r4, r0
 8001c0a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	2a01      	cmp	r2, #1
 8001c10:	d01b      	beq.n	8001c4a <HAL_SPI_TransmitReceive+0x4e>
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001c16:	f7ff f831 	bl	8000c7c <HAL_GetTick>
  tmp_state           = hspi->State;
 8001c1a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001c1c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001c1e:	335d      	adds	r3, #93	@ 0x5d
 8001c20:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001c22:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001c24:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d009      	beq.n	8001c3e <HAL_SPI_TransmitReceive+0x42>
 8001c2a:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8001c2c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4299      	cmp	r1, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c34:	68a3      	ldr	r3, [r4, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d104      	bne.n	8001c44 <HAL_SPI_TransmitReceive+0x48>
 8001c3a:	2a04      	cmp	r2, #4
 8001c3c:	d102      	bne.n	8001c44 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c3e:	2d00      	cmp	r5, #0
 8001c40:	d104      	bne.n	8001c4c <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8001c44:	2300      	movs	r3, #0
 8001c46:	345c      	adds	r4, #92	@ 0x5c
 8001c48:	7023      	strb	r3, [r4, #0]
}
 8001c4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c4c:	2f00      	cmp	r7, #0
 8001c4e:	d0f8      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0x46>
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	d0f6      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c54:	0023      	movs	r3, r4
 8001c56:	335d      	adds	r3, #93	@ 0x5d
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	2a04      	cmp	r2, #4
 8001c5c:	d001      	beq.n	8001c62 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c5e:	2205      	movs	r2, #5
 8001c60:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8001c62:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c64:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8001c66:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c68:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c6a:	6427      	str	r7, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001c6c:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001c6e:	1da2      	adds	r2, r4, #6
 8001c70:	87d6      	strh	r6, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c72:	22e0      	movs	r2, #224	@ 0xe0
 8001c74:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8001c76:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001c78:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c7a:	63a5      	str	r5, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c7c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8001c7e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001c80:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c82:	00d2      	lsls	r2, r2, #3
 8001c84:	4290      	cmp	r0, r2
 8001c86:	d935      	bls.n	8001cf4 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4f60      	ldr	r7, [pc, #384]	@ (8001e0c <HAL_SPI_TransmitReceive+0x210>)
 8001c8c:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c8e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c90:	2240      	movs	r2, #64	@ 0x40
 8001c92:	681f      	ldr	r7, [r3, #0]
 8001c94:	4217      	tst	r7, r2
 8001c96:	d102      	bne.n	8001c9e <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8001c98:	681f      	ldr	r7, [r3, #0]
 8001c9a:	433a      	orrs	r2, r7
 8001c9c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c9e:	22e0      	movs	r2, #224	@ 0xe0
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	4290      	cmp	r0, r2
 8001ca4:	d961      	bls.n	8001d6a <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_SPI_TransmitReceive+0xb2>
 8001caa:	2e01      	cmp	r6, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cae:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb0:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cb2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001cb4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb6:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001cbe:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cc0:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cc2:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cc4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <HAL_SPI_TransmitReceive+0x102>
 8001cca:	0023      	movs	r3, r4
 8001ccc:	3308      	adds	r3, #8
 8001cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d114      	bne.n	8001cfe <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cd4:	0020      	movs	r0, r4
 8001cd6:	9a01      	ldr	r2, [sp, #4]
 8001cd8:	9908      	ldr	r1, [sp, #32]
 8001cda:	f7ff fef4 	bl	8001ac6 <SPI_EndRxTxTransaction>
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d000      	beq.n	8001ce4 <HAL_SPI_TransmitReceive+0xe8>
 8001ce2:	e08e      	b.n	8001e02 <HAL_SPI_TransmitReceive+0x206>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ce4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ab      	bne.n	8001c42 <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8001cea:	0023      	movs	r3, r4
 8001cec:	2201      	movs	r2, #1
 8001cee:	335d      	adds	r3, #93	@ 0x5d
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e7a7      	b.n	8001c44 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	685f      	ldr	r7, [r3, #4]
 8001cf8:	0152      	lsls	r2, r2, #5
 8001cfa:	433a      	orrs	r2, r7
 8001cfc:	e7c7      	b.n	8001c8e <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cfe:	6820      	ldr	r0, [r4, #0]
 8001d00:	6883      	ldr	r3, [r0, #8]
 8001d02:	423b      	tst	r3, r7
 8001d04:	d00e      	beq.n	8001d24 <HAL_SPI_TransmitReceive+0x128>
 8001d06:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_SPI_TransmitReceive+0x128>
 8001d0c:	2d01      	cmp	r5, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_SPI_TransmitReceive+0x126>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d12:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d14:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d16:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d18:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d1a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8001d22:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d24:	6883      	ldr	r3, [r0, #8]
 8001d26:	0019      	movs	r1, r3
 8001d28:	4031      	ands	r1, r6
 8001d2a:	4233      	tst	r3, r6
 8001d2c:	d00e      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x150>
 8001d2e:	0022      	movs	r2, r4
 8001d30:	3208      	adds	r2, #8
 8001d32:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8001d38:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d3a:	68c0      	ldr	r0, [r0, #12]
 8001d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d3e:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d40:	3302      	adds	r3, #2
 8001d42:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001d44:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d4c:	f7fe ff96 	bl	8000c7c <HAL_GetTick>
 8001d50:	9b01      	ldr	r3, [sp, #4]
 8001d52:	1ac0      	subs	r0, r0, r3
 8001d54:	9b08      	ldr	r3, [sp, #32]
 8001d56:	4298      	cmp	r0, r3
 8001d58:	d3b4      	bcc.n	8001cc4 <HAL_SPI_TransmitReceive+0xc8>
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	d0b2      	beq.n	8001cc4 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8001d5e:	0023      	movs	r3, r4
 8001d60:	2201      	movs	r2, #1
 8001d62:	335d      	adds	r3, #93	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8001d64:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001d66:	701a      	strb	r2, [r3, #0]
        goto error;
 8001d68:	e76c      	b.n	8001c44 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d6a:	2900      	cmp	r1, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_SPI_TransmitReceive+0x176>
 8001d6e:	2e01      	cmp	r6, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d72:	782a      	ldrb	r2, [r5, #0]
 8001d74:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d76:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d78:	3301      	adds	r3, #1
 8001d7a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001d7c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001d84:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d86:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d88:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d8a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d104      	bne.n	8001d9a <HAL_SPI_TransmitReceive+0x19e>
 8001d90:	0023      	movs	r3, r4
 8001d92:	3308      	adds	r3, #8
 8001d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d09c      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0xd8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	423a      	tst	r2, r7
 8001da0:	d00f      	beq.n	8001dc2 <HAL_SPI_TransmitReceive+0x1c6>
 8001da2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_SPI_TransmitReceive+0x1c6>
 8001da8:	2d01      	cmp	r5, #1
 8001daa:	d109      	bne.n	8001dc0 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001dac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001db2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001db4:	3301      	adds	r3, #1
 8001db6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001db8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001dc0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	4031      	ands	r1, r6
 8001dca:	4232      	tst	r2, r6
 8001dcc:	d00f      	beq.n	8001dee <HAL_SPI_TransmitReceive+0x1f2>
 8001dce:	0022      	movs	r2, r4
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 8001dd8:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001dda:	7b1b      	ldrb	r3, [r3, #12]
 8001ddc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001dde:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8001de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001de2:	3301      	adds	r3, #1
 8001de4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001de6:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dee:	f7fe ff45 	bl	8000c7c <HAL_GetTick>
 8001df2:	9b01      	ldr	r3, [sp, #4]
 8001df4:	1ac0      	subs	r0, r0, r3
 8001df6:	9b08      	ldr	r3, [sp, #32]
 8001df8:	4298      	cmp	r0, r3
 8001dfa:	d3c6      	bcc.n	8001d8a <HAL_SPI_TransmitReceive+0x18e>
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	d0c4      	beq.n	8001d8a <HAL_SPI_TransmitReceive+0x18e>
 8001e00:	e7ad      	b.n	8001d5e <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e02:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001e04:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e06:	6623      	str	r3, [r4, #96]	@ 0x60
 8001e08:	e76c      	b.n	8001ce4 <HAL_SPI_TransmitReceive+0xe8>
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	ffffefff 	.word	0xffffefff

08001e10 <HAL_SPI_Receive>:
{
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e12:	0006      	movs	r6, r0
{
 8001e14:	b087      	sub	sp, #28
 8001e16:	9104      	str	r1, [sp, #16]
 8001e18:	9303      	str	r3, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e1a:	365d      	adds	r6, #93	@ 0x5d
 8001e1c:	7833      	ldrb	r3, [r6, #0]
{
 8001e1e:	0004      	movs	r4, r0
 8001e20:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e22:	b2dd      	uxtb	r5, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d000      	beq.n	8001e2a <HAL_SPI_Receive+0x1a>
 8001e28:	e0aa      	b.n	8001f80 <HAL_SPI_Receive+0x170>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	6842      	ldr	r2, [r0, #4]
 8001e2e:	33ff      	adds	r3, #255	@ 0xff
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d10e      	bne.n	8001e52 <HAL_SPI_Receive+0x42>
 8001e34:	6883      	ldr	r3, [r0, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <HAL_SPI_Receive+0x42>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e3e:	9b03      	ldr	r3, [sp, #12]
 8001e40:	000a      	movs	r2, r1
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	003b      	movs	r3, r7
 8001e46:	f7ff fed9 	bl	8001bfc <HAL_SPI_TransmitReceive>
 8001e4a:	0005      	movs	r5, r0
}
 8001e4c:	0028      	movs	r0, r5
 8001e4e:	b007      	add	sp, #28
 8001e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001e52:	0023      	movs	r3, r4
 8001e54:	335c      	adds	r3, #92	@ 0x5c
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	2a01      	cmp	r2, #1
 8001e5a:	d100      	bne.n	8001e5e <HAL_SPI_Receive+0x4e>
 8001e5c:	e092      	b.n	8001f84 <HAL_SPI_Receive+0x174>
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001e62:	f7fe ff0b 	bl	8000c7c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8001e66:	9b04      	ldr	r3, [sp, #16]
  tickstart = HAL_GetTick();
 8001e68:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d077      	beq.n	8001f5e <HAL_SPI_Receive+0x14e>
 8001e6e:	2f00      	cmp	r7, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_SPI_Receive+0x14e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e72:	2304      	movs	r3, #4
 8001e74:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e76:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e78:	9a04      	ldr	r2, [sp, #16]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e7a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e7c:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001e7e:	1da2      	adds	r2, r4, #6
 8001e80:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  hspi->RxXferCount = Size;
 8001e82:	3202      	adds	r2, #2
 8001e84:	87d7      	strh	r7, [r2, #62]	@ 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e86:	22e0      	movs	r2, #224	@ 0xe0
 8001e88:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e8a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001e8c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001e8e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001e90:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001e92:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e94:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e96:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e98:	4291      	cmp	r1, r2
 8001e9a:	d92f      	bls.n	8001efc <HAL_SPI_Receive+0xec>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	483a      	ldr	r0, [pc, #232]	@ (8001f88 <HAL_SPI_Receive+0x178>)
 8001ea0:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ea2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea4:	2280      	movs	r2, #128	@ 0x80
 8001ea6:	68a0      	ldr	r0, [r4, #8]
 8001ea8:	0212      	lsls	r2, r2, #8
 8001eaa:	4290      	cmp	r0, r2
 8001eac:	d107      	bne.n	8001ebe <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8001eae:	2040      	movs	r0, #64	@ 0x40
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4382      	bics	r2, r0
 8001eb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4834      	ldr	r0, [pc, #208]	@ (8001f8c <HAL_SPI_Receive+0x17c>)
 8001eba:	4002      	ands	r2, r0
 8001ebc:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ebe:	2240      	movs	r2, #64	@ 0x40
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	4210      	tst	r0, r2
 8001ec4:	d102      	bne.n	8001ecc <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001ecc:	23e0      	movs	r3, #224	@ 0xe0
 8001ece:	0027      	movs	r7, r4
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	4299      	cmp	r1, r3
 8001ed6:	d925      	bls.n	8001f24 <HAL_SPI_Receive+0x114>
    while (hspi->RxXferCount > 0U)
 8001ed8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d025      	beq.n	8001f2a <HAL_SPI_Receive+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ede:	2101      	movs	r1, #1
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	420a      	tst	r2, r1
 8001ee6:	d03e      	beq.n	8001f66 <HAL_SPI_Receive+0x156>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001eec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eee:	3302      	adds	r3, #2
 8001ef0:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001ef2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001efa:	e7ed      	b.n	8001ed8 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001efc:	2280      	movs	r2, #128	@ 0x80
 8001efe:	6858      	ldr	r0, [r3, #4]
 8001f00:	0152      	lsls	r2, r2, #5
 8001f02:	4302      	orrs	r2, r0
 8001f04:	e7cd      	b.n	8001ea2 <HAL_SPI_Receive+0x92>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f06:	2101      	movs	r1, #1
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	420a      	tst	r2, r1
 8001f0e:	d01a      	beq.n	8001f46 <HAL_SPI_Receive+0x136>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f10:	7b1b      	ldrb	r3, [r3, #12]
 8001f12:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001f14:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001f1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8001f24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ed      	bne.n	8001f06 <HAL_SPI_Receive+0xf6>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f2a:	0020      	movs	r0, r4
 8001f2c:	9a05      	ldr	r2, [sp, #20]
 8001f2e:	9903      	ldr	r1, [sp, #12]
 8001f30:	f7ff fd8c 	bl	8001a4c <SPI_EndRxTransaction>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d120      	bne.n	8001f7a <HAL_SPI_Receive+0x16a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f38:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_SPI_Receive+0x14e>
    hspi->State = HAL_SPI_STATE_READY;
 8001f3e:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f40:	001d      	movs	r5, r3
    hspi->State = HAL_SPI_STATE_READY;
 8001f42:	7032      	strb	r2, [r6, #0]
 8001f44:	e00b      	b.n	8001f5e <HAL_SPI_Receive+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f46:	f7fe fe99 	bl	8000c7c <HAL_GetTick>
 8001f4a:	9b05      	ldr	r3, [sp, #20]
 8001f4c:	1ac0      	subs	r0, r0, r3
 8001f4e:	9b03      	ldr	r3, [sp, #12]
 8001f50:	4298      	cmp	r0, r3
 8001f52:	d3e7      	bcc.n	8001f24 <HAL_SPI_Receive+0x114>
 8001f54:	3301      	adds	r3, #1
 8001f56:	d0e5      	beq.n	8001f24 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8001f58:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8001f5a:	2503      	movs	r5, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001f5c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	345c      	adds	r4, #92	@ 0x5c
 8001f62:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8001f64:	e772      	b.n	8001e4c <HAL_SPI_Receive+0x3c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f66:	f7fe fe89 	bl	8000c7c <HAL_GetTick>
 8001f6a:	9b05      	ldr	r3, [sp, #20]
 8001f6c:	1ac0      	subs	r0, r0, r3
 8001f6e:	9b03      	ldr	r3, [sp, #12]
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d3b1      	bcc.n	8001ed8 <HAL_SPI_Receive+0xc8>
 8001f74:	3301      	adds	r3, #1
 8001f76:	d0af      	beq.n	8001ed8 <HAL_SPI_Receive+0xc8>
 8001f78:	e7ee      	b.n	8001f58 <HAL_SPI_Receive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	6623      	str	r3, [r4, #96]	@ 0x60
 8001f7e:	e7db      	b.n	8001f38 <HAL_SPI_Receive+0x128>
    errorcode = HAL_BUSY;
 8001f80:	2502      	movs	r5, #2
 8001f82:	e7ec      	b.n	8001f5e <HAL_SPI_Receive+0x14e>
  __HAL_LOCK(hspi);
 8001f84:	2502      	movs	r5, #2
 8001f86:	e761      	b.n	8001e4c <HAL_SPI_Receive+0x3c>
 8001f88:	ffffefff 	.word	0xffffefff
 8001f8c:	ffffbfff 	.word	0xffffbfff

08001f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f90:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f92:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	2201      	movs	r2, #1
 8001f98:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001f9c:	6801      	ldr	r1, [r0, #0]
 8001f9e:	4d13      	ldr	r5, [pc, #76]	@ (8001fec <UART_EndRxTransfer+0x5c>)
 8001fa0:	680b      	ldr	r3, [r1, #0]
 8001fa2:	402b      	ands	r3, r5
 8001fa4:	600b      	str	r3, [r1, #0]
 8001fa6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001faa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fae:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001fb2:	6802      	ldr	r2, [r0, #0]
 8001fb4:	4c0e      	ldr	r4, [pc, #56]	@ (8001ff0 <UART_EndRxTransfer+0x60>)
 8001fb6:	6893      	ldr	r3, [r2, #8]
 8001fb8:	4023      	ands	r3, r4
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10a      	bne.n	8001fdc <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fca:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fce:	2410      	movs	r4, #16
 8001fd0:	6802      	ldr	r2, [r0, #0]
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	43a3      	bics	r3, r4
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fdc:	0003      	movs	r3, r0
 8001fde:	2220      	movs	r2, #32
 8001fe0:	338c      	adds	r3, #140	@ 0x8c
 8001fe2:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001fe8:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8001fea:	bd30      	pop	{r4, r5, pc}
 8001fec:	fffffedf 	.word	0xfffffedf
 8001ff0:	effffffe 	.word	0xeffffffe

08001ff4 <UART_SetConfig>:
{
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ff8:	6925      	ldr	r5, [r4, #16]
 8001ffa:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ffc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ffe:	4329      	orrs	r1, r5
 8002000:	6965      	ldr	r5, [r4, #20]
 8002002:	69c2      	ldr	r2, [r0, #28]
 8002004:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	4d8b      	ldr	r5, [pc, #556]	@ (8002238 <UART_SetConfig+0x244>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800200a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800200c:	4028      	ands	r0, r5
 800200e:	4301      	orrs	r1, r0
 8002010:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	4889      	ldr	r0, [pc, #548]	@ (800223c <UART_SetConfig+0x248>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002016:	69a5      	ldr	r5, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002018:	4001      	ands	r1, r0
 800201a:	68e0      	ldr	r0, [r4, #12]
 800201c:	4301      	orrs	r1, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800201e:	4888      	ldr	r0, [pc, #544]	@ (8002240 <UART_SetConfig+0x24c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002020:	6059      	str	r1, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002022:	4283      	cmp	r3, r0
 8002024:	d004      	beq.n	8002030 <UART_SetConfig+0x3c>
 8002026:	4987      	ldr	r1, [pc, #540]	@ (8002244 <UART_SetConfig+0x250>)
 8002028:	428b      	cmp	r3, r1
 800202a:	d001      	beq.n	8002030 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800202c:	6a21      	ldr	r1, [r4, #32]
 800202e:	430d      	orrs	r5, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	4e85      	ldr	r6, [pc, #532]	@ (8002248 <UART_SetConfig+0x254>)
 8002034:	4031      	ands	r1, r6
 8002036:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002038:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800203a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800203c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800203e:	43a9      	bics	r1, r5
 8002040:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002042:	4329      	orrs	r1, r5
 8002044:	62d9      	str	r1, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002046:	4981      	ldr	r1, [pc, #516]	@ (800224c <UART_SetConfig+0x258>)
 8002048:	428b      	cmp	r3, r1
 800204a:	d11b      	bne.n	8002084 <UART_SetConfig+0x90>
 800204c:	2103      	movs	r1, #3
 800204e:	4b80      	ldr	r3, [pc, #512]	@ (8002250 <UART_SetConfig+0x25c>)
 8002050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002052:	400b      	ands	r3, r1
 8002054:	0018      	movs	r0, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d006      	beq.n	8002068 <UART_SetConfig+0x74>
 800205a:	2008      	movs	r0, #8
 800205c:	428b      	cmp	r3, r1
 800205e:	d003      	beq.n	8002068 <UART_SetConfig+0x74>
 8002060:	3b01      	subs	r3, #1
 8002062:	4259      	negs	r1, r3
 8002064:	414b      	adcs	r3, r1
 8002066:	0098      	lsls	r0, r3, #2
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	429a      	cmp	r2, r3
 800206e:	d000      	beq.n	8002072 <UART_SetConfig+0x7e>
 8002070:	e0b2      	b.n	80021d8 <UART_SetConfig+0x1e4>
    switch (clocksource)
 8002072:	2808      	cmp	r0, #8
 8002074:	d85a      	bhi.n	800212c <UART_SetConfig+0x138>
 8002076:	f7fe f861 	bl	800013c <__gnu_thumb1_case_uqi>
 800207a:	59d9      	.short	0x59d9
 800207c:	59ac598e 	.word	0x59ac598e
 8002080:	5959      	.short	0x5959
 8002082:	8f          	.byte	0x8f
 8002083:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002084:	4973      	ldr	r1, [pc, #460]	@ (8002254 <UART_SetConfig+0x260>)
 8002086:	428b      	cmp	r3, r1
 8002088:	d10f      	bne.n	80020aa <UART_SetConfig+0xb6>
 800208a:	210c      	movs	r1, #12
 800208c:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <UART_SetConfig+0x25c>)
 800208e:	2002      	movs	r0, #2
 8002090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002092:	400b      	ands	r3, r1
 8002094:	2b08      	cmp	r3, #8
 8002096:	d0e7      	beq.n	8002068 <UART_SetConfig+0x74>
 8002098:	d802      	bhi.n	80020a0 <UART_SetConfig+0xac>
 800209a:	1e59      	subs	r1, r3, #1
 800209c:	418b      	sbcs	r3, r1
 800209e:	e7e2      	b.n	8002066 <UART_SetConfig+0x72>
 80020a0:	2010      	movs	r0, #16
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d1e0      	bne.n	8002068 <UART_SetConfig+0x74>
 80020a6:	3808      	subs	r0, #8
 80020a8:	e7de      	b.n	8002068 <UART_SetConfig+0x74>
 80020aa:	496b      	ldr	r1, [pc, #428]	@ (8002258 <UART_SetConfig+0x264>)
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d10b      	bne.n	80020c8 <UART_SetConfig+0xd4>
 80020b0:	2130      	movs	r1, #48	@ 0x30
 80020b2:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <UART_SetConfig+0x25c>)
 80020b4:	2002      	movs	r0, #2
 80020b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b8:	400b      	ands	r3, r1
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d0d4      	beq.n	8002068 <UART_SetConfig+0x74>
 80020be:	d9ec      	bls.n	800209a <UART_SetConfig+0xa6>
 80020c0:	2010      	movs	r0, #16
 80020c2:	2b30      	cmp	r3, #48	@ 0x30
 80020c4:	d0ef      	beq.n	80020a6 <UART_SetConfig+0xb2>
 80020c6:	e7cf      	b.n	8002068 <UART_SetConfig+0x74>
 80020c8:	4964      	ldr	r1, [pc, #400]	@ (800225c <UART_SetConfig+0x268>)
 80020ca:	428b      	cmp	r3, r1
 80020cc:	d100      	bne.n	80020d0 <UART_SetConfig+0xdc>
 80020ce:	e0a9      	b.n	8002224 <UART_SetConfig+0x230>
 80020d0:	4963      	ldr	r1, [pc, #396]	@ (8002260 <UART_SetConfig+0x26c>)
 80020d2:	428b      	cmp	r3, r1
 80020d4:	d100      	bne.n	80020d8 <UART_SetConfig+0xe4>
 80020d6:	e0a5      	b.n	8002224 <UART_SetConfig+0x230>
 80020d8:	4962      	ldr	r1, [pc, #392]	@ (8002264 <UART_SetConfig+0x270>)
 80020da:	428b      	cmp	r3, r1
 80020dc:	d100      	bne.n	80020e0 <UART_SetConfig+0xec>
 80020de:	e0a1      	b.n	8002224 <UART_SetConfig+0x230>
 80020e0:	4283      	cmp	r3, r0
 80020e2:	d116      	bne.n	8002112 <UART_SetConfig+0x11e>
 80020e4:	22c0      	movs	r2, #192	@ 0xc0
 80020e6:	2180      	movs	r1, #128	@ 0x80
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <UART_SetConfig+0x25c>)
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	0109      	lsls	r1, r1, #4
 80020f0:	4013      	ands	r3, r2
 80020f2:	428b      	cmp	r3, r1
 80020f4:	d01f      	beq.n	8002136 <UART_SetConfig+0x142>
 80020f6:	d817      	bhi.n	8002128 <UART_SetConfig+0x134>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d119      	bne.n	8002130 <UART_SetConfig+0x13c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80020fc:	f7ff fa78 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002100:	1e06      	subs	r6, r0, #0
    if (pclk != 0U)
 8002102:	d119      	bne.n	8002138 <UART_SetConfig+0x144>
        pclk = (uint32_t) HSI_VALUE;
 8002104:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8002106:	4b58      	ldr	r3, [pc, #352]	@ (8002268 <UART_SetConfig+0x274>)
 8002108:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800210e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002112:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <UART_SetConfig+0x250>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d109      	bne.n	800212c <UART_SetConfig+0x138>
 8002118:	22c0      	movs	r2, #192	@ 0xc0
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	4b4c      	ldr	r3, [pc, #304]	@ (8002250 <UART_SetConfig+0x25c>)
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	0089      	lsls	r1, r1, #2
 8002124:	4013      	ands	r3, r2
 8002126:	e7e4      	b.n	80020f2 <UART_SetConfig+0xfe>
 8002128:	4293      	cmp	r3, r2
 800212a:	d031      	beq.n	8002190 <UART_SetConfig+0x19c>
        pclk = (uint32_t) HSI_VALUE;
 800212c:	2001      	movs	r0, #1
 800212e:	e7ea      	b.n	8002106 <UART_SetConfig+0x112>
        pclk = HAL_RCC_GetSysClockFreq();
 8002130:	f7ff f970 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 8002134:	e7e4      	b.n	8002100 <UART_SetConfig+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002136:	4e4d      	ldr	r6, [pc, #308]	@ (800226c <UART_SetConfig+0x278>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002138:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800213a:	4b4d      	ldr	r3, [pc, #308]	@ (8002270 <UART_SetConfig+0x27c>)
 800213c:	0052      	lsls	r2, r2, #1
 800213e:	5ad7      	ldrh	r7, [r2, r3]
 8002140:	0030      	movs	r0, r6
 8002142:	0039      	movs	r1, r7
 8002144:	f7fe f80e 	bl	8000164 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002148:	2303      	movs	r3, #3
 800214a:	6865      	ldr	r5, [r4, #4]
 800214c:	436b      	muls	r3, r5
 800214e:	4283      	cmp	r3, r0
 8002150:	d8ec      	bhi.n	800212c <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002152:	032b      	lsls	r3, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002154:	4283      	cmp	r3, r0
 8002156:	d3e9      	bcc.n	800212c <UART_SetConfig+0x138>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002158:	2300      	movs	r3, #0
 800215a:	003a      	movs	r2, r7
 800215c:	0030      	movs	r0, r6
 800215e:	0019      	movs	r1, r3
 8002160:	f7fe f976 	bl	8000450 <__aeabi_uldivmod>
 8002164:	2700      	movs	r7, #0
 8002166:	0e06      	lsrs	r6, r0, #24
 8002168:	020b      	lsls	r3, r1, #8
 800216a:	4333      	orrs	r3, r6
 800216c:	0202      	lsls	r2, r0, #8
 800216e:	086e      	lsrs	r6, r5, #1
 8002170:	1992      	adds	r2, r2, r6
 8002172:	417b      	adcs	r3, r7
 8002174:	0010      	movs	r0, r2
 8002176:	0019      	movs	r1, r3
 8002178:	002a      	movs	r2, r5
 800217a:	003b      	movs	r3, r7
 800217c:	f7fe f968 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002180:	4b3c      	ldr	r3, [pc, #240]	@ (8002274 <UART_SetConfig+0x280>)
 8002182:	18c2      	adds	r2, r0, r3
 8002184:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <UART_SetConfig+0x284>)
 8002186:	429a      	cmp	r2, r3
 8002188:	d8d0      	bhi.n	800212c <UART_SetConfig+0x138>
          huart->Instance->BRR = usartdiv;
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	60d8      	str	r0, [r3, #12]
 800218e:	e7b9      	b.n	8002104 <UART_SetConfig+0x110>
        pclk = (uint32_t) LSE_VALUE;
 8002190:	2680      	movs	r6, #128	@ 0x80
 8002192:	0236      	lsls	r6, r6, #8
 8002194:	e7d0      	b.n	8002138 <UART_SetConfig+0x144>
        pclk = (uint32_t) HSI_VALUE;
 8002196:	4a35      	ldr	r2, [pc, #212]	@ (800226c <UART_SetConfig+0x278>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002198:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800219a:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <UART_SetConfig+0x27c>)
 800219c:	0049      	lsls	r1, r1, #1
 800219e:	0010      	movs	r0, r2
 80021a0:	5ac9      	ldrh	r1, [r1, r3]
 80021a2:	f7fd ffdf 	bl	8000164 <__udivsi3>
 80021a6:	6865      	ldr	r5, [r4, #4]
 80021a8:	0040      	lsls	r0, r0, #1
 80021aa:	086b      	lsrs	r3, r5, #1
 80021ac:	18c0      	adds	r0, r0, r3
 80021ae:	0029      	movs	r1, r5
 80021b0:	f7fd ffd8 	bl	8000164 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021b4:	0002      	movs	r2, r0
 80021b6:	4b31      	ldr	r3, [pc, #196]	@ (800227c <UART_SetConfig+0x288>)
 80021b8:	3a10      	subs	r2, #16
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d8b6      	bhi.n	800212c <UART_SetConfig+0x138>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021be:	230f      	movs	r3, #15
 80021c0:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021c2:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021c4:	439a      	bics	r2, r3
 80021c6:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021c8:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80021ca:	6822      	ldr	r2, [r4, #0]
 80021cc:	4303      	orrs	r3, r0
 80021ce:	60d3      	str	r3, [r2, #12]
 80021d0:	e798      	b.n	8002104 <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 80021d2:	f7ff f91f 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80021d6:	e02b      	b.n	8002230 <UART_SetConfig+0x23c>
    switch (clocksource)
 80021d8:	2808      	cmp	r0, #8
 80021da:	d8a7      	bhi.n	800212c <UART_SetConfig+0x138>
 80021dc:	f7fd ffa4 	bl	8000128 <__gnu_thumb1_case_sqi>
 80021e0:	a605a616 	.word	0xa605a616
 80021e4:	a6a6a61c 	.word	0xa6a6a61c
 80021e8:	1f          	.byte	0x1f
 80021e9:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80021ea:	4820      	ldr	r0, [pc, #128]	@ (800226c <UART_SetConfig+0x278>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <UART_SetConfig+0x27c>)
 80021f0:	0052      	lsls	r2, r2, #1
 80021f2:	5ad1      	ldrh	r1, [r2, r3]
 80021f4:	f7fd ffb6 	bl	8000164 <__udivsi3>
 80021f8:	6865      	ldr	r5, [r4, #4]
 80021fa:	086b      	lsrs	r3, r5, #1
 80021fc:	18c0      	adds	r0, r0, r3
 80021fe:	0029      	movs	r1, r5
 8002200:	f7fd ffb0 	bl	8000164 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002204:	0002      	movs	r2, r0
 8002206:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <UART_SetConfig+0x288>)
 8002208:	3a10      	subs	r2, #16
 800220a:	e7bc      	b.n	8002186 <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK1Freq();
 800220c:	f7ff f9f0 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002210:	2800      	cmp	r0, #0
 8002212:	d100      	bne.n	8002216 <UART_SetConfig+0x222>
 8002214:	e776      	b.n	8002104 <UART_SetConfig+0x110>
 8002216:	e7e9      	b.n	80021ec <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002218:	f7ff f8fc 	bl	8001414 <HAL_RCC_GetSysClockFreq>
        break;
 800221c:	e7f8      	b.n	8002210 <UART_SetConfig+0x21c>
    switch (clocksource)
 800221e:	2080      	movs	r0, #128	@ 0x80
 8002220:	0200      	lsls	r0, r0, #8
 8002222:	e7e3      	b.n	80021ec <UART_SetConfig+0x1f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	429a      	cmp	r2, r3
 800222a:	d1ef      	bne.n	800220c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 800222c:	f7ff f9e0 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002230:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8002232:	d100      	bne.n	8002236 <UART_SetConfig+0x242>
 8002234:	e766      	b.n	8002104 <UART_SetConfig+0x110>
 8002236:	e7af      	b.n	8002198 <UART_SetConfig+0x1a4>
 8002238:	cfff69f3 	.word	0xcfff69f3
 800223c:	ffffcfff 	.word	0xffffcfff
 8002240:	40008000 	.word	0x40008000
 8002244:	40008400 	.word	0x40008400
 8002248:	11fff4ff 	.word	0x11fff4ff
 800224c:	40013800 	.word	0x40013800
 8002250:	40021000 	.word	0x40021000
 8002254:	40004400 	.word	0x40004400
 8002258:	40004800 	.word	0x40004800
 800225c:	40004c00 	.word	0x40004c00
 8002260:	40005000 	.word	0x40005000
 8002264:	40013c00 	.word	0x40013c00
 8002268:	00010001 	.word	0x00010001
 800226c:	00f42400 	.word	0x00f42400
 8002270:	0800400c 	.word	0x0800400c
 8002274:	fffffd00 	.word	0xfffffd00
 8002278:	000ffcff 	.word	0x000ffcff
 800227c:	0000ffef 	.word	0x0000ffef

08002280 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002280:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8002282:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002284:	071a      	lsls	r2, r3, #28
 8002286:	d506      	bpl.n	8002296 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002288:	6801      	ldr	r1, [r0, #0]
 800228a:	4c28      	ldr	r4, [pc, #160]	@ (800232c <UART_AdvFeatureConfig+0xac>)
 800228c:	684a      	ldr	r2, [r1, #4]
 800228e:	4022      	ands	r2, r4
 8002290:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002292:	4322      	orrs	r2, r4
 8002294:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002296:	07da      	lsls	r2, r3, #31
 8002298:	d506      	bpl.n	80022a8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800229a:	6801      	ldr	r1, [r0, #0]
 800229c:	4c24      	ldr	r4, [pc, #144]	@ (8002330 <UART_AdvFeatureConfig+0xb0>)
 800229e:	684a      	ldr	r2, [r1, #4]
 80022a0:	4022      	ands	r2, r4
 80022a2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80022a4:	4322      	orrs	r2, r4
 80022a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022a8:	079a      	lsls	r2, r3, #30
 80022aa:	d506      	bpl.n	80022ba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022ac:	6801      	ldr	r1, [r0, #0]
 80022ae:	4c21      	ldr	r4, [pc, #132]	@ (8002334 <UART_AdvFeatureConfig+0xb4>)
 80022b0:	684a      	ldr	r2, [r1, #4]
 80022b2:	4022      	ands	r2, r4
 80022b4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80022b6:	4322      	orrs	r2, r4
 80022b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022ba:	075a      	lsls	r2, r3, #29
 80022bc:	d506      	bpl.n	80022cc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022be:	6801      	ldr	r1, [r0, #0]
 80022c0:	4c1d      	ldr	r4, [pc, #116]	@ (8002338 <UART_AdvFeatureConfig+0xb8>)
 80022c2:	684a      	ldr	r2, [r1, #4]
 80022c4:	4022      	ands	r2, r4
 80022c6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80022c8:	4322      	orrs	r2, r4
 80022ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022cc:	06da      	lsls	r2, r3, #27
 80022ce:	d506      	bpl.n	80022de <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022d0:	6801      	ldr	r1, [r0, #0]
 80022d2:	4c1a      	ldr	r4, [pc, #104]	@ (800233c <UART_AdvFeatureConfig+0xbc>)
 80022d4:	688a      	ldr	r2, [r1, #8]
 80022d6:	4022      	ands	r2, r4
 80022d8:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80022da:	4322      	orrs	r2, r4
 80022dc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022de:	069a      	lsls	r2, r3, #26
 80022e0:	d506      	bpl.n	80022f0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022e2:	6801      	ldr	r1, [r0, #0]
 80022e4:	4c16      	ldr	r4, [pc, #88]	@ (8002340 <UART_AdvFeatureConfig+0xc0>)
 80022e6:	688a      	ldr	r2, [r1, #8]
 80022e8:	4022      	ands	r2, r4
 80022ea:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80022ec:	4322      	orrs	r2, r4
 80022ee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022f0:	065a      	lsls	r2, r3, #25
 80022f2:	d510      	bpl.n	8002316 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022f4:	6801      	ldr	r1, [r0, #0]
 80022f6:	4d13      	ldr	r5, [pc, #76]	@ (8002344 <UART_AdvFeatureConfig+0xc4>)
 80022f8:	684a      	ldr	r2, [r1, #4]
 80022fa:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80022fc:	402a      	ands	r2, r5
 80022fe:	4322      	orrs	r2, r4
 8002300:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	0352      	lsls	r2, r2, #13
 8002306:	4294      	cmp	r4, r2
 8002308:	d105      	bne.n	8002316 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800230a:	684a      	ldr	r2, [r1, #4]
 800230c:	4c0e      	ldr	r4, [pc, #56]	@ (8002348 <UART_AdvFeatureConfig+0xc8>)
 800230e:	4022      	ands	r2, r4
 8002310:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002312:	4322      	orrs	r2, r4
 8002314:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002316:	061b      	lsls	r3, r3, #24
 8002318:	d506      	bpl.n	8002328 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800231a:	6802      	ldr	r2, [r0, #0]
 800231c:	490b      	ldr	r1, [pc, #44]	@ (800234c <UART_AdvFeatureConfig+0xcc>)
 800231e:	6853      	ldr	r3, [r2, #4]
 8002320:	400b      	ands	r3, r1
 8002322:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002324:	430b      	orrs	r3, r1
 8002326:	6053      	str	r3, [r2, #4]
}
 8002328:	bd30      	pop	{r4, r5, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	ffff7fff 	.word	0xffff7fff
 8002330:	fffdffff 	.word	0xfffdffff
 8002334:	fffeffff 	.word	0xfffeffff
 8002338:	fffbffff 	.word	0xfffbffff
 800233c:	ffffefff 	.word	0xffffefff
 8002340:	ffffdfff 	.word	0xffffdfff
 8002344:	ffefffff 	.word	0xffefffff
 8002348:	ff9fffff 	.word	0xff9fffff
 800234c:	fff7ffff 	.word	0xfff7ffff

08002350 <UART_WaitOnFlagUntilTimeout>:
{
 8002350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002352:	0004      	movs	r4, r0
 8002354:	000d      	movs	r5, r1
 8002356:	0017      	movs	r7, r2
 8002358:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	69d3      	ldr	r3, [r2, #28]
 800235e:	402b      	ands	r3, r5
 8002360:	1b5b      	subs	r3, r3, r5
 8002362:	4259      	negs	r1, r3
 8002364:	414b      	adcs	r3, r1
 8002366:	42bb      	cmp	r3, r7
 8002368:	d001      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800236a:	2000      	movs	r0, #0
 800236c:	e026      	b.n	80023bc <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800236e:	9b08      	ldr	r3, [sp, #32]
 8002370:	3301      	adds	r3, #1
 8002372:	d0f3      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7fe fc82 	bl	8000c7c <HAL_GetTick>
 8002378:	9b00      	ldr	r3, [sp, #0]
 800237a:	1ac0      	subs	r0, r0, r3
 800237c:	9b08      	ldr	r3, [sp, #32]
 800237e:	4298      	cmp	r0, r3
 8002380:	d82d      	bhi.n	80023de <UART_WaitOnFlagUntilTimeout+0x8e>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02b      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x8e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	0752      	lsls	r2, r2, #29
 800238c:	d5e5      	bpl.n	800235a <UART_WaitOnFlagUntilTimeout+0xa>
 800238e:	002a      	movs	r2, r5
 8002390:	2140      	movs	r1, #64	@ 0x40
 8002392:	3a40      	subs	r2, #64	@ 0x40
 8002394:	438a      	bics	r2, r1
 8002396:	d0e0      	beq.n	800235a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	2608      	movs	r6, #8
 800239c:	0011      	movs	r1, r2
 800239e:	4031      	ands	r1, r6
 80023a0:	9101      	str	r1, [sp, #4]
 80023a2:	4232      	tst	r2, r6
 80023a4:	d00b      	beq.n	80023be <UART_WaitOnFlagUntilTimeout+0x6e>
          UART_EndRxTransfer(huart);
 80023a6:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023a8:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80023aa:	f7ff fdf1 	bl	8001f90 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023ae:	0023      	movs	r3, r4
 80023b0:	3390      	adds	r3, #144	@ 0x90
 80023b2:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 80023b4:	2300      	movs	r3, #0
          return HAL_ERROR;
 80023b6:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80023b8:	3484      	adds	r4, #132	@ 0x84
 80023ba:	7023      	strb	r3, [r4, #0]
}
 80023bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023be:	2280      	movs	r2, #128	@ 0x80
 80023c0:	69d9      	ldr	r1, [r3, #28]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	4211      	tst	r1, r2
 80023c6:	d0c8      	beq.n	800235a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023c8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80023ca:	0020      	movs	r0, r4
 80023cc:	f7ff fde0 	bl	8001f90 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023d0:	0023      	movs	r3, r4
 80023d2:	2220      	movs	r2, #32
 80023d4:	3390      	adds	r3, #144	@ 0x90
 80023d6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 80023d8:	9b01      	ldr	r3, [sp, #4]
 80023da:	3484      	adds	r4, #132	@ 0x84
 80023dc:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80023de:	2003      	movs	r0, #3
 80023e0:	e7ec      	b.n	80023bc <UART_WaitOnFlagUntilTimeout+0x6c>

080023e2 <HAL_UART_Transmit>:
{
 80023e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e4:	0017      	movs	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80023e6:	0002      	movs	r2, r0
{
 80023e8:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_READY)
 80023ea:	3288      	adds	r2, #136	@ 0x88
{
 80023ec:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80023ee:	6813      	ldr	r3, [r2, #0]
{
 80023f0:	0004      	movs	r4, r0
 80023f2:	000d      	movs	r5, r1
    return HAL_BUSY;
 80023f4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d139      	bne.n	800246e <HAL_UART_Transmit+0x8c>
      return  HAL_ERROR;
 80023fa:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80023fc:	2900      	cmp	r1, #0
 80023fe:	d036      	beq.n	800246e <HAL_UART_Transmit+0x8c>
 8002400:	2f00      	cmp	r7, #0
 8002402:	d034      	beq.n	800246e <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	68a1      	ldr	r1, [r4, #8]
 8002408:	015b      	lsls	r3, r3, #5
 800240a:	4299      	cmp	r1, r3
 800240c:	d104      	bne.n	8002418 <HAL_UART_Transmit+0x36>
 800240e:	6923      	ldr	r3, [r4, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002414:	4205      	tst	r5, r0
 8002416:	d12a      	bne.n	800246e <HAL_UART_Transmit+0x8c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	0023      	movs	r3, r4
 800241a:	2600      	movs	r6, #0
 800241c:	3390      	adds	r3, #144	@ 0x90
 800241e:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002420:	2321      	movs	r3, #33	@ 0x21
 8002422:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002424:	f7fe fc2a 	bl	8000c7c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002428:	0023      	movs	r3, r4
 800242a:	3354      	adds	r3, #84	@ 0x54
 800242c:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800242e:	3302      	adds	r3, #2
 8002430:	9303      	str	r3, [sp, #12]
 8002432:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002438:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243a:	015b      	lsls	r3, r3, #5
 800243c:	429a      	cmp	r2, r3
 800243e:	d104      	bne.n	800244a <HAL_UART_Transmit+0x68>
 8002440:	6923      	ldr	r3, [r4, #16]
 8002442:	42b3      	cmp	r3, r6
 8002444:	d101      	bne.n	800244a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002446:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002448:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800244a:	0023      	movs	r3, r4
 800244c:	3356      	adds	r3, #86	@ 0x56
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29a      	uxth	r2, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	9b05      	ldr	r3, [sp, #20]
 8002458:	0020      	movs	r0, r4
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2140      	movs	r1, #64	@ 0x40
 800245e:	9b04      	ldr	r3, [sp, #16]
 8002460:	f7ff ff76 	bl	8002350 <UART_WaitOnFlagUntilTimeout>
 8002464:	2320      	movs	r3, #32
 8002466:	3488      	adds	r4, #136	@ 0x88
      huart->gState = HAL_UART_STATE_READY;
 8002468:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246a:	2800      	cmp	r0, #0
 800246c:	d10e      	bne.n	800248c <HAL_UART_Transmit+0xaa>
}
 800246e:	b007      	add	sp, #28
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	9b05      	ldr	r3, [sp, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2180      	movs	r1, #128	@ 0x80
 800247a:	0020      	movs	r0, r4
 800247c:	9b04      	ldr	r3, [sp, #16]
 800247e:	f7ff ff67 	bl	8002350 <UART_WaitOnFlagUntilTimeout>
 8002482:	2800      	cmp	r0, #0
 8002484:	d004      	beq.n	8002490 <HAL_UART_Transmit+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8002486:	2320      	movs	r3, #32
 8002488:	3488      	adds	r4, #136	@ 0x88
 800248a:	6023      	str	r3, [r4, #0]
        return HAL_TIMEOUT;
 800248c:	2003      	movs	r0, #3
 800248e:	e7ee      	b.n	800246e <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002490:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002492:	2d00      	cmp	r5, #0
 8002494:	d10b      	bne.n	80024ae <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002496:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002498:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800249a:	05db      	lsls	r3, r3, #23
 800249c:	0ddb      	lsrs	r3, r3, #23
 800249e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	9a03      	ldr	r2, [sp, #12]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8013      	strh	r3, [r2, #0]
 80024ac:	e7cd      	b.n	800244a <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ae:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80024b0:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b2:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80024b4:	e7f4      	b.n	80024a0 <HAL_UART_Transmit+0xbe>
	...

080024b8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b8:	0003      	movs	r3, r0
{
 80024ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	2600      	movs	r6, #0
{
 80024be:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	3390      	adds	r3, #144	@ 0x90
 80024c2:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 80024c4:	f7fe fbda 	bl	8000c7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024c8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80024ca:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	071b      	lsls	r3, r3, #28
 80024d0:	d51f      	bpl.n	8002512 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <UART_CheckIdleState+0xc0>)
 80024d6:	0032      	movs	r2, r6
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	0389      	lsls	r1, r1, #14
 80024dc:	0003      	movs	r3, r0
 80024de:	0020      	movs	r0, r4
 80024e0:	f7ff ff36 	bl	8002350 <UART_WaitOnFlagUntilTimeout>
 80024e4:	42b0      	cmp	r0, r6
 80024e6:	d014      	beq.n	8002512 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ec:	2301      	movs	r3, #1
 80024ee:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80024f2:	2080      	movs	r0, #128	@ 0x80
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	4383      	bics	r3, r0
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002500:	0023      	movs	r3, r4
 8002502:	2220      	movs	r2, #32
 8002504:	3388      	adds	r3, #136	@ 0x88
 8002506:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8002508:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800250a:	2300      	movs	r3, #0
 800250c:	3484      	adds	r4, #132	@ 0x84
 800250e:	7023      	strb	r3, [r4, #0]
}
 8002510:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002512:	0026      	movs	r6, r4
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	368c      	adds	r6, #140	@ 0x8c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	075b      	lsls	r3, r3, #29
 800251c:	d523      	bpl.n	8002566 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <UART_CheckIdleState+0xc0>)
 8002522:	2200      	movs	r2, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	0020      	movs	r0, r4
 8002528:	002b      	movs	r3, r5
 800252a:	03c9      	lsls	r1, r1, #15
 800252c:	f7ff ff10 	bl	8002350 <UART_WaitOnFlagUntilTimeout>
 8002530:	2800      	cmp	r0, #0
 8002532:	d018      	beq.n	8002566 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002534:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002538:	2201      	movs	r2, #1
 800253a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	4d0e      	ldr	r5, [pc, #56]	@ (800257c <UART_CheckIdleState+0xc4>)
 8002542:	680b      	ldr	r3, [r1, #0]
 8002544:	402b      	ands	r3, r5
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002550:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002554:	6821      	ldr	r1, [r4, #0]
 8002556:	688b      	ldr	r3, [r1, #8]
 8002558:	4393      	bics	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
 800255c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002560:	2320      	movs	r3, #32
 8002562:	6033      	str	r3, [r6, #0]
      return HAL_TIMEOUT;
 8002564:	e7d0      	b.n	8002508 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8002566:	0023      	movs	r3, r4
 8002568:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800256c:	3388      	adds	r3, #136	@ 0x88
 800256e:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002572:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002574:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8002576:	e7c8      	b.n	800250a <UART_CheckIdleState+0x52>
 8002578:	01ffffff 	.word	0x01ffffff
 800257c:	fffffedf 	.word	0xfffffedf

08002580 <HAL_UART_Init>:
{
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002586:	2001      	movs	r0, #1
}
 8002588:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800258a:	0005      	movs	r5, r0
 800258c:	3588      	adds	r5, #136	@ 0x88
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d104      	bne.n	800259e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8002594:	0002      	movs	r2, r0
 8002596:	3284      	adds	r2, #132	@ 0x84
 8002598:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800259a:	f7fe fa5f 	bl	8000a5c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800259e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80025a0:	2101      	movs	r1, #1
 80025a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025a4:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	438b      	bics	r3, r1
 80025aa:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80025b2:	0020      	movs	r0, r4
 80025b4:	f7ff fe64 	bl	8002280 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025b8:	0020      	movs	r0, r4
 80025ba:	f7ff fd1b 	bl	8001ff4 <UART_SetConfig>
 80025be:	2801      	cmp	r0, #1
 80025c0:	d0e1      	beq.n	8002586 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	4907      	ldr	r1, [pc, #28]	@ (80025e4 <HAL_UART_Init+0x64>)
 80025c6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80025c8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025cc:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	438a      	bics	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025d6:	2201      	movs	r2, #1
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80025de:	f7ff ff6b 	bl	80024b8 <UART_CheckIdleState>
 80025e2:	e7d1      	b.n	8002588 <HAL_UART_Init+0x8>
 80025e4:	ffffb7ff 	.word	0xffffb7ff

080025e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80025e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ea:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80025ec:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80025ee:	0004      	movs	r4, r0
 80025f0:	376a      	adds	r7, #106	@ 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d104      	bne.n	8002600 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 80025f6:	2001      	movs	r0, #1
 80025f8:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 80025fa:	3468      	adds	r4, #104	@ 0x68
 80025fc:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80025fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002600:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002602:	4e0b      	ldr	r6, [pc, #44]	@ (8002630 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002604:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002606:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002608:	4d0a      	ldr	r5, [pc, #40]	@ (8002634 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800260a:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800260c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800260e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002610:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002612:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002614:	f7fd fe30 	bl	8000278 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002618:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800261a:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800261c:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800261e:	0f5b      	lsrs	r3, r3, #29
 8002620:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002622:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002624:	00c0      	lsls	r0, r0, #3
 8002626:	f7fd fe27 	bl	8000278 <__divsi3>
 800262a:	b280      	uxth	r0, r0
}
 800262c:	e7e5      	b.n	80025fa <UARTEx_SetNbDataToProcess+0x12>
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	0800402c 	.word	0x0800402c
 8002634:	08004024 	.word	0x08004024

08002638 <HAL_UARTEx_DisableFifoMode>:
{
 8002638:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800263a:	0004      	movs	r4, r0
 800263c:	3484      	adds	r4, #132	@ 0x84
 800263e:	7822      	ldrb	r2, [r4, #0]
{
 8002640:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8002642:	2002      	movs	r0, #2
 8002644:	2a01      	cmp	r2, #1
 8002646:	d011      	beq.n	800266c <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002648:	001d      	movs	r5, r3
 800264a:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800264c:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800264e:	3588      	adds	r5, #136	@ 0x88
 8002650:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002656:	6810      	ldr	r0, [r2, #0]
 8002658:	43b0      	bics	r0, r6
 800265a:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <HAL_UARTEx_DisableFifoMode+0x38>)
 800265e:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002660:	2000      	movs	r0, #0
 8002662:	6658      	str	r0, [r3, #100]	@ 0x64
  huart->gState = HAL_UART_STATE_READY;
 8002664:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002666:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002668:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 800266a:	7020      	strb	r0, [r4, #0]
}
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	dfffffff 	.word	0xdfffffff

08002674 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002676:	0005      	movs	r5, r0
 8002678:	3584      	adds	r5, #132	@ 0x84
{
 800267a:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 800267c:	7829      	ldrb	r1, [r5, #0]
 800267e:	2202      	movs	r2, #2
 8002680:	2901      	cmp	r1, #1
 8002682:	d015      	beq.n	80026b0 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8002686:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002688:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800268a:	3688      	adds	r6, #136	@ 0x88
 800268c:	3222      	adds	r2, #34	@ 0x22
 800268e:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002690:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	438a      	bics	r2, r1
 8002696:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002698:	68a1      	ldr	r1, [r4, #8]
 800269a:	00c9      	lsls	r1, r1, #3
 800269c:	08c9      	lsrs	r1, r1, #3
 800269e:	4319      	orrs	r1, r3
 80026a0:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 80026a2:	f7ff ffa1 	bl	80025e8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80026a6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80026a8:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026aa:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026ac:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80026ae:	702a      	strb	r2, [r5, #0]
}
 80026b0:	0010      	movs	r0, r2
 80026b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026b4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80026b6:	0005      	movs	r5, r0
 80026b8:	3584      	adds	r5, #132	@ 0x84
{
 80026ba:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80026bc:	7829      	ldrb	r1, [r5, #0]
 80026be:	2302      	movs	r3, #2
 80026c0:	2901      	cmp	r1, #1
 80026c2:	d015      	beq.n	80026f0 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 80026c4:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 80026c6:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026c8:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026ca:	3688      	adds	r6, #136	@ 0x88
 80026cc:	3322      	adds	r3, #34	@ 0x22
 80026ce:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026d0:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	438b      	bics	r3, r1
 80026d6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80026d8:	68a1      	ldr	r1, [r4, #8]
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 80026dc:	4019      	ands	r1, r3
 80026de:	4311      	orrs	r1, r2
 80026e0:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 80026e2:	f7ff ff81 	bl	80025e8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80026e6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80026e8:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 80026ea:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80026ec:	2300      	movs	r3, #0
 80026ee:	702b      	strb	r3, [r5, #0]
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f4:	f1ffffff 	.word	0xf1ffffff

080026f8 <spi_iface_ncp_ready_high>:
	if (ret < 0 && resp_buf) free(resp_buf);
	return ret;
}

void spi_iface_ncp_ready_high(void)
{
 80026f8:	b510      	push	{r4, lr}
	if (spi_iface_lock == 0)
 80026fa:	4b04      	ldr	r3, [pc, #16]	@ (800270c <spi_iface_ncp_ready_high+0x14>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <spi_iface_ncp_ready_high+0x10>
	{
		wifi_iface_report_cb();
 8002702:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <spi_iface_ncp_ready_high+0x18>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4798      	blx	r3
	}
}
 8002708:	bd10      	pop	{r4, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	2000000c 	.word	0x2000000c
 8002710:	2000018c 	.word	0x2000018c

08002714 <spi_iface_ncp_ready_low>:

void spi_iface_ncp_ready_low(void)
{
}
 8002714:	4770      	bx	lr

08002716 <wait_for_rdy>:

/* private function definitions */

int32_t wait_for_rdy(uint32_t timeout)
{
 8002716:	b570      	push	{r4, r5, r6, lr}
 8002718:	0005      	movs	r5, r0
	uint32_t tickstart = HAL_GetTick();
 800271a:	f7fe faaf 	bl	8000c7c <HAL_GetTick>
 800271e:	0004      	movs	r4, r0
	while (spi_port_is_ready() == 0)
 8002720:	f000 fad4 	bl	8002ccc <spi_port_is_ready>
 8002724:	2800      	cmp	r0, #0
 8002726:	d001      	beq.n	800272c <wait_for_rdy+0x16>
		{
			return -1;
		}
	}

	return 0;
 8002728:	2000      	movs	r0, #0
}
 800272a:	bd70      	pop	{r4, r5, r6, pc}
		if ((HAL_GetTick() - tickstart) > timeout)
 800272c:	f7fe faa6 	bl	8000c7c <HAL_GetTick>
 8002730:	1b00      	subs	r0, r0, r4
 8002732:	42a8      	cmp	r0, r5
 8002734:	d9f4      	bls.n	8002720 <wait_for_rdy+0xa>
			return -1;
 8002736:	2001      	movs	r0, #1
 8002738:	4240      	negs	r0, r0
 800273a:	e7f6      	b.n	800272a <wait_for_rdy+0x14>

0800273c <spi_iface_get_cmd_type>:
//    while (spi_port_is_ready() == 1) {}
    return ret;
}

spi_iface_cmd_type_t spi_iface_get_cmd_type(const char *cmd)
{
 800273c:	b570      	push	{r4, r5, r6, lr}
	spi_iface_cmd_type_t ret = CMD_EXECUTE;

	const char *eq = strchr(cmd, '=');
 800273e:	213d      	movs	r1, #61	@ 0x3d
{
 8002740:	0004      	movs	r4, r0
	const char *eq = strchr(cmd, '=');
 8002742:	f000 fe3d 	bl	80033c0 <strchr>
	const char *q = strchr(cmd, '?');

	if (eq) {
		// Found '='
		ret = CMD_SET;
 8002746:	2501      	movs	r5, #1
	const char *eq = strchr(cmd, '=');
 8002748:	1e06      	subs	r6, r0, #0
	if (eq) {
 800274a:	d127      	bne.n	800279c <spi_iface_get_cmd_type+0x60>
	const char *q = strchr(cmd, '?');
 800274c:	213f      	movs	r1, #63	@ 0x3f
 800274e:	0020      	movs	r0, r4
 8002750:	f000 fe36 	bl	80033c0 <strchr>
	} else if (q) {
		// Found '?'
		ret = CMD_QUERY;
 8002754:	0035      	movs	r5, r6
	} else if (q) {
 8002756:	2800      	cmp	r0, #0
 8002758:	d120      	bne.n	800279c <spi_iface_get_cmd_type+0x60>
	} else {
		// Neither '=' nor '?' found, check for subset of SET without '=' and parameters
		if (strcmp(cmd, "AT+EFUSE-CFM") == 0) ret = CMD_SET;
 800275a:	0020      	movs	r0, r4
 800275c:	4910      	ldr	r1, [pc, #64]	@ (80027a0 <spi_iface_get_cmd_type+0x64>)
 800275e:	f7fd fcd1 	bl	8000104 <strcmp>
		ret = CMD_SET;
 8002762:	3501      	adds	r5, #1
		if (strcmp(cmd, "AT+EFUSE-CFM") == 0) ret = CMD_SET;
 8002764:	2800      	cmp	r0, #0
 8002766:	d019      	beq.n	800279c <spi_iface_get_cmd_type+0x60>
		else if (strcmp(cmd, "AT+OTAFIN") == 0) ret = CMD_SET;
 8002768:	0020      	movs	r0, r4
 800276a:	490e      	ldr	r1, [pc, #56]	@ (80027a4 <spi_iface_get_cmd_type+0x68>)
 800276c:	f7fd fcca 	bl	8000104 <strcmp>
 8002770:	2800      	cmp	r0, #0
 8002772:	d013      	beq.n	800279c <spi_iface_get_cmd_type+0x60>
		else if (strcmp(cmd, "AT+IPERFSTOP") == 0) ret = CMD_SET;
 8002774:	0020      	movs	r0, r4
 8002776:	490c      	ldr	r1, [pc, #48]	@ (80027a8 <spi_iface_get_cmd_type+0x6c>)
 8002778:	f7fd fcc4 	bl	8000104 <strcmp>
 800277c:	2800      	cmp	r0, #0
 800277e:	d00d      	beq.n	800279c <spi_iface_get_cmd_type+0x60>
		else if (strcmp(cmd, "AT+SLCLDTIM") == 0) ret = CMD_SET;
 8002780:	0020      	movs	r0, r4
 8002782:	490a      	ldr	r1, [pc, #40]	@ (80027ac <spi_iface_get_cmd_type+0x70>)
 8002784:	f7fd fcbe 	bl	8000104 <strcmp>
 8002788:	2800      	cmp	r0, #0
 800278a:	d007      	beq.n	800279c <spi_iface_get_cmd_type+0x60>
		else if (strcmp(cmd, "AT+TWT_SLEEP") == 0) ret = CMD_SET;
 800278c:	0020      	movs	r0, r4
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <spi_iface_get_cmd_type+0x74>)
 8002790:	f7fd fcb8 	bl	8000104 <strcmp>
	spi_iface_cmd_type_t ret = CMD_EXECUTE;
 8002794:	1e43      	subs	r3, r0, #1
 8002796:	4198      	sbcs	r0, r3
 8002798:	0005      	movs	r5, r0
 800279a:	3501      	adds	r5, #1
	}

	return ret;
}
 800279c:	0028      	movs	r0, r5
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	08003e91 	.word	0x08003e91
 80027a4:	08003e9e 	.word	0x08003e9e
 80027a8:	08003ea8 	.word	0x08003ea8
 80027ac:	08003e1e 	.word	0x08003e1e
 80027b0:	08003eb5 	.word	0x08003eb5

080027b4 <fill_buffer_data>:
    buf[1] = (SPI_HEADER_MAGIC_CODE >> 8) & 0xFF;
    buf[2] = (unsigned char)data_len;
}

void fill_buffer_data(void* buffer, const void* data, uint16_t data_len)
{
 80027b4:	b510      	push	{r4, lr}
	unsigned char* buf = (unsigned char*)buffer;
	memcpy(buf + SPI_MIN_BUFFER_LEN, data, data_len);
 80027b6:	3008      	adds	r0, #8
 80027b8:	f000 fa3a 	bl	8002c30 <memcpy>
}
 80027bc:	bd10      	pop	{r4, pc}

080027be <spi_iface_txRx>:
{
 80027be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027c0:	9001      	str	r0, [sp, #4]
    if (*tx != NULL) { free(*tx); *tx = NULL; }
 80027c2:	6810      	ldr	r0, [r2, #0]
{
 80027c4:	000e      	movs	r6, r1
 80027c6:	0014      	movs	r4, r2
 80027c8:	001d      	movs	r5, r3
    if (*tx != NULL) { free(*tx); *tx = NULL; }
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d003      	beq.n	80027d6 <spi_iface_txRx+0x18>
 80027ce:	f000 facb 	bl	8002d68 <free>
 80027d2:	2300      	movs	r3, #0
 80027d4:	6023      	str	r3, [r4, #0]
    if (*rx != NULL) { free(*rx); *rx = NULL; }
 80027d6:	6828      	ldr	r0, [r5, #0]
 80027d8:	2800      	cmp	r0, #0
 80027da:	d003      	beq.n	80027e4 <spi_iface_txRx+0x26>
 80027dc:	f000 fac4 	bl	8002d68 <free>
 80027e0:	2300      	movs	r3, #0
 80027e2:	602b      	str	r3, [r5, #0]
    if (*rx_requested != NULL) { free(*rx_requested); *rx_requested = NULL; }
 80027e4:	9b08      	ldr	r3, [sp, #32]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d004      	beq.n	80027f6 <spi_iface_txRx+0x38>
 80027ec:	f000 fabc 	bl	8002d68 <free>
 80027f0:	2300      	movs	r3, #0
 80027f2:	9a08      	ldr	r2, [sp, #32]
 80027f4:	6013      	str	r3, [r2, #0]
    else buffer_len = SPI_MIN_BUFFER_LEN + data_len;
 80027f6:	0037      	movs	r7, r6
 80027f8:	3708      	adds	r7, #8
 80027fa:	b2bf      	uxth	r7, r7
    *tx = calloc(buffer_len, 1);
 80027fc:	2101      	movs	r1, #1
 80027fe:	0038      	movs	r0, r7
 8002800:	f000 fa7a 	bl	8002cf8 <calloc>
    *rx = calloc(buffer_len, 1);
 8002804:	2101      	movs	r1, #1
    *tx = calloc(buffer_len, 1);
 8002806:	6020      	str	r0, [r4, #0]
    *rx = calloc(buffer_len, 1);
 8002808:	0038      	movs	r0, r7
 800280a:	f000 fa75 	bl	8002cf8 <calloc>
 800280e:	6028      	str	r0, [r5, #0]
    if (*tx == NULL)
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d034      	beq.n	8002880 <spi_iface_txRx+0xc2>
    if (*rx == NULL)
 8002816:	2800      	cmp	r0, #0
 8002818:	d034      	beq.n	8002884 <spi_iface_txRx+0xc6>
    buf[0] = SPI_HEADER_MAGIC_CODE & 0xFF;
 800281a:	22aa      	movs	r2, #170	@ 0xaa
 800281c:	701a      	strb	r2, [r3, #0]
    buf[1] = (SPI_HEADER_MAGIC_CODE >> 8) & 0xFF;
 800281e:	3a55      	subs	r2, #85	@ 0x55
 8002820:	705a      	strb	r2, [r3, #1]
    buf[2] = (unsigned char)data_len;
 8002822:	709e      	strb	r6, [r3, #2]
    if (data_len != 0) fill_buffer_data(*tx, tx_data, data_len);
 8002824:	2e00      	cmp	r6, #0
 8002826:	d004      	beq.n	8002832 <spi_iface_txRx+0x74>
 8002828:	0032      	movs	r2, r6
 800282a:	9901      	ldr	r1, [sp, #4]
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	f7ff ffc1 	bl	80027b4 <fill_buffer_data>
    spi_port_set_cs(1);
 8002832:	2001      	movs	r0, #1
 8002834:	f000 fa52 	bl	8002cdc <spi_port_set_cs>
    while (spi_port_is_ready() == 0) {}
 8002838:	f000 fa48 	bl	8002ccc <spi_port_is_ready>
 800283c:	2800      	cmp	r0, #0
 800283e:	d0fb      	beq.n	8002838 <spi_iface_txRx+0x7a>
    ret = spi_port_transfer(*tx, *rx, buffer_len);
 8002840:	003a      	movs	r2, r7
 8002842:	6829      	ldr	r1, [r5, #0]
 8002844:	6820      	ldr	r0, [r4, #0]
 8002846:	f000 fa2b 	bl	8002ca0 <spi_port_transfer>
 800284a:	1e06      	subs	r6, r0, #0
    if (ret != 0)
 800284c:	d11c      	bne.n	8002888 <spi_iface_txRx+0xca>
    rx_request_len = ((uint8_t*)(*rx))[2];
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	789c      	ldrb	r4, [r3, #2]
    if (rx_request_len > 0)
 8002852:	2c00      	cmp	r4, #0
 8002854:	d00f      	beq.n	8002876 <spi_iface_txRx+0xb8>
        *rx_requested = calloc(rx_request_len, 1);
 8002856:	2101      	movs	r1, #1
 8002858:	0020      	movs	r0, r4
 800285a:	f000 fa4d 	bl	8002cf8 <calloc>
 800285e:	9b08      	ldr	r3, [sp, #32]
 8002860:	1e01      	subs	r1, r0, #0
 8002862:	6018      	str	r0, [r3, #0]
        if (*rx_requested == NULL)
 8002864:	d012      	beq.n	800288c <spi_iface_txRx+0xce>
        ret = spi_port_transfer(NULL, *rx_requested, rx_request_len);
 8002866:	0022      	movs	r2, r4
 8002868:	0030      	movs	r0, r6
 800286a:	f000 fa19 	bl	8002ca0 <spi_port_transfer>
        if (ret != 0)
 800286e:	2800      	cmp	r0, #0
 8002870:	d001      	beq.n	8002876 <spi_iface_txRx+0xb8>
            ret = -5;
 8002872:	2405      	movs	r4, #5
            ret = -4;
 8002874:	4264      	negs	r4, r4
    spi_port_set_cs(0);
 8002876:	2000      	movs	r0, #0
 8002878:	f000 fa30 	bl	8002cdc <spi_port_set_cs>
}
 800287c:	0020      	movs	r0, r4
 800287e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ret = -1;
 8002880:	2401      	movs	r4, #1
 8002882:	e7f7      	b.n	8002874 <spi_iface_txRx+0xb6>
        ret = -2;
 8002884:	2402      	movs	r4, #2
 8002886:	e7f5      	b.n	8002874 <spi_iface_txRx+0xb6>
        ret = -3;
 8002888:	2403      	movs	r4, #3
 800288a:	e7f3      	b.n	8002874 <spi_iface_txRx+0xb6>
            ret = -4;
 800288c:	2404      	movs	r4, #4
 800288e:	e7f1      	b.n	8002874 <spi_iface_txRx+0xb6>

08002890 <spi_iface_init>:
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
	wifi_iface_report_cb = (wifi_iface_report_cb_t)cb;
 8002892:	4b3d      	ldr	r3, [pc, #244]	@ (8002988 <spi_iface_init+0xf8>)
{
 8002894:	b08b      	sub	sp, #44	@ 0x2c
    void *tx = NULL, *rx = NULL, *rx_requested = NULL;
 8002896:	2500      	movs	r5, #0
	wifi_iface_report_cb = (wifi_iface_report_cb_t)cb;
 8002898:	6018      	str	r0, [r3, #0]
	spi_iface_lock = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	4f3b      	ldr	r7, [pc, #236]	@ (800298c <spi_iface_init+0xfc>)
    void *tx = NULL, *rx = NULL, *rx_requested = NULL;
 800289e:	9507      	str	r5, [sp, #28]
 80028a0:	9508      	str	r5, [sp, #32]
 80028a2:	9509      	str	r5, [sp, #36]	@ 0x24
	spi_iface_lock = 1;
 80028a4:	703b      	strb	r3, [r7, #0]
	spi_port_init();
 80028a6:	f000 f9f1 	bl	8002c8c <spi_port_init>
	if(wait_for_rdy(SPI_IFACE_TIMEOUT_INIT_MS) < 0) {ret = -1; goto _err;}
 80028aa:	4839      	ldr	r0, [pc, #228]	@ (8002990 <spi_iface_init+0x100>)
 80028ac:	f7ff ff33 	bl	8002716 <wait_for_rdy>
 80028b0:	42a8      	cmp	r0, r5
 80028b2:	da10      	bge.n	80028d6 <spi_iface_init+0x46>
 80028b4:	2401      	movs	r4, #1
 80028b6:	4264      	negs	r4, r4
	spi_iface_lock = 0;
 80028b8:	2200      	movs	r2, #0
 80028ba:	4b34      	ldr	r3, [pc, #208]	@ (800298c <spi_iface_init+0xfc>)
	free(tx);
 80028bc:	9807      	ldr	r0, [sp, #28]
	spi_iface_lock = 0;
 80028be:	701a      	strb	r2, [r3, #0]
	free(tx);
 80028c0:	f000 fa52 	bl	8002d68 <free>
	free(rx);
 80028c4:	9808      	ldr	r0, [sp, #32]
 80028c6:	f000 fa4f 	bl	8002d68 <free>
	free(rx_requested);
 80028ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028cc:	f000 fa4c 	bl	8002d68 <free>
}
 80028d0:	0020      	movs	r0, r4
 80028d2:	b00b      	add	sp, #44	@ 0x2c
 80028d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_requested);
 80028d6:	ae09      	add	r6, sp, #36	@ 0x24
 80028d8:	0029      	movs	r1, r5
 80028da:	0028      	movs	r0, r5
 80028dc:	9600      	str	r6, [sp, #0]
 80028de:	ab08      	add	r3, sp, #32
 80028e0:	aa07      	add	r2, sp, #28
 80028e2:	f7ff ff6c 	bl	80027be <spi_iface_txRx>
 80028e6:	1e04      	subs	r4, r0, #0
	if (ret < 0)
 80028e8:	da04      	bge.n	80028f4 <spi_iface_init+0x64>
		printf("Err: spi_iface_txRx = %d\n", (int)ret);
 80028ea:	0021      	movs	r1, r4
 80028ec:	4829      	ldr	r0, [pc, #164]	@ (8002994 <spi_iface_init+0x104>)
 80028ee:	f000 fbf5 	bl	80030dc <iprintf>
		goto _err;
 80028f2:	e7e1      	b.n	80028b8 <spi_iface_init+0x28>
        printf("IN: ");
 80028f4:	4b28      	ldr	r3, [pc, #160]	@ (8002998 <spi_iface_init+0x108>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	f000 fbef 	bl	80030dc <iprintf>
        printf("%.*s", (int)ret, (char *)rx_requested);
 80028fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002900:	0021      	movs	r1, r4
 8002902:	9303      	str	r3, [sp, #12]
 8002904:	4b25      	ldr	r3, [pc, #148]	@ (800299c <spi_iface_init+0x10c>)
 8002906:	9a03      	ldr	r2, [sp, #12]
 8002908:	0018      	movs	r0, r3
 800290a:	9305      	str	r3, [sp, #20]
 800290c:	f000 fbe6 	bl	80030dc <iprintf>
	ret = strncmp((const char *)rx_requested, "\r\nready\r\n", 9);
 8002910:	2209      	movs	r2, #9
 8002912:	4923      	ldr	r1, [pc, #140]	@ (80029a0 <spi_iface_init+0x110>)
 8002914:	9803      	ldr	r0, [sp, #12]
 8002916:	f000 fd61 	bl	80033dc <strncmp>
 800291a:	1e04      	subs	r4, r0, #0
		printf("Err: unexpected return from NCP (ready)\n");
 800291c:	4821      	ldr	r0, [pc, #132]	@ (80029a4 <spi_iface_init+0x114>)
	if (ret < 0)
 800291e:	db30      	blt.n	8002982 <spi_iface_init+0xf2>
	HAL_Delay(500);
 8002920:	20fa      	movs	r0, #250	@ 0xfa
 8002922:	0040      	lsls	r0, r0, #1
 8002924:	f7fe f9b0 	bl	8000c88 <HAL_Delay>
	ret = spi_iface_txRx((const void *) "AT\r\n", 4, &tx, &rx, &rx_requested);
 8002928:	2104      	movs	r1, #4
 800292a:	481f      	ldr	r0, [pc, #124]	@ (80029a8 <spi_iface_init+0x118>)
 800292c:	9600      	str	r6, [sp, #0]
 800292e:	ab08      	add	r3, sp, #32
 8002930:	aa07      	add	r2, sp, #28
 8002932:	f7ff ff44 	bl	80027be <spi_iface_txRx>
 8002936:	1e04      	subs	r4, r0, #0
	if (ret < 0)
 8002938:	dbd7      	blt.n	80028ea <spi_iface_init+0x5a>
    printf("OUT: AT\r\n");
 800293a:	481c      	ldr	r0, [pc, #112]	@ (80029ac <spi_iface_init+0x11c>)
 800293c:	f000 fc34 	bl	80031a8 <puts>
    spi_iface_lock = 1;
 8002940:	2301      	movs	r3, #1
    if(wait_for_rdy(SPI_IFACE_TIMEOUT_DEF_MS) < 0) {ret = -1; goto _err;}
 8002942:	4813      	ldr	r0, [pc, #76]	@ (8002990 <spi_iface_init+0x100>)
    spi_iface_lock = 1;
 8002944:	703b      	strb	r3, [r7, #0]
    if(wait_for_rdy(SPI_IFACE_TIMEOUT_DEF_MS) < 0) {ret = -1; goto _err;}
 8002946:	f7ff fee6 	bl	8002716 <wait_for_rdy>
 800294a:	2800      	cmp	r0, #0
 800294c:	dbb2      	blt.n	80028b4 <spi_iface_init+0x24>
	ret = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_requested);
 800294e:	0029      	movs	r1, r5
 8002950:	0028      	movs	r0, r5
 8002952:	9600      	str	r6, [sp, #0]
 8002954:	ab08      	add	r3, sp, #32
 8002956:	aa07      	add	r2, sp, #28
 8002958:	f7ff ff31 	bl	80027be <spi_iface_txRx>
 800295c:	1e04      	subs	r4, r0, #0
	if (ret < 0)
 800295e:	dbc4      	blt.n	80028ea <spi_iface_init+0x5a>
        printf("IN: ");
 8002960:	9804      	ldr	r0, [sp, #16]
 8002962:	f000 fbbb 	bl	80030dc <iprintf>
        printf("%.*s", (int)ret, (char *)rx_requested);
 8002966:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8002968:	0021      	movs	r1, r4
 800296a:	002a      	movs	r2, r5
 800296c:	9805      	ldr	r0, [sp, #20]
 800296e:	f000 fbb5 	bl	80030dc <iprintf>
	ret = strncmp((const char *)rx_requested, "\r\nOK\r\n", 6);
 8002972:	2206      	movs	r2, #6
 8002974:	0028      	movs	r0, r5
 8002976:	490e      	ldr	r1, [pc, #56]	@ (80029b0 <spi_iface_init+0x120>)
 8002978:	f000 fd30 	bl	80033dc <strncmp>
 800297c:	1e04      	subs	r4, r0, #0
	if (ret)
 800297e:	d09b      	beq.n	80028b8 <spi_iface_init+0x28>
		printf("Err: unexpected return from NCP (AT)\n");
 8002980:	480c      	ldr	r0, [pc, #48]	@ (80029b4 <spi_iface_init+0x124>)
 8002982:	f000 fc11 	bl	80031a8 <puts>
		goto _err;
 8002986:	e797      	b.n	80028b8 <spi_iface_init+0x28>
 8002988:	2000018c 	.word	0x2000018c
 800298c:	2000000c 	.word	0x2000000c
 8002990:	00002710 	.word	0x00002710
 8002994:	08003ec2 	.word	0x08003ec2
 8002998:	08003edc 	.word	0x08003edc
 800299c:	08003ee1 	.word	0x08003ee1
 80029a0:	08003ee6 	.word	0x08003ee6
 80029a4:	08003ef0 	.word	0x08003ef0
 80029a8:	08003f18 	.word	0x08003f18
 80029ac:	08003f1d 	.word	0x08003f1d
 80029b0:	08003f26 	.word	0x08003f26
 80029b4:	08003f2d 	.word	0x08003f2d

080029b8 <spi_iface_send>:
    void *tx = NULL, *rx = NULL, *rx_req = NULL, *cmd_ext = NULL;
 80029b8:	2300      	movs	r3, #0
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	b08b      	sub	sp, #44	@ 0x2c
    void *tx = NULL, *rx = NULL, *rx_req = NULL, *cmd_ext = NULL;
 80029be:	9307      	str	r3, [sp, #28]
 80029c0:	9308      	str	r3, [sp, #32]
 80029c2:	9309      	str	r3, [sp, #36]	@ 0x24
{
 80029c4:	0006      	movs	r6, r0
 80029c6:	9105      	str	r1, [sp, #20]
    spi_iface_cmd_type_t cmd_type = spi_iface_get_cmd_type(cmd);
 80029c8:	f7ff feb8 	bl	800273c <spi_iface_get_cmd_type>
 80029cc:	0007      	movs	r7, r0
    uint16_t cmd_len = strlen(cmd);
 80029ce:	0030      	movs	r0, r6
 80029d0:	f7fd fba2 	bl	8000118 <strlen>
 80029d4:	b285      	uxth	r5, r0
    cmd_ext = calloc(cmd_len + 2, 1);
 80029d6:	2101      	movs	r1, #1
 80029d8:	1ca8      	adds	r0, r5, #2
 80029da:	f000 f98d 	bl	8002cf8 <calloc>
    memcpy(cmd_ext, cmd, cmd_len);
 80029de:	002a      	movs	r2, r5
 80029e0:	0031      	movs	r1, r6
    cmd_ext = calloc(cmd_len + 2, 1);
 80029e2:	9003      	str	r0, [sp, #12]
    memcpy(cmd_ext, cmd, cmd_len);
 80029e4:	f000 f924 	bl	8002c30 <memcpy>
    ((uint8_t*)cmd_ext)[cmd_len] = '\r';
 80029e8:	230d      	movs	r3, #13
 80029ea:	9a03      	ldr	r2, [sp, #12]
	cmd_len = cmd_len + 2;
 80029ec:	1cae      	adds	r6, r5, #2
    ((uint8_t*)cmd_ext)[cmd_len] = '\r';
 80029ee:	5553      	strb	r3, [r2, r5]
	((uint8_t*)cmd_ext)[cmd_len + 1] = '\n';
 80029f0:	230a      	movs	r3, #10
 80029f2:	1954      	adds	r4, r2, r5
 80029f4:	7063      	strb	r3, [r4, #1]
	cmd_len = cmd_len + 2;
 80029f6:	b2b6      	uxth	r6, r6
    if (cmd_type == CMD_QUERY)
 80029f8:	2f00      	cmp	r7, #0
 80029fa:	d13e      	bne.n	8002a7a <spi_iface_send+0xc2>
		cmd_ext = realloc(cmd_ext, cmd_len + 2);
 80029fc:	1cb1      	adds	r1, r6, #2
 80029fe:	0010      	movs	r0, r2
 8002a00:	f000 fa6e 	bl	8002ee0 <realloc>
		((uint8_t*)cmd_ext)[cmd_len] = 0x88;
 8002a04:	2388      	movs	r3, #136	@ 0x88
 8002a06:	5583      	strb	r3, [r0, r6]
		((uint8_t*)cmd_ext)[cmd_len + 1] = 0x88;
 8002a08:	1986      	adds	r6, r0, r6
		cmd_ext = realloc(cmd_ext, cmd_len + 2);
 8002a0a:	9003      	str	r0, [sp, #12]
		((uint8_t*)cmd_ext)[cmd_len + 1] = 0x88;
 8002a0c:	7073      	strb	r3, [r6, #1]
		cmd_len = cmd_len + 2;
 8002a0e:	3504      	adds	r5, #4
		cmd_len = cmd_len + 3;
 8002a10:	b2ae      	uxth	r6, r5
    spi_iface_lock = 1;
 8002a12:	2201      	movs	r2, #1
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <spi_iface_send+0x1c4>)
    ret = spi_iface_txRx(cmd_ext, cmd_len, &tx, &rx, &rx_req);
 8002a16:	af09      	add	r7, sp, #36	@ 0x24
    spi_iface_lock = 1;
 8002a18:	701a      	strb	r2, [r3, #0]
    ret = spi_iface_txRx(cmd_ext, cmd_len, &tx, &rx, &rx_req);
 8002a1a:	0031      	movs	r1, r6
 8002a1c:	9803      	ldr	r0, [sp, #12]
 8002a1e:	9700      	str	r7, [sp, #0]
 8002a20:	ab08      	add	r3, sp, #32
 8002a22:	aa07      	add	r2, sp, #28
 8002a24:	f7ff fecb 	bl	80027be <spi_iface_txRx>
    char *resp_buf = NULL;
 8002a28:	2500      	movs	r5, #0
    ret = spi_iface_txRx(cmd_ext, cmd_len, &tx, &rx, &rx_req);
 8002a2a:	0004      	movs	r4, r0
    if (ret < 0) goto _err;
 8002a2c:	42a8      	cmp	r0, r5
 8002a2e:	db64      	blt.n	8002afa <spi_iface_send+0x142>
    printf("OUT: ");
 8002a30:	4853      	ldr	r0, [pc, #332]	@ (8002b80 <spi_iface_send+0x1c8>)
 8002a32:	f000 fb53 	bl	80030dc <iprintf>
    printf("%.*s", cmd_len, (char *)cmd_ext);
 8002a36:	0031      	movs	r1, r6
 8002a38:	4852      	ldr	r0, [pc, #328]	@ (8002b84 <spi_iface_send+0x1cc>)
 8002a3a:	9a03      	ldr	r2, [sp, #12]
 8002a3c:	f000 fb4e 	bl	80030dc <iprintf>
    	if(wait_for_rdy(SPI_IFACE_TIMEOUT_DEF_MS) < 0) {ret = -1; goto _err;}
 8002a40:	4851      	ldr	r0, [pc, #324]	@ (8002b88 <spi_iface_send+0x1d0>)
 8002a42:	f7ff fe68 	bl	8002716 <wait_for_rdy>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	da00      	bge.n	8002a4c <spi_iface_send+0x94>
 8002a4a:	e090      	b.n	8002b6e <spi_iface_send+0x1b6>
        rx_len = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_req);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	9700      	str	r7, [sp, #0]
 8002a50:	0008      	movs	r0, r1
 8002a52:	ab08      	add	r3, sp, #32
 8002a54:	aa07      	add	r2, sp, #28
 8002a56:	f7ff feb2 	bl	80027be <spi_iface_txRx>
 8002a5a:	1e04      	subs	r4, r0, #0
        if (rx_len < 0) { ret = rx_len; goto _err; }
 8002a5c:	da00      	bge.n	8002a60 <spi_iface_send+0xa8>
 8002a5e:	e08a      	b.n	8002b76 <spi_iface_send+0x1be>
        if (rx_len >= 8 && memcmp(rx_req, "\r\nbusy p...\r\n", 8) == 0) {
 8002a60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a62:	2c07      	cmp	r4, #7
 8002a64:	dd1c      	ble.n	8002aa0 <spi_iface_send+0xe8>
 8002a66:	2208      	movs	r2, #8
 8002a68:	4948      	ldr	r1, [pc, #288]	@ (8002b8c <spi_iface_send+0x1d4>)
 8002a6a:	f000 fc93 	bl	8003394 <memcmp>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d116      	bne.n	8002aa0 <spi_iface_send+0xe8>
			printf("IN: busy p...\n");
 8002a72:	4847      	ldr	r0, [pc, #284]	@ (8002b90 <spi_iface_send+0x1d8>)
 8002a74:	f000 fb98 	bl	80031a8 <puts>
    	if(wait_for_rdy(SPI_IFACE_TIMEOUT_DEF_MS) < 0) {ret = -1; goto _err;}
 8002a78:	e7e2      	b.n	8002a40 <spi_iface_send+0x88>
    else if (cmd_type == CMD_SET)
 8002a7a:	2f01      	cmp	r7, #1
 8002a7c:	d10b      	bne.n	8002a96 <spi_iface_send+0xde>
		cmd_ext = realloc(cmd_ext, cmd_len + 3);
 8002a7e:	1cf1      	adds	r1, r6, #3
 8002a80:	9803      	ldr	r0, [sp, #12]
 8002a82:	f000 fa2d 	bl	8002ee0 <realloc>
		((uint8_t*)cmd_ext)[cmd_len] = 0x88;
 8002a86:	2388      	movs	r3, #136	@ 0x88
 8002a88:	5583      	strb	r3, [r0, r6]
		((uint8_t*)cmd_ext)[cmd_len + 1] = 0x88;
 8002a8a:	1986      	adds	r6, r0, r6
		cmd_ext = realloc(cmd_ext, cmd_len + 3);
 8002a8c:	9003      	str	r0, [sp, #12]
		((uint8_t*)cmd_ext)[cmd_len + 1] = 0x88;
 8002a8e:	7073      	strb	r3, [r6, #1]
		((uint8_t*)cmd_ext)[cmd_len + 2] = 0x88;
 8002a90:	70b3      	strb	r3, [r6, #2]
		cmd_len = cmd_len + 3;
 8002a92:	3505      	adds	r5, #5
 8002a94:	e7bc      	b.n	8002a10 <spi_iface_send+0x58>
    else if (cmd_type == CMD_EXECUTE)
 8002a96:	2f02      	cmp	r7, #2
 8002a98:	d0bb      	beq.n	8002a12 <spi_iface_send+0x5a>
    else return -1;
 8002a9a:	2401      	movs	r4, #1
 8002a9c:	4264      	negs	r4, r4
 8002a9e:	e042      	b.n	8002b26 <spi_iface_send+0x16e>
 8002aa0:	2500      	movs	r5, #0
 8002aa2:	002f      	movs	r7, r5
        if ((rx_len >= 4 && memcmp((char*)rx_req + rx_len - 4, "OK\r\n", 4) == 0) ||
 8002aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002aa6:	0026      	movs	r6, r4
 8002aa8:	9304      	str	r3, [sp, #16]
 8002aaa:	2c03      	cmp	r4, #3
 8002aac:	dd3e      	ble.n	8002b2c <spi_iface_send+0x174>
 8002aae:	1f20      	subs	r0, r4, #4
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4938      	ldr	r1, [pc, #224]	@ (8002b94 <spi_iface_send+0x1dc>)
 8002ab4:	1818      	adds	r0, r3, r0
 8002ab6:	f000 fc6d 	bl	8003394 <memcmp>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d008      	beq.n	8002ad0 <spi_iface_send+0x118>
 8002abe:	2c09      	cmp	r4, #9
 8002ac0:	d134      	bne.n	8002b2c <spi_iface_send+0x174>
        	(rx_len == 9 && memcmp((char*)rx_req, "\r\nready\r\n", 5) == 0)) {
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	4934      	ldr	r1, [pc, #208]	@ (8002b98 <spi_iface_send+0x1e0>)
 8002ac6:	9804      	ldr	r0, [sp, #16]
 8002ac8:	f000 fc64 	bl	8003394 <memcmp>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d12d      	bne.n	8002b2c <spi_iface_send+0x174>
            resp_buf = realloc(resp_buf, total_resp_len + rx_len + 1);
 8002ad0:	19e4      	adds	r4, r4, r7
 8002ad2:	0028      	movs	r0, r5
 8002ad4:	1c61      	adds	r1, r4, #1
 8002ad6:	f000 fa03 	bl	8002ee0 <realloc>
            memcpy(resp_buf + total_resp_len, rx_req, rx_len);
 8002ada:	0032      	movs	r2, r6
            resp_buf = realloc(resp_buf, total_resp_len + rx_len + 1);
 8002adc:	0005      	movs	r5, r0
            memcpy(resp_buf + total_resp_len, rx_req, rx_len);
 8002ade:	9904      	ldr	r1, [sp, #16]
 8002ae0:	19c0      	adds	r0, r0, r7
 8002ae2:	f000 f8a5 	bl	8002c30 <memcpy>
    if (total_resp_len > 0) {
 8002ae6:	2c00      	cmp	r4, #0
 8002ae8:	dc3c      	bgt.n	8002b64 <spi_iface_send+0x1ac>
	printf("IN: ");
 8002aea:	482c      	ldr	r0, [pc, #176]	@ (8002b9c <spi_iface_send+0x1e4>)
 8002aec:	f000 faf6 	bl	80030dc <iprintf>
	printf("%s", (char *)*resp);
 8002af0:	9b05      	ldr	r3, [sp, #20]
 8002af2:	482b      	ldr	r0, [pc, #172]	@ (8002ba0 <spi_iface_send+0x1e8>)
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	f000 faf1 	bl	80030dc <iprintf>
	spi_iface_lock = 0;
 8002afa:	2200      	movs	r2, #0
 8002afc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <spi_iface_send+0x1c4>)
    free(tx);
 8002afe:	9807      	ldr	r0, [sp, #28]
	spi_iface_lock = 0;
 8002b00:	701a      	strb	r2, [r3, #0]
    free(tx);
 8002b02:	f000 f931 	bl	8002d68 <free>
    free(rx);
 8002b06:	9808      	ldr	r0, [sp, #32]
 8002b08:	f000 f92e 	bl	8002d68 <free>
    free(rx_req);
 8002b0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b0e:	f000 f92b 	bl	8002d68 <free>
    free(cmd_ext);
 8002b12:	9803      	ldr	r0, [sp, #12]
 8002b14:	f000 f928 	bl	8002d68 <free>
    if (ret < 0 && resp_buf) free(resp_buf);
 8002b18:	2c00      	cmp	r4, #0
 8002b1a:	da04      	bge.n	8002b26 <spi_iface_send+0x16e>
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d002      	beq.n	8002b26 <spi_iface_send+0x16e>
 8002b20:	0028      	movs	r0, r5
 8002b22:	f000 f921 	bl	8002d68 <free>
}
 8002b26:	0020      	movs	r0, r4
 8002b28:	b00b      	add	sp, #44	@ 0x2c
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        resp_buf = realloc(resp_buf, total_resp_len + rx_len + 1);
 8002b2c:	19e6      	adds	r6, r4, r7
 8002b2e:	0028      	movs	r0, r5
 8002b30:	1c71      	adds	r1, r6, #1
 8002b32:	f000 f9d5 	bl	8002ee0 <realloc>
        memcpy(resp_buf + total_resp_len, rx_req, rx_len);
 8002b36:	0022      	movs	r2, r4
        resp_buf = realloc(resp_buf, total_resp_len + rx_len + 1);
 8002b38:	0005      	movs	r5, r0
        memcpy(resp_buf + total_resp_len, rx_req, rx_len);
 8002b3a:	9904      	ldr	r1, [sp, #16]
 8002b3c:	19c0      	adds	r0, r0, r7
 8002b3e:	f000 f877 	bl	8002c30 <memcpy>
        if(wait_for_rdy(SPI_IFACE_TIMEOUT_DEF_MS) < 0) {ret = -1; goto _err;}
 8002b42:	4811      	ldr	r0, [pc, #68]	@ (8002b88 <spi_iface_send+0x1d0>)
 8002b44:	f7ff fde7 	bl	8002716 <wait_for_rdy>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	db11      	blt.n	8002b70 <spi_iface_send+0x1b8>
        rx_len = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_req);
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	ab09      	add	r3, sp, #36	@ 0x24
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	0008      	movs	r0, r1
 8002b54:	ab08      	add	r3, sp, #32
 8002b56:	aa07      	add	r2, sp, #28
 8002b58:	f7ff fe31 	bl	80027be <spi_iface_txRx>
 8002b5c:	1e04      	subs	r4, r0, #0
        if (rx_len < 0) { ret = rx_len; goto _err; }
 8002b5e:	dbcc      	blt.n	8002afa <spi_iface_send+0x142>
        total_resp_len += rx_len;
 8002b60:	0037      	movs	r7, r6
 8002b62:	e79f      	b.n	8002aa4 <spi_iface_send+0xec>
        resp_buf[total_resp_len] = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	552b      	strb	r3, [r5, r4]
        *resp = resp_buf;
 8002b68:	9b05      	ldr	r3, [sp, #20]
 8002b6a:	601d      	str	r5, [r3, #0]
 8002b6c:	e7bd      	b.n	8002aea <spi_iface_send+0x132>
    char *resp_buf = NULL;
 8002b6e:	2500      	movs	r5, #0
        if(wait_for_rdy(SPI_IFACE_TIMEOUT_DEF_MS) < 0) {ret = -1; goto _err;}
 8002b70:	2401      	movs	r4, #1
 8002b72:	4264      	negs	r4, r4
 8002b74:	e7c1      	b.n	8002afa <spi_iface_send+0x142>
    char *resp_buf = NULL;
 8002b76:	2500      	movs	r5, #0
 8002b78:	e7bf      	b.n	8002afa <spi_iface_send+0x142>
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	2000000c 	.word	0x2000000c
 8002b80:	08003f52 	.word	0x08003f52
 8002b84:	08003ee1 	.word	0x08003ee1
 8002b88:	00002710 	.word	0x00002710
 8002b8c:	08003f58 	.word	0x08003f58
 8002b90:	08003f66 	.word	0x08003f66
 8002b94:	08003f28 	.word	0x08003f28
 8002b98:	08003ee6 	.word	0x08003ee6
 8002b9c:	08003edc 	.word	0x08003edc
 8002ba0:	08003f74 	.word	0x08003f74

08002ba4 <spi_iface_receive_report>:
	spi_iface_lock = 1;
 8002ba4:	2201      	movs	r2, #1
{
 8002ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
	void *tx = NULL, *rx = NULL, *rx_req = NULL;
 8002ba8:	2600      	movs	r6, #0
	spi_iface_lock = 1;
 8002baa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c24 <spi_iface_receive_report+0x80>)
{
 8002bac:	b089      	sub	sp, #36	@ 0x24
	spi_iface_lock = 1;
 8002bae:	9303      	str	r3, [sp, #12]
 8002bb0:	701a      	strb	r2, [r3, #0]
	rx_len = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_req);
 8002bb2:	ab07      	add	r3, sp, #28
 8002bb4:	9300      	str	r3, [sp, #0]
{
 8002bb6:	0007      	movs	r7, r0
	rx_len = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_req);
 8002bb8:	0031      	movs	r1, r6
 8002bba:	0030      	movs	r0, r6
 8002bbc:	ab06      	add	r3, sp, #24
 8002bbe:	aa05      	add	r2, sp, #20
	void *tx = NULL, *rx = NULL, *rx_req = NULL;
 8002bc0:	9605      	str	r6, [sp, #20]
 8002bc2:	9606      	str	r6, [sp, #24]
 8002bc4:	9607      	str	r6, [sp, #28]
	rx_len = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_req);
 8002bc6:	f7ff fdfa 	bl	80027be <spi_iface_txRx>
	char *resp_buf = NULL;
 8002bca:	0035      	movs	r5, r6
	rx_len = spi_iface_txRx(NULL, 0, &tx, &rx, &rx_req);
 8002bcc:	0004      	movs	r4, r0
	if (rx_len < 0) {ret = rx_len; goto _err;}
 8002bce:	42b0      	cmp	r0, r6
 8002bd0:	db11      	blt.n	8002bf6 <spi_iface_receive_report+0x52>
	resp_buf = calloc(rx_len, 1);
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	f000 f890 	bl	8002cf8 <calloc>
 8002bd8:	0005      	movs	r5, r0
	memcpy(resp_buf, rx_req, rx_len);
 8002bda:	0022      	movs	r2, r4
 8002bdc:	9907      	ldr	r1, [sp, #28]
 8002bde:	f000 f827 	bl	8002c30 <memcpy>
	resp_buf[rx_len] = 0;
 8002be2:	552e      	strb	r6, [r5, r4]
	printf("IN: ");
 8002be4:	4810      	ldr	r0, [pc, #64]	@ (8002c28 <spi_iface_receive_report+0x84>)
	*report = resp_buf;
 8002be6:	603d      	str	r5, [r7, #0]
	printf("IN: ");
 8002be8:	f000 fa78 	bl	80030dc <iprintf>
	printf("%s", (char *)*report);
 8002bec:	480f      	ldr	r0, [pc, #60]	@ (8002c2c <spi_iface_receive_report+0x88>)
 8002bee:	6839      	ldr	r1, [r7, #0]
	ret = rx_len + 1;
 8002bf0:	3401      	adds	r4, #1
	printf("%s", (char *)*report);
 8002bf2:	f000 fa73 	bl	80030dc <iprintf>
	spi_iface_lock = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9a03      	ldr	r2, [sp, #12]
	free(tx);
 8002bfa:	9805      	ldr	r0, [sp, #20]
	spi_iface_lock = 0;
 8002bfc:	7013      	strb	r3, [r2, #0]
	free(tx);
 8002bfe:	f000 f8b3 	bl	8002d68 <free>
	free(rx);
 8002c02:	9806      	ldr	r0, [sp, #24]
 8002c04:	f000 f8b0 	bl	8002d68 <free>
	free(rx_req);
 8002c08:	9807      	ldr	r0, [sp, #28]
 8002c0a:	f000 f8ad 	bl	8002d68 <free>
	if (ret < 0 && resp_buf) free(resp_buf);
 8002c0e:	2c00      	cmp	r4, #0
 8002c10:	da04      	bge.n	8002c1c <spi_iface_receive_report+0x78>
 8002c12:	2d00      	cmp	r5, #0
 8002c14:	d002      	beq.n	8002c1c <spi_iface_receive_report+0x78>
 8002c16:	0028      	movs	r0, r5
 8002c18:	f000 f8a6 	bl	8002d68 <free>
}
 8002c1c:	0020      	movs	r0, r4
 8002c1e:	b009      	add	sp, #36	@ 0x24
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	2000000c 	.word	0x2000000c
 8002c28:	08003edc 	.word	0x08003edc
 8002c2c:	08003f74 	.word	0x08003f74

08002c30 <memcpy>:
void *spi_port_memcpy(void *dest, const void *src, unsigned int len)
#endif /* __ICCARM__ */
#ifdef __GNUC__
void *memcpy(void *dest, const void *src, unsigned int len)
#endif /* __ICCARM__ */
{
 8002c30:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE END memcpy_1 */
  uint8_t *d = (uint8_t *)dest;
  const uint8_t *s = (const uint8_t *)src;

  /* Copy bytes until the destination address is aligned to 4 bytes */
  while (((uint32_t) d % 4 != 0) && len > 0)
 8002c32:	2300      	movs	r3, #0
 8002c34:	2403      	movs	r4, #3
 8002c36:	18c5      	adds	r5, r0, r3
 8002c38:	4225      	tst	r5, r4
 8002c3a:	d001      	beq.n	8002c40 <memcpy+0x10>
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d115      	bne.n	8002c6c <memcpy+0x3c>
 8002c40:	18c9      	adds	r1, r1, r3
  {
    *d++ = *s++;
    len--;
  }

  if ((uint32_t) s % 4 != 0)
 8002c42:	000c      	movs	r4, r1
 8002c44:	1ad2      	subs	r2, r2, r3
 8002c46:	2303      	movs	r3, #3
 8002c48:	401c      	ands	r4, r3
 8002c4a:	4219      	tst	r1, r3
 8002c4c:	d118      	bne.n	8002c80 <memcpy+0x50>
 8002c4e:	0023      	movs	r3, r4
  }

  /* Copy 4-byte blocks */
  uint32_t *d32 = (uint32_t *)d;
  const uint32_t *s32 = (const uint32_t *)s;
  while (len >= 4)
 8002c50:	1ad6      	subs	r6, r2, r3
 8002c52:	2e03      	cmp	r6, #3
 8002c54:	d816      	bhi.n	8002c84 <memcpy+0x54>
 8002c56:	0893      	lsrs	r3, r2, #2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	18ed      	adds	r5, r5, r3
 8002c5e:	18c9      	adds	r1, r1, r3
  }

  /* Copy remaining bytes */
  d = (uint8_t *)d32;
  s = (const uint8_t *)s32;
  while (len > 0)
 8002c60:	42a2      	cmp	r2, r4
 8002c62:	d00c      	beq.n	8002c7e <memcpy+0x4e>
  {
    *d++ = *s++;
 8002c64:	5d0b      	ldrb	r3, [r1, r4]
 8002c66:	552b      	strb	r3, [r5, r4]
    len--;
 8002c68:	3401      	adds	r4, #1
 8002c6a:	e7f9      	b.n	8002c60 <memcpy+0x30>
    *d++ = *s++;
 8002c6c:	5ccd      	ldrb	r5, [r1, r3]
 8002c6e:	54c5      	strb	r5, [r0, r3]
    len--;
 8002c70:	3301      	adds	r3, #1
 8002c72:	e7e0      	b.n	8002c36 <memcpy+0x6>
		*d++ = *s++;
 8002c74:	5ccc      	ldrb	r4, [r1, r3]
 8002c76:	54ec      	strb	r4, [r5, r3]
		len--;
 8002c78:	3301      	adds	r3, #1
	while (len > 0)
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d1fa      	bne.n	8002c74 <memcpy+0x44>

  return dest;
  /* USER CODE BEGIN memcpy_End */

  /* USER CODE END memcpy_End */
}
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	2300      	movs	r3, #0
 8002c82:	e7fa      	b.n	8002c7a <memcpy+0x4a>
    *d32++ = *s32++;
 8002c84:	58ce      	ldr	r6, [r1, r3]
 8002c86:	50ee      	str	r6, [r5, r3]
    len -= 4;
 8002c88:	3304      	adds	r3, #4
 8002c8a:	e7e1      	b.n	8002c50 <memcpy+0x20>

08002c8c <spi_port_init>:
	printf("%s\n", log_buffer);
#endif
}

int32_t spi_port_init()
{
 8002c8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN spi_port_init_1 */

  /* USER CODE END spi_port_init_1 */
  /* Powering up the NCP using GPIO CHIP_EN */
  HAL_GPIO_WritePin(CHIP_EN_GPIO_Port, CHIP_EN_Pin, GPIO_PIN_SET);
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <spi_port_init+0x10>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	2110      	movs	r1, #16
 8002c94:	f7fe f924 	bl	8000ee0 <HAL_GPIO_WritePin>

  return 0;
  /* USER CODE BEGIN spi_port_init_End */

  /* USER CODE END spi_port_init_End */
}
 8002c98:	2000      	movs	r0, #0
 8002c9a:	bd10      	pop	{r4, pc}
 8002c9c:	50000400 	.word	0x50000400

08002ca0 <spi_port_transfer>:

  /* USER CODE END spi_port_deinit_End */
}

int32_t spi_port_transfer(void *tx_buf, void *rx_buf, uint16_t len)
{
 8002ca0:	b513      	push	{r0, r1, r4, lr}
  if (tx_buf != NULL)
  {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_CleanDCache_by_Addr(tx_buf, len);
#endif /* __DCACHE_PRESENT */
    status = HAL_SPI_TransmitReceive(&NCP_SPI_HANDLE, tx_buf, rx_buf, len, SPI_TRANSMIT_TIMEOUT_MS);
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <spi_port_transfer+0x24>)
{
 8002ca4:	1e04      	subs	r4, r0, #0
 8002ca6:	4808      	ldr	r0, [pc, #32]	@ (8002cc8 <spi_port_transfer+0x28>)
  if (tx_buf != NULL)
 8002ca8:	d009      	beq.n	8002cbe <spi_port_transfer+0x1e>
    status = HAL_SPI_TransmitReceive(&NCP_SPI_HANDLE, tx_buf, rx_buf, len, SPI_TRANSMIT_TIMEOUT_MS);
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	0013      	movs	r3, r2
 8002cae:	000a      	movs	r2, r1
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	f7fe ffa3 	bl	8001bfc <HAL_SPI_TransmitReceive>
  }
#if (SPI_PHY_LOG_CHARS > 0)
  printf("-----------\n");
#endif

  return (status == HAL_OK ? 0 : -1);
 8002cb6:	1e43      	subs	r3, r0, #1
 8002cb8:	4198      	sbcs	r0, r3
 8002cba:	4240      	negs	r0, r0
  /* USER CODE BEGIN spi_port_transfer_End */

  /* USER CODE END spi_port_transfer_End */
}
 8002cbc:	bd16      	pop	{r1, r2, r4, pc}
    status = HAL_SPI_Receive(&NCP_SPI_HANDLE, rx_buf, len, SPI_TRANSMIT_TIMEOUT_MS);
 8002cbe:	f7ff f8a7 	bl	8001e10 <HAL_SPI_Receive>
 8002cc2:	e7f8      	b.n	8002cb6 <spi_port_transfer+0x16>
 8002cc4:	00001388 	.word	0x00001388
 8002cc8:	20000120 	.word	0x20000120

08002ccc <spi_port_is_ready>:

int32_t spi_port_is_ready(void)
{
 8002ccc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN spi_port_is_ready_1 */

  /* USER CODE END spi_port_is_ready_1 */
  /* Check whether NCP data are available on the SPI bus */
  return (int32_t)HAL_GPIO_ReadPin(SPI_RDY_GPIO_Port, SPI_RDY_Pin);
 8002cce:	2108      	movs	r1, #8
 8002cd0:	4801      	ldr	r0, [pc, #4]	@ (8002cd8 <spi_port_is_ready+0xc>)
 8002cd2:	f7fe f8ff 	bl	8000ed4 <HAL_GPIO_ReadPin>
  /* USER CODE BEGIN spi_port_is_ready_End */

  /* USER CODE END spi_port_is_ready_End */
}
 8002cd6:	bd10      	pop	{r4, pc}
 8002cd8:	50000400 	.word	0x50000400

08002cdc <spi_port_set_cs>:

int32_t spi_port_set_cs(int32_t state)
{
 8002cdc:	0002      	movs	r2, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
  }
  else
  {
    /* Disable Chip Select when transfer is complete */
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002cde:	2101      	movs	r1, #1
{
 8002ce0:	b510      	push	{r4, lr}
  if (state)
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d001      	beq.n	8002cea <spi_port_set_cs+0xe>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	0011      	movs	r1, r2
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002cea:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <spi_port_set_cs+0x18>)
 8002cec:	f7fe f8f8 	bl	8000ee0 <HAL_GPIO_WritePin>

  return 0;
  /* USER CODE BEGIN spi_port_set_cs_End */

  /* USER CODE END spi_port_set_cs_End */
}
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	bd10      	pop	{r4, pc}
 8002cf4:	50000400 	.word	0x50000400

08002cf8 <calloc>:
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	4b03      	ldr	r3, [pc, #12]	@ (8002d08 <calloc+0x10>)
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	0001      	movs	r1, r0
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	f000 f803 	bl	8002d0c <_calloc_r>
 8002d06:	bd10      	pop	{r4, pc}
 8002d08:	2000001c 	.word	0x2000001c

08002d0c <_calloc_r>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	0c0b      	lsrs	r3, r1, #16
 8002d10:	0c15      	lsrs	r5, r2, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11e      	bne.n	8002d54 <_calloc_r+0x48>
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	d10c      	bne.n	8002d34 <_calloc_r+0x28>
 8002d1a:	b289      	uxth	r1, r1
 8002d1c:	b294      	uxth	r4, r2
 8002d1e:	434c      	muls	r4, r1
 8002d20:	0021      	movs	r1, r4
 8002d22:	f000 f84d 	bl	8002dc0 <_malloc_r>
 8002d26:	1e05      	subs	r5, r0, #0
 8002d28:	d01b      	beq.n	8002d62 <_calloc_r+0x56>
 8002d2a:	0022      	movs	r2, r4
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f000 fb3f 	bl	80033b0 <memset>
 8002d32:	e016      	b.n	8002d62 <_calloc_r+0x56>
 8002d34:	1c2b      	adds	r3, r5, #0
 8002d36:	1c0c      	adds	r4, r1, #0
 8002d38:	b289      	uxth	r1, r1
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	434a      	muls	r2, r1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b2a1      	uxth	r1, r4
 8002d42:	4359      	muls	r1, r3
 8002d44:	0c14      	lsrs	r4, r2, #16
 8002d46:	190c      	adds	r4, r1, r4
 8002d48:	0c23      	lsrs	r3, r4, #16
 8002d4a:	d107      	bne.n	8002d5c <_calloc_r+0x50>
 8002d4c:	0424      	lsls	r4, r4, #16
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	4314      	orrs	r4, r2
 8002d52:	e7e5      	b.n	8002d20 <_calloc_r+0x14>
 8002d54:	2d00      	cmp	r5, #0
 8002d56:	d101      	bne.n	8002d5c <_calloc_r+0x50>
 8002d58:	1c14      	adds	r4, r2, #0
 8002d5a:	e7ed      	b.n	8002d38 <_calloc_r+0x2c>
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	2500      	movs	r5, #0
 8002d60:	6003      	str	r3, [r0, #0]
 8002d62:	0028      	movs	r0, r5
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d68 <free>:
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <free+0x10>)
 8002d6c:	0001      	movs	r1, r0
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	f000 fbd4 	bl	800351c <_free_r>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	2000001c 	.word	0x2000001c

08002d7c <sbrk_aligned>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8002dbc <sbrk_aligned+0x40>)
 8002d80:	000d      	movs	r5, r1
 8002d82:	6831      	ldr	r1, [r6, #0]
 8002d84:	0004      	movs	r4, r0
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d102      	bne.n	8002d90 <sbrk_aligned+0x14>
 8002d8a:	f000 fb73 	bl	8003474 <_sbrk_r>
 8002d8e:	6030      	str	r0, [r6, #0]
 8002d90:	0029      	movs	r1, r5
 8002d92:	0020      	movs	r0, r4
 8002d94:	f000 fb6e 	bl	8003474 <_sbrk_r>
 8002d98:	1c43      	adds	r3, r0, #1
 8002d9a:	d103      	bne.n	8002da4 <sbrk_aligned+0x28>
 8002d9c:	2501      	movs	r5, #1
 8002d9e:	426d      	negs	r5, r5
 8002da0:	0028      	movs	r0, r5
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	2303      	movs	r3, #3
 8002da6:	1cc5      	adds	r5, r0, #3
 8002da8:	439d      	bics	r5, r3
 8002daa:	42a8      	cmp	r0, r5
 8002dac:	d0f8      	beq.n	8002da0 <sbrk_aligned+0x24>
 8002dae:	1a29      	subs	r1, r5, r0
 8002db0:	0020      	movs	r0, r4
 8002db2:	f000 fb5f 	bl	8003474 <_sbrk_r>
 8002db6:	3001      	adds	r0, #1
 8002db8:	d1f2      	bne.n	8002da0 <sbrk_aligned+0x24>
 8002dba:	e7ef      	b.n	8002d9c <sbrk_aligned+0x20>
 8002dbc:	20000190 	.word	0x20000190

08002dc0 <_malloc_r>:
 8002dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	1ccb      	adds	r3, r1, #3
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	3308      	adds	r3, #8
 8002dca:	0005      	movs	r5, r0
 8002dcc:	001f      	movs	r7, r3
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d234      	bcs.n	8002e3c <_malloc_r+0x7c>
 8002dd2:	270c      	movs	r7, #12
 8002dd4:	42b9      	cmp	r1, r7
 8002dd6:	d833      	bhi.n	8002e40 <_malloc_r+0x80>
 8002dd8:	0028      	movs	r0, r5
 8002dda:	f000 f871 	bl	8002ec0 <__malloc_lock>
 8002dde:	4e37      	ldr	r6, [pc, #220]	@ (8002ebc <_malloc_r+0xfc>)
 8002de0:	6833      	ldr	r3, [r6, #0]
 8002de2:	001c      	movs	r4, r3
 8002de4:	2c00      	cmp	r4, #0
 8002de6:	d12f      	bne.n	8002e48 <_malloc_r+0x88>
 8002de8:	0039      	movs	r1, r7
 8002dea:	0028      	movs	r0, r5
 8002dec:	f7ff ffc6 	bl	8002d7c <sbrk_aligned>
 8002df0:	0004      	movs	r4, r0
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d15f      	bne.n	8002eb6 <_malloc_r+0xf6>
 8002df6:	6834      	ldr	r4, [r6, #0]
 8002df8:	9400      	str	r4, [sp, #0]
 8002dfa:	9b00      	ldr	r3, [sp, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d14a      	bne.n	8002e96 <_malloc_r+0xd6>
 8002e00:	2c00      	cmp	r4, #0
 8002e02:	d052      	beq.n	8002eaa <_malloc_r+0xea>
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	0028      	movs	r0, r5
 8002e08:	18e3      	adds	r3, r4, r3
 8002e0a:	9900      	ldr	r1, [sp, #0]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f000 fb31 	bl	8003474 <_sbrk_r>
 8002e12:	9b01      	ldr	r3, [sp, #4]
 8002e14:	4283      	cmp	r3, r0
 8002e16:	d148      	bne.n	8002eaa <_malloc_r+0xea>
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	0028      	movs	r0, r5
 8002e1c:	1aff      	subs	r7, r7, r3
 8002e1e:	0039      	movs	r1, r7
 8002e20:	f7ff ffac 	bl	8002d7c <sbrk_aligned>
 8002e24:	3001      	adds	r0, #1
 8002e26:	d040      	beq.n	8002eaa <_malloc_r+0xea>
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	19db      	adds	r3, r3, r7
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	6833      	ldr	r3, [r6, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	d133      	bne.n	8002e9e <_malloc_r+0xde>
 8002e36:	9b00      	ldr	r3, [sp, #0]
 8002e38:	6033      	str	r3, [r6, #0]
 8002e3a:	e019      	b.n	8002e70 <_malloc_r+0xb0>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	dac9      	bge.n	8002dd4 <_malloc_r+0x14>
 8002e40:	230c      	movs	r3, #12
 8002e42:	602b      	str	r3, [r5, #0]
 8002e44:	2000      	movs	r0, #0
 8002e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e48:	6821      	ldr	r1, [r4, #0]
 8002e4a:	1bc9      	subs	r1, r1, r7
 8002e4c:	d420      	bmi.n	8002e90 <_malloc_r+0xd0>
 8002e4e:	290b      	cmp	r1, #11
 8002e50:	d90a      	bls.n	8002e68 <_malloc_r+0xa8>
 8002e52:	19e2      	adds	r2, r4, r7
 8002e54:	6027      	str	r7, [r4, #0]
 8002e56:	42a3      	cmp	r3, r4
 8002e58:	d104      	bne.n	8002e64 <_malloc_r+0xa4>
 8002e5a:	6032      	str	r2, [r6, #0]
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	6011      	str	r1, [r2, #0]
 8002e60:	6053      	str	r3, [r2, #4]
 8002e62:	e005      	b.n	8002e70 <_malloc_r+0xb0>
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	e7f9      	b.n	8002e5c <_malloc_r+0x9c>
 8002e68:	6862      	ldr	r2, [r4, #4]
 8002e6a:	42a3      	cmp	r3, r4
 8002e6c:	d10e      	bne.n	8002e8c <_malloc_r+0xcc>
 8002e6e:	6032      	str	r2, [r6, #0]
 8002e70:	0028      	movs	r0, r5
 8002e72:	f000 f82d 	bl	8002ed0 <__malloc_unlock>
 8002e76:	0020      	movs	r0, r4
 8002e78:	2207      	movs	r2, #7
 8002e7a:	300b      	adds	r0, #11
 8002e7c:	1d23      	adds	r3, r4, #4
 8002e7e:	4390      	bics	r0, r2
 8002e80:	1ac2      	subs	r2, r0, r3
 8002e82:	4298      	cmp	r0, r3
 8002e84:	d0df      	beq.n	8002e46 <_malloc_r+0x86>
 8002e86:	1a1b      	subs	r3, r3, r0
 8002e88:	50a3      	str	r3, [r4, r2]
 8002e8a:	e7dc      	b.n	8002e46 <_malloc_r+0x86>
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e7ef      	b.n	8002e70 <_malloc_r+0xb0>
 8002e90:	0023      	movs	r3, r4
 8002e92:	6864      	ldr	r4, [r4, #4]
 8002e94:	e7a6      	b.n	8002de4 <_malloc_r+0x24>
 8002e96:	9c00      	ldr	r4, [sp, #0]
 8002e98:	6863      	ldr	r3, [r4, #4]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	e7ad      	b.n	8002dfa <_malloc_r+0x3a>
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	d1fb      	bne.n	8002e9e <_malloc_r+0xde>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e7da      	b.n	8002e60 <_malloc_r+0xa0>
 8002eaa:	230c      	movs	r3, #12
 8002eac:	0028      	movs	r0, r5
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	f000 f80e 	bl	8002ed0 <__malloc_unlock>
 8002eb4:	e7c6      	b.n	8002e44 <_malloc_r+0x84>
 8002eb6:	6007      	str	r7, [r0, #0]
 8002eb8:	e7da      	b.n	8002e70 <_malloc_r+0xb0>
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	20000194 	.word	0x20000194

08002ec0 <__malloc_lock>:
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	4802      	ldr	r0, [pc, #8]	@ (8002ecc <__malloc_lock+0xc>)
 8002ec4:	f000 fb27 	bl	8003516 <__retarget_lock_acquire_recursive>
 8002ec8:	bd10      	pop	{r4, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	200002d8 	.word	0x200002d8

08002ed0 <__malloc_unlock>:
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	4802      	ldr	r0, [pc, #8]	@ (8002edc <__malloc_unlock+0xc>)
 8002ed4:	f000 fb20 	bl	8003518 <__retarget_lock_release_recursive>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	200002d8 	.word	0x200002d8

08002ee0 <realloc>:
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <realloc+0x10>)
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	0001      	movs	r1, r0
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	f000 f803 	bl	8002ef4 <_realloc_r>
 8002eee:	bd10      	pop	{r4, pc}
 8002ef0:	2000001c 	.word	0x2000001c

08002ef4 <_realloc_r>:
 8002ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ef6:	0006      	movs	r6, r0
 8002ef8:	000c      	movs	r4, r1
 8002efa:	0015      	movs	r5, r2
 8002efc:	2900      	cmp	r1, #0
 8002efe:	d105      	bne.n	8002f0c <_realloc_r+0x18>
 8002f00:	0011      	movs	r1, r2
 8002f02:	f7ff ff5d 	bl	8002dc0 <_malloc_r>
 8002f06:	0004      	movs	r4, r0
 8002f08:	0020      	movs	r0, r4
 8002f0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d103      	bne.n	8002f18 <_realloc_r+0x24>
 8002f10:	f000 fb04 	bl	800351c <_free_r>
 8002f14:	002c      	movs	r4, r5
 8002f16:	e7f7      	b.n	8002f08 <_realloc_r+0x14>
 8002f18:	f000 fb4a 	bl	80035b0 <_malloc_usable_size_r>
 8002f1c:	0007      	movs	r7, r0
 8002f1e:	4285      	cmp	r5, r0
 8002f20:	d802      	bhi.n	8002f28 <_realloc_r+0x34>
 8002f22:	0843      	lsrs	r3, r0, #1
 8002f24:	42ab      	cmp	r3, r5
 8002f26:	d3ef      	bcc.n	8002f08 <_realloc_r+0x14>
 8002f28:	0029      	movs	r1, r5
 8002f2a:	0030      	movs	r0, r6
 8002f2c:	f7ff ff48 	bl	8002dc0 <_malloc_r>
 8002f30:	9001      	str	r0, [sp, #4]
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d101      	bne.n	8002f3a <_realloc_r+0x46>
 8002f36:	9c01      	ldr	r4, [sp, #4]
 8002f38:	e7e6      	b.n	8002f08 <_realloc_r+0x14>
 8002f3a:	002a      	movs	r2, r5
 8002f3c:	42bd      	cmp	r5, r7
 8002f3e:	d900      	bls.n	8002f42 <_realloc_r+0x4e>
 8002f40:	003a      	movs	r2, r7
 8002f42:	0021      	movs	r1, r4
 8002f44:	9801      	ldr	r0, [sp, #4]
 8002f46:	f7ff fe73 	bl	8002c30 <memcpy>
 8002f4a:	0021      	movs	r1, r4
 8002f4c:	0030      	movs	r0, r6
 8002f4e:	f000 fae5 	bl	800351c <_free_r>
 8002f52:	e7f0      	b.n	8002f36 <_realloc_r+0x42>

08002f54 <std>:
 8002f54:	2300      	movs	r3, #0
 8002f56:	b510      	push	{r4, lr}
 8002f58:	0004      	movs	r4, r0
 8002f5a:	6003      	str	r3, [r0, #0]
 8002f5c:	6043      	str	r3, [r0, #4]
 8002f5e:	6083      	str	r3, [r0, #8]
 8002f60:	8181      	strh	r1, [r0, #12]
 8002f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f64:	81c2      	strh	r2, [r0, #14]
 8002f66:	6103      	str	r3, [r0, #16]
 8002f68:	6143      	str	r3, [r0, #20]
 8002f6a:	6183      	str	r3, [r0, #24]
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	2208      	movs	r2, #8
 8002f70:	305c      	adds	r0, #92	@ 0x5c
 8002f72:	f000 fa1d 	bl	80033b0 <memset>
 8002f76:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <std+0x50>)
 8002f78:	6224      	str	r4, [r4, #32]
 8002f7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <std+0x54>)
 8002f7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f80:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <std+0x58>)
 8002f82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f84:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <std+0x5c>)
 8002f86:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f88:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <std+0x60>)
 8002f8a:	429c      	cmp	r4, r3
 8002f8c:	d005      	beq.n	8002f9a <std+0x46>
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <std+0x64>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d002      	beq.n	8002f9a <std+0x46>
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <std+0x68>)
 8002f96:	429c      	cmp	r4, r3
 8002f98:	d103      	bne.n	8002fa2 <std+0x4e>
 8002f9a:	0020      	movs	r0, r4
 8002f9c:	3058      	adds	r0, #88	@ 0x58
 8002f9e:	f000 fab9 	bl	8003514 <__retarget_lock_init_recursive>
 8002fa2:	bd10      	pop	{r4, pc}
 8002fa4:	080031bd 	.word	0x080031bd
 8002fa8:	080031e5 	.word	0x080031e5
 8002fac:	0800321d 	.word	0x0800321d
 8002fb0:	08003249 	.word	0x08003249
 8002fb4:	20000198 	.word	0x20000198
 8002fb8:	20000200 	.word	0x20000200
 8002fbc:	20000268 	.word	0x20000268

08002fc0 <stdio_exit_handler>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	4a03      	ldr	r2, [pc, #12]	@ (8002fd0 <stdio_exit_handler+0x10>)
 8002fc4:	4903      	ldr	r1, [pc, #12]	@ (8002fd4 <stdio_exit_handler+0x14>)
 8002fc6:	4804      	ldr	r0, [pc, #16]	@ (8002fd8 <stdio_exit_handler+0x18>)
 8002fc8:	f000 f86c 	bl	80030a4 <_fwalk_sglue>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	08003c4d 	.word	0x08003c4d
 8002fd8:	20000020 	.word	0x20000020

08002fdc <cleanup_stdio>:
 8002fdc:	6841      	ldr	r1, [r0, #4]
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <cleanup_stdio+0x30>)
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	0004      	movs	r4, r0
 8002fe4:	4299      	cmp	r1, r3
 8002fe6:	d001      	beq.n	8002fec <cleanup_stdio+0x10>
 8002fe8:	f000 fe30 	bl	8003c4c <_fflush_r>
 8002fec:	68a1      	ldr	r1, [r4, #8]
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <cleanup_stdio+0x34>)
 8002ff0:	4299      	cmp	r1, r3
 8002ff2:	d002      	beq.n	8002ffa <cleanup_stdio+0x1e>
 8002ff4:	0020      	movs	r0, r4
 8002ff6:	f000 fe29 	bl	8003c4c <_fflush_r>
 8002ffa:	68e1      	ldr	r1, [r4, #12]
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <cleanup_stdio+0x38>)
 8002ffe:	4299      	cmp	r1, r3
 8003000:	d002      	beq.n	8003008 <cleanup_stdio+0x2c>
 8003002:	0020      	movs	r0, r4
 8003004:	f000 fe22 	bl	8003c4c <_fflush_r>
 8003008:	bd10      	pop	{r4, pc}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	20000198 	.word	0x20000198
 8003010:	20000200 	.word	0x20000200
 8003014:	20000268 	.word	0x20000268

08003018 <global_stdio_init.part.0>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <global_stdio_init.part.0+0x28>)
 800301c:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <global_stdio_init.part.0+0x2c>)
 800301e:	2104      	movs	r1, #4
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	4809      	ldr	r0, [pc, #36]	@ (8003048 <global_stdio_init.part.0+0x30>)
 8003024:	2200      	movs	r2, #0
 8003026:	f7ff ff95 	bl	8002f54 <std>
 800302a:	2201      	movs	r2, #1
 800302c:	2109      	movs	r1, #9
 800302e:	4807      	ldr	r0, [pc, #28]	@ (800304c <global_stdio_init.part.0+0x34>)
 8003030:	f7ff ff90 	bl	8002f54 <std>
 8003034:	2202      	movs	r2, #2
 8003036:	2112      	movs	r1, #18
 8003038:	4805      	ldr	r0, [pc, #20]	@ (8003050 <global_stdio_init.part.0+0x38>)
 800303a:	f7ff ff8b 	bl	8002f54 <std>
 800303e:	bd10      	pop	{r4, pc}
 8003040:	200002d0 	.word	0x200002d0
 8003044:	08002fc1 	.word	0x08002fc1
 8003048:	20000198 	.word	0x20000198
 800304c:	20000200 	.word	0x20000200
 8003050:	20000268 	.word	0x20000268

08003054 <__sfp_lock_acquire>:
 8003054:	b510      	push	{r4, lr}
 8003056:	4802      	ldr	r0, [pc, #8]	@ (8003060 <__sfp_lock_acquire+0xc>)
 8003058:	f000 fa5d 	bl	8003516 <__retarget_lock_acquire_recursive>
 800305c:	bd10      	pop	{r4, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	200002d9 	.word	0x200002d9

08003064 <__sfp_lock_release>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4802      	ldr	r0, [pc, #8]	@ (8003070 <__sfp_lock_release+0xc>)
 8003068:	f000 fa56 	bl	8003518 <__retarget_lock_release_recursive>
 800306c:	bd10      	pop	{r4, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	200002d9 	.word	0x200002d9

08003074 <__sinit>:
 8003074:	b510      	push	{r4, lr}
 8003076:	0004      	movs	r4, r0
 8003078:	f7ff ffec 	bl	8003054 <__sfp_lock_acquire>
 800307c:	6a23      	ldr	r3, [r4, #32]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <__sinit+0x14>
 8003082:	f7ff ffef 	bl	8003064 <__sfp_lock_release>
 8003086:	bd10      	pop	{r4, pc}
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <__sinit+0x28>)
 800308a:	6223      	str	r3, [r4, #32]
 800308c:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <__sinit+0x2c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f6      	bne.n	8003082 <__sinit+0xe>
 8003094:	f7ff ffc0 	bl	8003018 <global_stdio_init.part.0>
 8003098:	e7f3      	b.n	8003082 <__sinit+0xe>
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	08002fdd 	.word	0x08002fdd
 80030a0:	200002d0 	.word	0x200002d0

080030a4 <_fwalk_sglue>:
 80030a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030a6:	0014      	movs	r4, r2
 80030a8:	2600      	movs	r6, #0
 80030aa:	9000      	str	r0, [sp, #0]
 80030ac:	9101      	str	r1, [sp, #4]
 80030ae:	68a5      	ldr	r5, [r4, #8]
 80030b0:	6867      	ldr	r7, [r4, #4]
 80030b2:	3f01      	subs	r7, #1
 80030b4:	d504      	bpl.n	80030c0 <_fwalk_sglue+0x1c>
 80030b6:	6824      	ldr	r4, [r4, #0]
 80030b8:	2c00      	cmp	r4, #0
 80030ba:	d1f8      	bne.n	80030ae <_fwalk_sglue+0xa>
 80030bc:	0030      	movs	r0, r6
 80030be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030c0:	89ab      	ldrh	r3, [r5, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d908      	bls.n	80030d8 <_fwalk_sglue+0x34>
 80030c6:	220e      	movs	r2, #14
 80030c8:	5eab      	ldrsh	r3, [r5, r2]
 80030ca:	3301      	adds	r3, #1
 80030cc:	d004      	beq.n	80030d8 <_fwalk_sglue+0x34>
 80030ce:	0029      	movs	r1, r5
 80030d0:	9800      	ldr	r0, [sp, #0]
 80030d2:	9b01      	ldr	r3, [sp, #4]
 80030d4:	4798      	blx	r3
 80030d6:	4306      	orrs	r6, r0
 80030d8:	3568      	adds	r5, #104	@ 0x68
 80030da:	e7ea      	b.n	80030b2 <_fwalk_sglue+0xe>

080030dc <iprintf>:
 80030dc:	b40f      	push	{r0, r1, r2, r3}
 80030de:	b507      	push	{r0, r1, r2, lr}
 80030e0:	4905      	ldr	r1, [pc, #20]	@ (80030f8 <iprintf+0x1c>)
 80030e2:	ab04      	add	r3, sp, #16
 80030e4:	6808      	ldr	r0, [r1, #0]
 80030e6:	cb04      	ldmia	r3!, {r2}
 80030e8:	6881      	ldr	r1, [r0, #8]
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	f000 fa90 	bl	8003610 <_vfiprintf_r>
 80030f0:	b003      	add	sp, #12
 80030f2:	bc08      	pop	{r3}
 80030f4:	b004      	add	sp, #16
 80030f6:	4718      	bx	r3
 80030f8:	2000001c 	.word	0x2000001c

080030fc <_puts_r>:
 80030fc:	6a03      	ldr	r3, [r0, #32]
 80030fe:	b570      	push	{r4, r5, r6, lr}
 8003100:	0005      	movs	r5, r0
 8003102:	000e      	movs	r6, r1
 8003104:	6884      	ldr	r4, [r0, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <_puts_r+0x12>
 800310a:	f7ff ffb3 	bl	8003074 <__sinit>
 800310e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003110:	07db      	lsls	r3, r3, #31
 8003112:	d405      	bmi.n	8003120 <_puts_r+0x24>
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	059b      	lsls	r3, r3, #22
 8003118:	d402      	bmi.n	8003120 <_puts_r+0x24>
 800311a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800311c:	f000 f9fb 	bl	8003516 <__retarget_lock_acquire_recursive>
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	071b      	lsls	r3, r3, #28
 8003124:	d502      	bpl.n	800312c <_puts_r+0x30>
 8003126:	6923      	ldr	r3, [r4, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11f      	bne.n	800316c <_puts_r+0x70>
 800312c:	0021      	movs	r1, r4
 800312e:	0028      	movs	r0, r5
 8003130:	f000 f8d2 	bl	80032d8 <__swsetup_r>
 8003134:	2800      	cmp	r0, #0
 8003136:	d019      	beq.n	800316c <_puts_r+0x70>
 8003138:	2501      	movs	r5, #1
 800313a:	426d      	negs	r5, r5
 800313c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800313e:	07db      	lsls	r3, r3, #31
 8003140:	d405      	bmi.n	800314e <_puts_r+0x52>
 8003142:	89a3      	ldrh	r3, [r4, #12]
 8003144:	059b      	lsls	r3, r3, #22
 8003146:	d402      	bmi.n	800314e <_puts_r+0x52>
 8003148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800314a:	f000 f9e5 	bl	8003518 <__retarget_lock_release_recursive>
 800314e:	0028      	movs	r0, r5
 8003150:	bd70      	pop	{r4, r5, r6, pc}
 8003152:	3601      	adds	r6, #1
 8003154:	60a3      	str	r3, [r4, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	da04      	bge.n	8003164 <_puts_r+0x68>
 800315a:	69a2      	ldr	r2, [r4, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	dc16      	bgt.n	800318e <_puts_r+0x92>
 8003160:	290a      	cmp	r1, #10
 8003162:	d014      	beq.n	800318e <_puts_r+0x92>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	6022      	str	r2, [r4, #0]
 800316a:	7019      	strb	r1, [r3, #0]
 800316c:	68a3      	ldr	r3, [r4, #8]
 800316e:	7831      	ldrb	r1, [r6, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	2900      	cmp	r1, #0
 8003174:	d1ed      	bne.n	8003152 <_puts_r+0x56>
 8003176:	60a3      	str	r3, [r4, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da0f      	bge.n	800319c <_puts_r+0xa0>
 800317c:	0022      	movs	r2, r4
 800317e:	0028      	movs	r0, r5
 8003180:	310a      	adds	r1, #10
 8003182:	f000 f867 	bl	8003254 <__swbuf_r>
 8003186:	3001      	adds	r0, #1
 8003188:	d0d6      	beq.n	8003138 <_puts_r+0x3c>
 800318a:	250a      	movs	r5, #10
 800318c:	e7d6      	b.n	800313c <_puts_r+0x40>
 800318e:	0022      	movs	r2, r4
 8003190:	0028      	movs	r0, r5
 8003192:	f000 f85f 	bl	8003254 <__swbuf_r>
 8003196:	3001      	adds	r0, #1
 8003198:	d1e8      	bne.n	800316c <_puts_r+0x70>
 800319a:	e7cd      	b.n	8003138 <_puts_r+0x3c>
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	6022      	str	r2, [r4, #0]
 80031a2:	220a      	movs	r2, #10
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e7f0      	b.n	800318a <_puts_r+0x8e>

080031a8 <puts>:
 80031a8:	b510      	push	{r4, lr}
 80031aa:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <puts+0x10>)
 80031ac:	0001      	movs	r1, r0
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	f7ff ffa4 	bl	80030fc <_puts_r>
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	2000001c 	.word	0x2000001c

080031bc <__sread>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	000c      	movs	r4, r1
 80031c0:	250e      	movs	r5, #14
 80031c2:	5f49      	ldrsh	r1, [r1, r5]
 80031c4:	f000 f942 	bl	800344c <_read_r>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	db03      	blt.n	80031d4 <__sread+0x18>
 80031cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031ce:	181b      	adds	r3, r3, r0
 80031d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	4a02      	ldr	r2, [pc, #8]	@ (80031e0 <__sread+0x24>)
 80031d8:	4013      	ands	r3, r2
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	e7f9      	b.n	80031d2 <__sread+0x16>
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	ffffefff 	.word	0xffffefff

080031e4 <__swrite>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	001f      	movs	r7, r3
 80031e8:	898b      	ldrh	r3, [r1, #12]
 80031ea:	0005      	movs	r5, r0
 80031ec:	000c      	movs	r4, r1
 80031ee:	0016      	movs	r6, r2
 80031f0:	05db      	lsls	r3, r3, #23
 80031f2:	d505      	bpl.n	8003200 <__swrite+0x1c>
 80031f4:	230e      	movs	r3, #14
 80031f6:	5ec9      	ldrsh	r1, [r1, r3]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2302      	movs	r3, #2
 80031fc:	f000 f912 	bl	8003424 <_lseek_r>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	4a05      	ldr	r2, [pc, #20]	@ (8003218 <__swrite+0x34>)
 8003204:	0028      	movs	r0, r5
 8003206:	4013      	ands	r3, r2
 8003208:	81a3      	strh	r3, [r4, #12]
 800320a:	0032      	movs	r2, r6
 800320c:	230e      	movs	r3, #14
 800320e:	5ee1      	ldrsh	r1, [r4, r3]
 8003210:	003b      	movs	r3, r7
 8003212:	f000 f941 	bl	8003498 <_write_r>
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	ffffefff 	.word	0xffffefff

0800321c <__sseek>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	000c      	movs	r4, r1
 8003220:	250e      	movs	r5, #14
 8003222:	5f49      	ldrsh	r1, [r1, r5]
 8003224:	f000 f8fe 	bl	8003424 <_lseek_r>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	1c42      	adds	r2, r0, #1
 800322c:	d103      	bne.n	8003236 <__sseek+0x1a>
 800322e:	4a05      	ldr	r2, [pc, #20]	@ (8003244 <__sseek+0x28>)
 8003230:	4013      	ands	r3, r2
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	bd70      	pop	{r4, r5, r6, pc}
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	0152      	lsls	r2, r2, #5
 800323a:	4313      	orrs	r3, r2
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003240:	e7f8      	b.n	8003234 <__sseek+0x18>
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	ffffefff 	.word	0xffffefff

08003248 <__sclose>:
 8003248:	b510      	push	{r4, lr}
 800324a:	230e      	movs	r3, #14
 800324c:	5ec9      	ldrsh	r1, [r1, r3]
 800324e:	f000 f8d7 	bl	8003400 <_close_r>
 8003252:	bd10      	pop	{r4, pc}

08003254 <__swbuf_r>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	0006      	movs	r6, r0
 8003258:	000d      	movs	r5, r1
 800325a:	0014      	movs	r4, r2
 800325c:	2800      	cmp	r0, #0
 800325e:	d004      	beq.n	800326a <__swbuf_r+0x16>
 8003260:	6a03      	ldr	r3, [r0, #32]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <__swbuf_r+0x16>
 8003266:	f7ff ff05 	bl	8003074 <__sinit>
 800326a:	69a3      	ldr	r3, [r4, #24]
 800326c:	60a3      	str	r3, [r4, #8]
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	071b      	lsls	r3, r3, #28
 8003272:	d502      	bpl.n	800327a <__swbuf_r+0x26>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <__swbuf_r+0x3a>
 800327a:	0021      	movs	r1, r4
 800327c:	0030      	movs	r0, r6
 800327e:	f000 f82b 	bl	80032d8 <__swsetup_r>
 8003282:	2800      	cmp	r0, #0
 8003284:	d003      	beq.n	800328e <__swbuf_r+0x3a>
 8003286:	2501      	movs	r5, #1
 8003288:	426d      	negs	r5, r5
 800328a:	0028      	movs	r0, r5
 800328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800328e:	6923      	ldr	r3, [r4, #16]
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	b2ef      	uxtb	r7, r5
 8003294:	1ac0      	subs	r0, r0, r3
 8003296:	6963      	ldr	r3, [r4, #20]
 8003298:	b2ed      	uxtb	r5, r5
 800329a:	4283      	cmp	r3, r0
 800329c:	dc05      	bgt.n	80032aa <__swbuf_r+0x56>
 800329e:	0021      	movs	r1, r4
 80032a0:	0030      	movs	r0, r6
 80032a2:	f000 fcd3 	bl	8003c4c <_fflush_r>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d1ed      	bne.n	8003286 <__swbuf_r+0x32>
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	3001      	adds	r0, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	60a3      	str	r3, [r4, #8]
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	6022      	str	r2, [r4, #0]
 80032b8:	701f      	strb	r7, [r3, #0]
 80032ba:	6963      	ldr	r3, [r4, #20]
 80032bc:	4283      	cmp	r3, r0
 80032be:	d004      	beq.n	80032ca <__swbuf_r+0x76>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	07db      	lsls	r3, r3, #31
 80032c4:	d5e1      	bpl.n	800328a <__swbuf_r+0x36>
 80032c6:	2d0a      	cmp	r5, #10
 80032c8:	d1df      	bne.n	800328a <__swbuf_r+0x36>
 80032ca:	0021      	movs	r1, r4
 80032cc:	0030      	movs	r0, r6
 80032ce:	f000 fcbd 	bl	8003c4c <_fflush_r>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d0d9      	beq.n	800328a <__swbuf_r+0x36>
 80032d6:	e7d6      	b.n	8003286 <__swbuf_r+0x32>

080032d8 <__swsetup_r>:
 80032d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003390 <__swsetup_r+0xb8>)
 80032da:	b570      	push	{r4, r5, r6, lr}
 80032dc:	0005      	movs	r5, r0
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	000c      	movs	r4, r1
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d004      	beq.n	80032f0 <__swsetup_r+0x18>
 80032e6:	6a03      	ldr	r3, [r0, #32]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <__swsetup_r+0x18>
 80032ec:	f7ff fec2 	bl	8003074 <__sinit>
 80032f0:	220c      	movs	r2, #12
 80032f2:	5ea3      	ldrsh	r3, [r4, r2]
 80032f4:	071a      	lsls	r2, r3, #28
 80032f6:	d423      	bmi.n	8003340 <__swsetup_r+0x68>
 80032f8:	06da      	lsls	r2, r3, #27
 80032fa:	d407      	bmi.n	800330c <__swsetup_r+0x34>
 80032fc:	2209      	movs	r2, #9
 80032fe:	602a      	str	r2, [r5, #0]
 8003300:	2240      	movs	r2, #64	@ 0x40
 8003302:	2001      	movs	r0, #1
 8003304:	4313      	orrs	r3, r2
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	4240      	negs	r0, r0
 800330a:	e03a      	b.n	8003382 <__swsetup_r+0xaa>
 800330c:	075b      	lsls	r3, r3, #29
 800330e:	d513      	bpl.n	8003338 <__swsetup_r+0x60>
 8003310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003312:	2900      	cmp	r1, #0
 8003314:	d008      	beq.n	8003328 <__swsetup_r+0x50>
 8003316:	0023      	movs	r3, r4
 8003318:	3344      	adds	r3, #68	@ 0x44
 800331a:	4299      	cmp	r1, r3
 800331c:	d002      	beq.n	8003324 <__swsetup_r+0x4c>
 800331e:	0028      	movs	r0, r5
 8003320:	f000 f8fc 	bl	800351c <_free_r>
 8003324:	2300      	movs	r3, #0
 8003326:	6363      	str	r3, [r4, #52]	@ 0x34
 8003328:	2224      	movs	r2, #36	@ 0x24
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	4393      	bics	r3, r2
 800332e:	81a3      	strh	r3, [r4, #12]
 8003330:	2300      	movs	r3, #0
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	2308      	movs	r3, #8
 800333a:	89a2      	ldrh	r2, [r4, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	6923      	ldr	r3, [r4, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <__swsetup_r+0x86>
 8003346:	21a0      	movs	r1, #160	@ 0xa0
 8003348:	2280      	movs	r2, #128	@ 0x80
 800334a:	89a3      	ldrh	r3, [r4, #12]
 800334c:	0089      	lsls	r1, r1, #2
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	400b      	ands	r3, r1
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <__swsetup_r+0x86>
 8003356:	0021      	movs	r1, r4
 8003358:	0028      	movs	r0, r5
 800335a:	f000 fccd 	bl	8003cf8 <__smakebuf_r>
 800335e:	220c      	movs	r2, #12
 8003360:	5ea3      	ldrsh	r3, [r4, r2]
 8003362:	2101      	movs	r1, #1
 8003364:	001a      	movs	r2, r3
 8003366:	400a      	ands	r2, r1
 8003368:	420b      	tst	r3, r1
 800336a:	d00b      	beq.n	8003384 <__swsetup_r+0xac>
 800336c:	2200      	movs	r2, #0
 800336e:	60a2      	str	r2, [r4, #8]
 8003370:	6962      	ldr	r2, [r4, #20]
 8003372:	4252      	negs	r2, r2
 8003374:	61a2      	str	r2, [r4, #24]
 8003376:	2000      	movs	r0, #0
 8003378:	6922      	ldr	r2, [r4, #16]
 800337a:	4282      	cmp	r2, r0
 800337c:	d101      	bne.n	8003382 <__swsetup_r+0xaa>
 800337e:	061a      	lsls	r2, r3, #24
 8003380:	d4be      	bmi.n	8003300 <__swsetup_r+0x28>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	0799      	lsls	r1, r3, #30
 8003386:	d400      	bmi.n	800338a <__swsetup_r+0xb2>
 8003388:	6962      	ldr	r2, [r4, #20]
 800338a:	60a2      	str	r2, [r4, #8]
 800338c:	e7f3      	b.n	8003376 <__swsetup_r+0x9e>
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	2000001c 	.word	0x2000001c

08003394 <memcmp>:
 8003394:	b530      	push	{r4, r5, lr}
 8003396:	2400      	movs	r4, #0
 8003398:	3901      	subs	r1, #1
 800339a:	42a2      	cmp	r2, r4
 800339c:	d101      	bne.n	80033a2 <memcmp+0xe>
 800339e:	2000      	movs	r0, #0
 80033a0:	e005      	b.n	80033ae <memcmp+0x1a>
 80033a2:	5d03      	ldrb	r3, [r0, r4]
 80033a4:	3401      	adds	r4, #1
 80033a6:	5d0d      	ldrb	r5, [r1, r4]
 80033a8:	42ab      	cmp	r3, r5
 80033aa:	d0f6      	beq.n	800339a <memcmp+0x6>
 80033ac:	1b58      	subs	r0, r3, r5
 80033ae:	bd30      	pop	{r4, r5, pc}

080033b0 <memset>:
 80033b0:	0003      	movs	r3, r0
 80033b2:	1882      	adds	r2, r0, r2
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d100      	bne.n	80033ba <memset+0xa>
 80033b8:	4770      	bx	lr
 80033ba:	7019      	strb	r1, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	e7f9      	b.n	80033b4 <memset+0x4>

080033c0 <strchr>:
 80033c0:	b2c9      	uxtb	r1, r1
 80033c2:	7803      	ldrb	r3, [r0, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <strchr+0x12>
 80033c8:	428b      	cmp	r3, r1
 80033ca:	d100      	bne.n	80033ce <strchr+0xe>
 80033cc:	4770      	bx	lr
 80033ce:	3001      	adds	r0, #1
 80033d0:	e7f7      	b.n	80033c2 <strchr+0x2>
 80033d2:	424b      	negs	r3, r1
 80033d4:	4159      	adcs	r1, r3
 80033d6:	4249      	negs	r1, r1
 80033d8:	4008      	ands	r0, r1
 80033da:	e7f7      	b.n	80033cc <strchr+0xc>

080033dc <strncmp>:
 80033dc:	b530      	push	{r4, r5, lr}
 80033de:	0005      	movs	r5, r0
 80033e0:	1e10      	subs	r0, r2, #0
 80033e2:	d00b      	beq.n	80033fc <strncmp+0x20>
 80033e4:	2400      	movs	r4, #0
 80033e6:	3a01      	subs	r2, #1
 80033e8:	5d2b      	ldrb	r3, [r5, r4]
 80033ea:	5d08      	ldrb	r0, [r1, r4]
 80033ec:	4283      	cmp	r3, r0
 80033ee:	d104      	bne.n	80033fa <strncmp+0x1e>
 80033f0:	4294      	cmp	r4, r2
 80033f2:	d002      	beq.n	80033fa <strncmp+0x1e>
 80033f4:	3401      	adds	r4, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f6      	bne.n	80033e8 <strncmp+0xc>
 80033fa:	1a18      	subs	r0, r3, r0
 80033fc:	bd30      	pop	{r4, r5, pc}
	...

08003400 <_close_r>:
 8003400:	2300      	movs	r3, #0
 8003402:	b570      	push	{r4, r5, r6, lr}
 8003404:	4d06      	ldr	r5, [pc, #24]	@ (8003420 <_close_r+0x20>)
 8003406:	0004      	movs	r4, r0
 8003408:	0008      	movs	r0, r1
 800340a:	602b      	str	r3, [r5, #0]
 800340c:	f7fd fb95 	bl	8000b3a <_close>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d103      	bne.n	800341c <_close_r+0x1c>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d000      	beq.n	800341c <_close_r+0x1c>
 800341a:	6023      	str	r3, [r4, #0]
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	200002d4 	.word	0x200002d4

08003424 <_lseek_r>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	0004      	movs	r4, r0
 8003428:	0008      	movs	r0, r1
 800342a:	0011      	movs	r1, r2
 800342c:	001a      	movs	r2, r3
 800342e:	2300      	movs	r3, #0
 8003430:	4d05      	ldr	r5, [pc, #20]	@ (8003448 <_lseek_r+0x24>)
 8003432:	602b      	str	r3, [r5, #0]
 8003434:	f7fd fb8b 	bl	8000b4e <_lseek>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d103      	bne.n	8003444 <_lseek_r+0x20>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d000      	beq.n	8003444 <_lseek_r+0x20>
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	200002d4 	.word	0x200002d4

0800344c <_read_r>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	0004      	movs	r4, r0
 8003450:	0008      	movs	r0, r1
 8003452:	0011      	movs	r1, r2
 8003454:	001a      	movs	r2, r3
 8003456:	2300      	movs	r3, #0
 8003458:	4d05      	ldr	r5, [pc, #20]	@ (8003470 <_read_r+0x24>)
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd fb53 	bl	8000b06 <_read>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d103      	bne.n	800346c <_read_r+0x20>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d000      	beq.n	800346c <_read_r+0x20>
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	200002d4 	.word	0x200002d4

08003474 <_sbrk_r>:
 8003474:	2300      	movs	r3, #0
 8003476:	b570      	push	{r4, r5, r6, lr}
 8003478:	4d06      	ldr	r5, [pc, #24]	@ (8003494 <_sbrk_r+0x20>)
 800347a:	0004      	movs	r4, r0
 800347c:	0008      	movs	r0, r1
 800347e:	602b      	str	r3, [r5, #0]
 8003480:	f7fd fb68 	bl	8000b54 <_sbrk>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d103      	bne.n	8003490 <_sbrk_r+0x1c>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d000      	beq.n	8003490 <_sbrk_r+0x1c>
 800348e:	6023      	str	r3, [r4, #0]
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	200002d4 	.word	0x200002d4

08003498 <_write_r>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	0004      	movs	r4, r0
 800349c:	0008      	movs	r0, r1
 800349e:	0011      	movs	r1, r2
 80034a0:	001a      	movs	r2, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	4d05      	ldr	r5, [pc, #20]	@ (80034bc <_write_r+0x24>)
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd fb3a 	bl	8000b20 <_write>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d103      	bne.n	80034b8 <_write_r+0x20>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d000      	beq.n	80034b8 <_write_r+0x20>
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	200002d4 	.word	0x200002d4

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	@ (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	2000001c 	.word	0x2000001c

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4c0c      	ldr	r4, [pc, #48]	@ (8003504 <__libc_init_array+0x38>)
 80034d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	2600      	movs	r6, #0
 80034de:	f000 fc7d 	bl	8003ddc <_init>
 80034e2:	4c0a      	ldr	r4, [pc, #40]	@ (800350c <__libc_init_array+0x40>)
 80034e4:	4d0a      	ldr	r5, [pc, #40]	@ (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	00b3      	lsls	r3, r6, #2
 80034f2:	58eb      	ldr	r3, [r5, r3]
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	00b3      	lsls	r3, r6, #2
 80034fc:	58eb      	ldr	r3, [r5, r3]
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	0800403c 	.word	0x0800403c
 8003508:	0800403c 	.word	0x0800403c
 800350c:	08004040 	.word	0x08004040
 8003510:	0800403c 	.word	0x0800403c

08003514 <__retarget_lock_init_recursive>:
 8003514:	4770      	bx	lr

08003516 <__retarget_lock_acquire_recursive>:
 8003516:	4770      	bx	lr

08003518 <__retarget_lock_release_recursive>:
 8003518:	4770      	bx	lr
	...

0800351c <_free_r>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	0005      	movs	r5, r0
 8003520:	1e0c      	subs	r4, r1, #0
 8003522:	d010      	beq.n	8003546 <_free_r+0x2a>
 8003524:	3c04      	subs	r4, #4
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da00      	bge.n	800352e <_free_r+0x12>
 800352c:	18e4      	adds	r4, r4, r3
 800352e:	0028      	movs	r0, r5
 8003530:	f7ff fcc6 	bl	8002ec0 <__malloc_lock>
 8003534:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <_free_r+0x90>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <_free_r+0x2c>
 800353c:	6063      	str	r3, [r4, #4]
 800353e:	6014      	str	r4, [r2, #0]
 8003540:	0028      	movs	r0, r5
 8003542:	f7ff fcc5 	bl	8002ed0 <__malloc_unlock>
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	42a3      	cmp	r3, r4
 800354a:	d908      	bls.n	800355e <_free_r+0x42>
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	1821      	adds	r1, r4, r0
 8003550:	428b      	cmp	r3, r1
 8003552:	d1f3      	bne.n	800353c <_free_r+0x20>
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	1809      	adds	r1, r1, r0
 800355a:	6021      	str	r1, [r4, #0]
 800355c:	e7ee      	b.n	800353c <_free_r+0x20>
 800355e:	001a      	movs	r2, r3
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <_free_r+0x4e>
 8003566:	42a3      	cmp	r3, r4
 8003568:	d9f9      	bls.n	800355e <_free_r+0x42>
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	1850      	adds	r0, r2, r1
 800356e:	42a0      	cmp	r0, r4
 8003570:	d10b      	bne.n	800358a <_free_r+0x6e>
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	1809      	adds	r1, r1, r0
 8003576:	1850      	adds	r0, r2, r1
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	4283      	cmp	r3, r0
 800357c:	d1e0      	bne.n	8003540 <_free_r+0x24>
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	1841      	adds	r1, r0, r1
 8003584:	6011      	str	r1, [r2, #0]
 8003586:	6053      	str	r3, [r2, #4]
 8003588:	e7da      	b.n	8003540 <_free_r+0x24>
 800358a:	42a0      	cmp	r0, r4
 800358c:	d902      	bls.n	8003594 <_free_r+0x78>
 800358e:	230c      	movs	r3, #12
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	e7d5      	b.n	8003540 <_free_r+0x24>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	1821      	adds	r1, r4, r0
 8003598:	428b      	cmp	r3, r1
 800359a:	d103      	bne.n	80035a4 <_free_r+0x88>
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	1809      	adds	r1, r1, r0
 80035a2:	6021      	str	r1, [r4, #0]
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	6054      	str	r4, [r2, #4]
 80035a8:	e7ca      	b.n	8003540 <_free_r+0x24>
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	20000194 	.word	0x20000194

080035b0 <_malloc_usable_size_r>:
 80035b0:	1f0b      	subs	r3, r1, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1f18      	subs	r0, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da01      	bge.n	80035be <_malloc_usable_size_r+0xe>
 80035ba:	580b      	ldr	r3, [r1, r0]
 80035bc:	18c0      	adds	r0, r0, r3
 80035be:	4770      	bx	lr

080035c0 <__sfputc_r>:
 80035c0:	6893      	ldr	r3, [r2, #8]
 80035c2:	b510      	push	{r4, lr}
 80035c4:	3b01      	subs	r3, #1
 80035c6:	6093      	str	r3, [r2, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	da04      	bge.n	80035d6 <__sfputc_r+0x16>
 80035cc:	6994      	ldr	r4, [r2, #24]
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	db07      	blt.n	80035e2 <__sfputc_r+0x22>
 80035d2:	290a      	cmp	r1, #10
 80035d4:	d005      	beq.n	80035e2 <__sfputc_r+0x22>
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	1c58      	adds	r0, r3, #1
 80035da:	6010      	str	r0, [r2, #0]
 80035dc:	7019      	strb	r1, [r3, #0]
 80035de:	0008      	movs	r0, r1
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	f7ff fe37 	bl	8003254 <__swbuf_r>
 80035e6:	0001      	movs	r1, r0
 80035e8:	e7f9      	b.n	80035de <__sfputc_r+0x1e>

080035ea <__sfputs_r>:
 80035ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ec:	0006      	movs	r6, r0
 80035ee:	000f      	movs	r7, r1
 80035f0:	0014      	movs	r4, r2
 80035f2:	18d5      	adds	r5, r2, r3
 80035f4:	42ac      	cmp	r4, r5
 80035f6:	d101      	bne.n	80035fc <__sfputs_r+0x12>
 80035f8:	2000      	movs	r0, #0
 80035fa:	e007      	b.n	800360c <__sfputs_r+0x22>
 80035fc:	7821      	ldrb	r1, [r4, #0]
 80035fe:	003a      	movs	r2, r7
 8003600:	0030      	movs	r0, r6
 8003602:	f7ff ffdd 	bl	80035c0 <__sfputc_r>
 8003606:	3401      	adds	r4, #1
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d1f3      	bne.n	80035f4 <__sfputs_r+0xa>
 800360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003610 <_vfiprintf_r>:
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	b0a1      	sub	sp, #132	@ 0x84
 8003614:	000f      	movs	r7, r1
 8003616:	0015      	movs	r5, r2
 8003618:	001e      	movs	r6, r3
 800361a:	9003      	str	r0, [sp, #12]
 800361c:	2800      	cmp	r0, #0
 800361e:	d004      	beq.n	800362a <_vfiprintf_r+0x1a>
 8003620:	6a03      	ldr	r3, [r0, #32]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <_vfiprintf_r+0x1a>
 8003626:	f7ff fd25 	bl	8003074 <__sinit>
 800362a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800362c:	07db      	lsls	r3, r3, #31
 800362e:	d405      	bmi.n	800363c <_vfiprintf_r+0x2c>
 8003630:	89bb      	ldrh	r3, [r7, #12]
 8003632:	059b      	lsls	r3, r3, #22
 8003634:	d402      	bmi.n	800363c <_vfiprintf_r+0x2c>
 8003636:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003638:	f7ff ff6d 	bl	8003516 <__retarget_lock_acquire_recursive>
 800363c:	89bb      	ldrh	r3, [r7, #12]
 800363e:	071b      	lsls	r3, r3, #28
 8003640:	d502      	bpl.n	8003648 <_vfiprintf_r+0x38>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <_vfiprintf_r+0x60>
 8003648:	0039      	movs	r1, r7
 800364a:	9803      	ldr	r0, [sp, #12]
 800364c:	f7ff fe44 	bl	80032d8 <__swsetup_r>
 8003650:	2800      	cmp	r0, #0
 8003652:	d00d      	beq.n	8003670 <_vfiprintf_r+0x60>
 8003654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003656:	07db      	lsls	r3, r3, #31
 8003658:	d503      	bpl.n	8003662 <_vfiprintf_r+0x52>
 800365a:	2001      	movs	r0, #1
 800365c:	4240      	negs	r0, r0
 800365e:	b021      	add	sp, #132	@ 0x84
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003662:	89bb      	ldrh	r3, [r7, #12]
 8003664:	059b      	lsls	r3, r3, #22
 8003666:	d4f8      	bmi.n	800365a <_vfiprintf_r+0x4a>
 8003668:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800366a:	f7ff ff55 	bl	8003518 <__retarget_lock_release_recursive>
 800366e:	e7f4      	b.n	800365a <_vfiprintf_r+0x4a>
 8003670:	2300      	movs	r3, #0
 8003672:	ac08      	add	r4, sp, #32
 8003674:	6163      	str	r3, [r4, #20]
 8003676:	3320      	adds	r3, #32
 8003678:	7663      	strb	r3, [r4, #25]
 800367a:	3310      	adds	r3, #16
 800367c:	76a3      	strb	r3, [r4, #26]
 800367e:	9607      	str	r6, [sp, #28]
 8003680:	002e      	movs	r6, r5
 8003682:	7833      	ldrb	r3, [r6, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <_vfiprintf_r+0x7c>
 8003688:	2b25      	cmp	r3, #37	@ 0x25
 800368a:	d148      	bne.n	800371e <_vfiprintf_r+0x10e>
 800368c:	1b73      	subs	r3, r6, r5
 800368e:	9305      	str	r3, [sp, #20]
 8003690:	42ae      	cmp	r6, r5
 8003692:	d00b      	beq.n	80036ac <_vfiprintf_r+0x9c>
 8003694:	002a      	movs	r2, r5
 8003696:	0039      	movs	r1, r7
 8003698:	9803      	ldr	r0, [sp, #12]
 800369a:	f7ff ffa6 	bl	80035ea <__sfputs_r>
 800369e:	3001      	adds	r0, #1
 80036a0:	d100      	bne.n	80036a4 <_vfiprintf_r+0x94>
 80036a2:	e0ae      	b.n	8003802 <_vfiprintf_r+0x1f2>
 80036a4:	6963      	ldr	r3, [r4, #20]
 80036a6:	9a05      	ldr	r2, [sp, #20]
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	6163      	str	r3, [r4, #20]
 80036ac:	7833      	ldrb	r3, [r6, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d100      	bne.n	80036b4 <_vfiprintf_r+0xa4>
 80036b2:	e0a6      	b.n	8003802 <_vfiprintf_r+0x1f2>
 80036b4:	2201      	movs	r2, #1
 80036b6:	2300      	movs	r3, #0
 80036b8:	4252      	negs	r2, r2
 80036ba:	6062      	str	r2, [r4, #4]
 80036bc:	a904      	add	r1, sp, #16
 80036be:	3254      	adds	r2, #84	@ 0x54
 80036c0:	1852      	adds	r2, r2, r1
 80036c2:	1c75      	adds	r5, r6, #1
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	60e3      	str	r3, [r4, #12]
 80036c8:	60a3      	str	r3, [r4, #8]
 80036ca:	7013      	strb	r3, [r2, #0]
 80036cc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80036ce:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <_vfiprintf_r+0x224>)
 80036d0:	2205      	movs	r2, #5
 80036d2:	0018      	movs	r0, r3
 80036d4:	7829      	ldrb	r1, [r5, #0]
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	f000 fb74 	bl	8003dc4 <memchr>
 80036dc:	1c6e      	adds	r6, r5, #1
 80036de:	2800      	cmp	r0, #0
 80036e0:	d11f      	bne.n	8003722 <_vfiprintf_r+0x112>
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	06d3      	lsls	r3, r2, #27
 80036e6:	d504      	bpl.n	80036f2 <_vfiprintf_r+0xe2>
 80036e8:	2353      	movs	r3, #83	@ 0x53
 80036ea:	a904      	add	r1, sp, #16
 80036ec:	185b      	adds	r3, r3, r1
 80036ee:	2120      	movs	r1, #32
 80036f0:	7019      	strb	r1, [r3, #0]
 80036f2:	0713      	lsls	r3, r2, #28
 80036f4:	d504      	bpl.n	8003700 <_vfiprintf_r+0xf0>
 80036f6:	2353      	movs	r3, #83	@ 0x53
 80036f8:	a904      	add	r1, sp, #16
 80036fa:	185b      	adds	r3, r3, r1
 80036fc:	212b      	movs	r1, #43	@ 0x2b
 80036fe:	7019      	strb	r1, [r3, #0]
 8003700:	782b      	ldrb	r3, [r5, #0]
 8003702:	2b2a      	cmp	r3, #42	@ 0x2a
 8003704:	d016      	beq.n	8003734 <_vfiprintf_r+0x124>
 8003706:	002e      	movs	r6, r5
 8003708:	2100      	movs	r1, #0
 800370a:	200a      	movs	r0, #10
 800370c:	68e3      	ldr	r3, [r4, #12]
 800370e:	7832      	ldrb	r2, [r6, #0]
 8003710:	1c75      	adds	r5, r6, #1
 8003712:	3a30      	subs	r2, #48	@ 0x30
 8003714:	2a09      	cmp	r2, #9
 8003716:	d950      	bls.n	80037ba <_vfiprintf_r+0x1aa>
 8003718:	2900      	cmp	r1, #0
 800371a:	d111      	bne.n	8003740 <_vfiprintf_r+0x130>
 800371c:	e017      	b.n	800374e <_vfiprintf_r+0x13e>
 800371e:	3601      	adds	r6, #1
 8003720:	e7af      	b.n	8003682 <_vfiprintf_r+0x72>
 8003722:	9b05      	ldr	r3, [sp, #20]
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	1ac0      	subs	r0, r0, r3
 8003728:	2301      	movs	r3, #1
 800372a:	4083      	lsls	r3, r0
 800372c:	4313      	orrs	r3, r2
 800372e:	0035      	movs	r5, r6
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	e7cc      	b.n	80036ce <_vfiprintf_r+0xbe>
 8003734:	9b07      	ldr	r3, [sp, #28]
 8003736:	1d19      	adds	r1, r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	9107      	str	r1, [sp, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db01      	blt.n	8003744 <_vfiprintf_r+0x134>
 8003740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003742:	e004      	b.n	800374e <_vfiprintf_r+0x13e>
 8003744:	425b      	negs	r3, r3
 8003746:	60e3      	str	r3, [r4, #12]
 8003748:	2302      	movs	r3, #2
 800374a:	4313      	orrs	r3, r2
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	7833      	ldrb	r3, [r6, #0]
 8003750:	2b2e      	cmp	r3, #46	@ 0x2e
 8003752:	d10c      	bne.n	800376e <_vfiprintf_r+0x15e>
 8003754:	7873      	ldrb	r3, [r6, #1]
 8003756:	2b2a      	cmp	r3, #42	@ 0x2a
 8003758:	d134      	bne.n	80037c4 <_vfiprintf_r+0x1b4>
 800375a:	9b07      	ldr	r3, [sp, #28]
 800375c:	3602      	adds	r6, #2
 800375e:	1d1a      	adds	r2, r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	9207      	str	r2, [sp, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	da01      	bge.n	800376c <_vfiprintf_r+0x15c>
 8003768:	2301      	movs	r3, #1
 800376a:	425b      	negs	r3, r3
 800376c:	9309      	str	r3, [sp, #36]	@ 0x24
 800376e:	4d32      	ldr	r5, [pc, #200]	@ (8003838 <_vfiprintf_r+0x228>)
 8003770:	2203      	movs	r2, #3
 8003772:	0028      	movs	r0, r5
 8003774:	7831      	ldrb	r1, [r6, #0]
 8003776:	f000 fb25 	bl	8003dc4 <memchr>
 800377a:	2800      	cmp	r0, #0
 800377c:	d006      	beq.n	800378c <_vfiprintf_r+0x17c>
 800377e:	2340      	movs	r3, #64	@ 0x40
 8003780:	1b40      	subs	r0, r0, r5
 8003782:	4083      	lsls	r3, r0
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	3601      	adds	r6, #1
 8003788:	4313      	orrs	r3, r2
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	7831      	ldrb	r1, [r6, #0]
 800378e:	2206      	movs	r2, #6
 8003790:	482a      	ldr	r0, [pc, #168]	@ (800383c <_vfiprintf_r+0x22c>)
 8003792:	1c75      	adds	r5, r6, #1
 8003794:	7621      	strb	r1, [r4, #24]
 8003796:	f000 fb15 	bl	8003dc4 <memchr>
 800379a:	2800      	cmp	r0, #0
 800379c:	d040      	beq.n	8003820 <_vfiprintf_r+0x210>
 800379e:	4b28      	ldr	r3, [pc, #160]	@ (8003840 <_vfiprintf_r+0x230>)
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d122      	bne.n	80037ea <_vfiprintf_r+0x1da>
 80037a4:	2207      	movs	r2, #7
 80037a6:	9b07      	ldr	r3, [sp, #28]
 80037a8:	3307      	adds	r3, #7
 80037aa:	4393      	bics	r3, r2
 80037ac:	3308      	adds	r3, #8
 80037ae:	9307      	str	r3, [sp, #28]
 80037b0:	6963      	ldr	r3, [r4, #20]
 80037b2:	9a04      	ldr	r2, [sp, #16]
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	6163      	str	r3, [r4, #20]
 80037b8:	e762      	b.n	8003680 <_vfiprintf_r+0x70>
 80037ba:	4343      	muls	r3, r0
 80037bc:	002e      	movs	r6, r5
 80037be:	2101      	movs	r1, #1
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	e7a4      	b.n	800370e <_vfiprintf_r+0xfe>
 80037c4:	2300      	movs	r3, #0
 80037c6:	200a      	movs	r0, #10
 80037c8:	0019      	movs	r1, r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	6063      	str	r3, [r4, #4]
 80037ce:	7832      	ldrb	r2, [r6, #0]
 80037d0:	1c75      	adds	r5, r6, #1
 80037d2:	3a30      	subs	r2, #48	@ 0x30
 80037d4:	2a09      	cmp	r2, #9
 80037d6:	d903      	bls.n	80037e0 <_vfiprintf_r+0x1d0>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0c8      	beq.n	800376e <_vfiprintf_r+0x15e>
 80037dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80037de:	e7c6      	b.n	800376e <_vfiprintf_r+0x15e>
 80037e0:	4341      	muls	r1, r0
 80037e2:	002e      	movs	r6, r5
 80037e4:	2301      	movs	r3, #1
 80037e6:	1889      	adds	r1, r1, r2
 80037e8:	e7f1      	b.n	80037ce <_vfiprintf_r+0x1be>
 80037ea:	aa07      	add	r2, sp, #28
 80037ec:	9200      	str	r2, [sp, #0]
 80037ee:	0021      	movs	r1, r4
 80037f0:	003a      	movs	r2, r7
 80037f2:	4b14      	ldr	r3, [pc, #80]	@ (8003844 <_vfiprintf_r+0x234>)
 80037f4:	9803      	ldr	r0, [sp, #12]
 80037f6:	e000      	b.n	80037fa <_vfiprintf_r+0x1ea>
 80037f8:	bf00      	nop
 80037fa:	9004      	str	r0, [sp, #16]
 80037fc:	9b04      	ldr	r3, [sp, #16]
 80037fe:	3301      	adds	r3, #1
 8003800:	d1d6      	bne.n	80037b0 <_vfiprintf_r+0x1a0>
 8003802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003804:	07db      	lsls	r3, r3, #31
 8003806:	d405      	bmi.n	8003814 <_vfiprintf_r+0x204>
 8003808:	89bb      	ldrh	r3, [r7, #12]
 800380a:	059b      	lsls	r3, r3, #22
 800380c:	d402      	bmi.n	8003814 <_vfiprintf_r+0x204>
 800380e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003810:	f7ff fe82 	bl	8003518 <__retarget_lock_release_recursive>
 8003814:	89bb      	ldrh	r3, [r7, #12]
 8003816:	065b      	lsls	r3, r3, #25
 8003818:	d500      	bpl.n	800381c <_vfiprintf_r+0x20c>
 800381a:	e71e      	b.n	800365a <_vfiprintf_r+0x4a>
 800381c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800381e:	e71e      	b.n	800365e <_vfiprintf_r+0x4e>
 8003820:	aa07      	add	r2, sp, #28
 8003822:	9200      	str	r2, [sp, #0]
 8003824:	0021      	movs	r1, r4
 8003826:	003a      	movs	r2, r7
 8003828:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <_vfiprintf_r+0x234>)
 800382a:	9803      	ldr	r0, [sp, #12]
 800382c:	f000 f87c 	bl	8003928 <_printf_i>
 8003830:	e7e3      	b.n	80037fa <_vfiprintf_r+0x1ea>
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	08003f77 	.word	0x08003f77
 8003838:	08003f7d 	.word	0x08003f7d
 800383c:	08003f81 	.word	0x08003f81
 8003840:	00000000 	.word	0x00000000
 8003844:	080035eb 	.word	0x080035eb

08003848 <_printf_common>:
 8003848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800384a:	0016      	movs	r6, r2
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	688a      	ldr	r2, [r1, #8]
 8003850:	690b      	ldr	r3, [r1, #16]
 8003852:	000c      	movs	r4, r1
 8003854:	9000      	str	r0, [sp, #0]
 8003856:	4293      	cmp	r3, r2
 8003858:	da00      	bge.n	800385c <_printf_common+0x14>
 800385a:	0013      	movs	r3, r2
 800385c:	0022      	movs	r2, r4
 800385e:	6033      	str	r3, [r6, #0]
 8003860:	3243      	adds	r2, #67	@ 0x43
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	2a00      	cmp	r2, #0
 8003866:	d001      	beq.n	800386c <_printf_common+0x24>
 8003868:	3301      	adds	r3, #1
 800386a:	6033      	str	r3, [r6, #0]
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	069b      	lsls	r3, r3, #26
 8003870:	d502      	bpl.n	8003878 <_printf_common+0x30>
 8003872:	6833      	ldr	r3, [r6, #0]
 8003874:	3302      	adds	r3, #2
 8003876:	6033      	str	r3, [r6, #0]
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	2306      	movs	r3, #6
 800387c:	0015      	movs	r5, r2
 800387e:	401d      	ands	r5, r3
 8003880:	421a      	tst	r2, r3
 8003882:	d027      	beq.n	80038d4 <_printf_common+0x8c>
 8003884:	0023      	movs	r3, r4
 8003886:	3343      	adds	r3, #67	@ 0x43
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	1e5a      	subs	r2, r3, #1
 800388c:	4193      	sbcs	r3, r2
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	0692      	lsls	r2, r2, #26
 8003892:	d430      	bmi.n	80038f6 <_printf_common+0xae>
 8003894:	0022      	movs	r2, r4
 8003896:	9901      	ldr	r1, [sp, #4]
 8003898:	9800      	ldr	r0, [sp, #0]
 800389a:	9d08      	ldr	r5, [sp, #32]
 800389c:	3243      	adds	r2, #67	@ 0x43
 800389e:	47a8      	blx	r5
 80038a0:	3001      	adds	r0, #1
 80038a2:	d025      	beq.n	80038f0 <_printf_common+0xa8>
 80038a4:	2206      	movs	r2, #6
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	2500      	movs	r5, #0
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d105      	bne.n	80038bc <_printf_common+0x74>
 80038b0:	6833      	ldr	r3, [r6, #0]
 80038b2:	68e5      	ldr	r5, [r4, #12]
 80038b4:	1aed      	subs	r5, r5, r3
 80038b6:	43eb      	mvns	r3, r5
 80038b8:	17db      	asrs	r3, r3, #31
 80038ba:	401d      	ands	r5, r3
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	6922      	ldr	r2, [r4, #16]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	dd01      	ble.n	80038c8 <_printf_common+0x80>
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	18ed      	adds	r5, r5, r3
 80038c8:	2600      	movs	r6, #0
 80038ca:	42b5      	cmp	r5, r6
 80038cc:	d120      	bne.n	8003910 <_printf_common+0xc8>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e010      	b.n	80038f4 <_printf_common+0xac>
 80038d2:	3501      	adds	r5, #1
 80038d4:	68e3      	ldr	r3, [r4, #12]
 80038d6:	6832      	ldr	r2, [r6, #0]
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	42ab      	cmp	r3, r5
 80038dc:	ddd2      	ble.n	8003884 <_printf_common+0x3c>
 80038de:	0022      	movs	r2, r4
 80038e0:	2301      	movs	r3, #1
 80038e2:	9901      	ldr	r1, [sp, #4]
 80038e4:	9800      	ldr	r0, [sp, #0]
 80038e6:	9f08      	ldr	r7, [sp, #32]
 80038e8:	3219      	adds	r2, #25
 80038ea:	47b8      	blx	r7
 80038ec:	3001      	adds	r0, #1
 80038ee:	d1f0      	bne.n	80038d2 <_printf_common+0x8a>
 80038f0:	2001      	movs	r0, #1
 80038f2:	4240      	negs	r0, r0
 80038f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038f6:	2030      	movs	r0, #48	@ 0x30
 80038f8:	18e1      	adds	r1, r4, r3
 80038fa:	3143      	adds	r1, #67	@ 0x43
 80038fc:	7008      	strb	r0, [r1, #0]
 80038fe:	0021      	movs	r1, r4
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	3145      	adds	r1, #69	@ 0x45
 8003904:	7809      	ldrb	r1, [r1, #0]
 8003906:	18a2      	adds	r2, r4, r2
 8003908:	3243      	adds	r2, #67	@ 0x43
 800390a:	3302      	adds	r3, #2
 800390c:	7011      	strb	r1, [r2, #0]
 800390e:	e7c1      	b.n	8003894 <_printf_common+0x4c>
 8003910:	0022      	movs	r2, r4
 8003912:	2301      	movs	r3, #1
 8003914:	9901      	ldr	r1, [sp, #4]
 8003916:	9800      	ldr	r0, [sp, #0]
 8003918:	9f08      	ldr	r7, [sp, #32]
 800391a:	321a      	adds	r2, #26
 800391c:	47b8      	blx	r7
 800391e:	3001      	adds	r0, #1
 8003920:	d0e6      	beq.n	80038f0 <_printf_common+0xa8>
 8003922:	3601      	adds	r6, #1
 8003924:	e7d1      	b.n	80038ca <_printf_common+0x82>
	...

08003928 <_printf_i>:
 8003928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392a:	b08b      	sub	sp, #44	@ 0x2c
 800392c:	9206      	str	r2, [sp, #24]
 800392e:	000a      	movs	r2, r1
 8003930:	3243      	adds	r2, #67	@ 0x43
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	9005      	str	r0, [sp, #20]
 8003936:	9203      	str	r2, [sp, #12]
 8003938:	7e0a      	ldrb	r2, [r1, #24]
 800393a:	000c      	movs	r4, r1
 800393c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800393e:	2a78      	cmp	r2, #120	@ 0x78
 8003940:	d809      	bhi.n	8003956 <_printf_i+0x2e>
 8003942:	2a62      	cmp	r2, #98	@ 0x62
 8003944:	d80b      	bhi.n	800395e <_printf_i+0x36>
 8003946:	2a00      	cmp	r2, #0
 8003948:	d100      	bne.n	800394c <_printf_i+0x24>
 800394a:	e0ba      	b.n	8003ac2 <_printf_i+0x19a>
 800394c:	497a      	ldr	r1, [pc, #488]	@ (8003b38 <_printf_i+0x210>)
 800394e:	9104      	str	r1, [sp, #16]
 8003950:	2a58      	cmp	r2, #88	@ 0x58
 8003952:	d100      	bne.n	8003956 <_printf_i+0x2e>
 8003954:	e08e      	b.n	8003a74 <_printf_i+0x14c>
 8003956:	0025      	movs	r5, r4
 8003958:	3542      	adds	r5, #66	@ 0x42
 800395a:	702a      	strb	r2, [r5, #0]
 800395c:	e022      	b.n	80039a4 <_printf_i+0x7c>
 800395e:	0010      	movs	r0, r2
 8003960:	3863      	subs	r0, #99	@ 0x63
 8003962:	2815      	cmp	r0, #21
 8003964:	d8f7      	bhi.n	8003956 <_printf_i+0x2e>
 8003966:	f7fc fbf3 	bl	8000150 <__gnu_thumb1_case_shi>
 800396a:	0016      	.short	0x0016
 800396c:	fff6001f 	.word	0xfff6001f
 8003970:	fff6fff6 	.word	0xfff6fff6
 8003974:	001ffff6 	.word	0x001ffff6
 8003978:	fff6fff6 	.word	0xfff6fff6
 800397c:	fff6fff6 	.word	0xfff6fff6
 8003980:	0036009f 	.word	0x0036009f
 8003984:	fff6007e 	.word	0xfff6007e
 8003988:	00b0fff6 	.word	0x00b0fff6
 800398c:	0036fff6 	.word	0x0036fff6
 8003990:	fff6fff6 	.word	0xfff6fff6
 8003994:	0082      	.short	0x0082
 8003996:	0025      	movs	r5, r4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	3542      	adds	r5, #66	@ 0x42
 800399c:	1d11      	adds	r1, r2, #4
 800399e:	6019      	str	r1, [r3, #0]
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	702b      	strb	r3, [r5, #0]
 80039a4:	2301      	movs	r3, #1
 80039a6:	e09e      	b.n	8003ae6 <_printf_i+0x1be>
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	6809      	ldr	r1, [r1, #0]
 80039ac:	1d02      	adds	r2, r0, #4
 80039ae:	060d      	lsls	r5, r1, #24
 80039b0:	d50b      	bpl.n	80039ca <_printf_i+0xa2>
 80039b2:	6806      	ldr	r6, [r0, #0]
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	2e00      	cmp	r6, #0
 80039b8:	da03      	bge.n	80039c2 <_printf_i+0x9a>
 80039ba:	232d      	movs	r3, #45	@ 0x2d
 80039bc:	9a03      	ldr	r2, [sp, #12]
 80039be:	4276      	negs	r6, r6
 80039c0:	7013      	strb	r3, [r2, #0]
 80039c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b38 <_printf_i+0x210>)
 80039c4:	270a      	movs	r7, #10
 80039c6:	9304      	str	r3, [sp, #16]
 80039c8:	e018      	b.n	80039fc <_printf_i+0xd4>
 80039ca:	6806      	ldr	r6, [r0, #0]
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	0649      	lsls	r1, r1, #25
 80039d0:	d5f1      	bpl.n	80039b6 <_printf_i+0x8e>
 80039d2:	b236      	sxth	r6, r6
 80039d4:	e7ef      	b.n	80039b6 <_printf_i+0x8e>
 80039d6:	6808      	ldr	r0, [r1, #0]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	c940      	ldmia	r1!, {r6}
 80039dc:	0605      	lsls	r5, r0, #24
 80039de:	d402      	bmi.n	80039e6 <_printf_i+0xbe>
 80039e0:	0640      	lsls	r0, r0, #25
 80039e2:	d500      	bpl.n	80039e6 <_printf_i+0xbe>
 80039e4:	b2b6      	uxth	r6, r6
 80039e6:	6019      	str	r1, [r3, #0]
 80039e8:	4b53      	ldr	r3, [pc, #332]	@ (8003b38 <_printf_i+0x210>)
 80039ea:	270a      	movs	r7, #10
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	2a6f      	cmp	r2, #111	@ 0x6f
 80039f0:	d100      	bne.n	80039f4 <_printf_i+0xcc>
 80039f2:	3f02      	subs	r7, #2
 80039f4:	0023      	movs	r3, r4
 80039f6:	2200      	movs	r2, #0
 80039f8:	3343      	adds	r3, #67	@ 0x43
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	60a3      	str	r3, [r4, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db06      	blt.n	8003a12 <_printf_i+0xea>
 8003a04:	2104      	movs	r1, #4
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	9d03      	ldr	r5, [sp, #12]
 8003a0a:	438a      	bics	r2, r1
 8003a0c:	6022      	str	r2, [r4, #0]
 8003a0e:	4333      	orrs	r3, r6
 8003a10:	d00c      	beq.n	8003a2c <_printf_i+0x104>
 8003a12:	9d03      	ldr	r5, [sp, #12]
 8003a14:	0030      	movs	r0, r6
 8003a16:	0039      	movs	r1, r7
 8003a18:	f7fc fc2a 	bl	8000270 <__aeabi_uidivmod>
 8003a1c:	9b04      	ldr	r3, [sp, #16]
 8003a1e:	3d01      	subs	r5, #1
 8003a20:	5c5b      	ldrb	r3, [r3, r1]
 8003a22:	702b      	strb	r3, [r5, #0]
 8003a24:	0033      	movs	r3, r6
 8003a26:	0006      	movs	r6, r0
 8003a28:	429f      	cmp	r7, r3
 8003a2a:	d9f3      	bls.n	8003a14 <_printf_i+0xec>
 8003a2c:	2f08      	cmp	r7, #8
 8003a2e:	d109      	bne.n	8003a44 <_printf_i+0x11c>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	07db      	lsls	r3, r3, #31
 8003a34:	d506      	bpl.n	8003a44 <_printf_i+0x11c>
 8003a36:	6862      	ldr	r2, [r4, #4]
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	dc02      	bgt.n	8003a44 <_printf_i+0x11c>
 8003a3e:	2330      	movs	r3, #48	@ 0x30
 8003a40:	3d01      	subs	r5, #1
 8003a42:	702b      	strb	r3, [r5, #0]
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	1b5b      	subs	r3, r3, r5
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	9b07      	ldr	r3, [sp, #28]
 8003a4c:	0021      	movs	r1, r4
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	9805      	ldr	r0, [sp, #20]
 8003a52:	9b06      	ldr	r3, [sp, #24]
 8003a54:	aa09      	add	r2, sp, #36	@ 0x24
 8003a56:	f7ff fef7 	bl	8003848 <_printf_common>
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d148      	bne.n	8003af0 <_printf_i+0x1c8>
 8003a5e:	2001      	movs	r0, #1
 8003a60:	4240      	negs	r0, r0
 8003a62:	b00b      	add	sp, #44	@ 0x2c
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	2220      	movs	r2, #32
 8003a68:	6809      	ldr	r1, [r1, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	6022      	str	r2, [r4, #0]
 8003a6e:	2278      	movs	r2, #120	@ 0x78
 8003a70:	4932      	ldr	r1, [pc, #200]	@ (8003b3c <_printf_i+0x214>)
 8003a72:	9104      	str	r1, [sp, #16]
 8003a74:	0021      	movs	r1, r4
 8003a76:	3145      	adds	r1, #69	@ 0x45
 8003a78:	700a      	strb	r2, [r1, #0]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	c940      	ldmia	r1!, {r6}
 8003a80:	0610      	lsls	r0, r2, #24
 8003a82:	d402      	bmi.n	8003a8a <_printf_i+0x162>
 8003a84:	0650      	lsls	r0, r2, #25
 8003a86:	d500      	bpl.n	8003a8a <_printf_i+0x162>
 8003a88:	b2b6      	uxth	r6, r6
 8003a8a:	6019      	str	r1, [r3, #0]
 8003a8c:	07d3      	lsls	r3, r2, #31
 8003a8e:	d502      	bpl.n	8003a96 <_printf_i+0x16e>
 8003a90:	2320      	movs	r3, #32
 8003a92:	4313      	orrs	r3, r2
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	d001      	beq.n	8003a9e <_printf_i+0x176>
 8003a9a:	2710      	movs	r7, #16
 8003a9c:	e7aa      	b.n	80039f4 <_printf_i+0xcc>
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	e7f8      	b.n	8003a9a <_printf_i+0x172>
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	680d      	ldr	r5, [r1, #0]
 8003aac:	1d10      	adds	r0, r2, #4
 8003aae:	6949      	ldr	r1, [r1, #20]
 8003ab0:	6018      	str	r0, [r3, #0]
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	062e      	lsls	r6, r5, #24
 8003ab6:	d501      	bpl.n	8003abc <_printf_i+0x194>
 8003ab8:	6019      	str	r1, [r3, #0]
 8003aba:	e002      	b.n	8003ac2 <_printf_i+0x19a>
 8003abc:	066d      	lsls	r5, r5, #25
 8003abe:	d5fb      	bpl.n	8003ab8 <_printf_i+0x190>
 8003ac0:	8019      	strh	r1, [r3, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9d03      	ldr	r5, [sp, #12]
 8003ac6:	6123      	str	r3, [r4, #16]
 8003ac8:	e7bf      	b.n	8003a4a <_printf_i+0x122>
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	1d11      	adds	r1, r2, #4
 8003ace:	6019      	str	r1, [r3, #0]
 8003ad0:	6815      	ldr	r5, [r2, #0]
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	6862      	ldr	r2, [r4, #4]
 8003ad8:	f000 f974 	bl	8003dc4 <memchr>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d001      	beq.n	8003ae4 <_printf_i+0x1bc>
 8003ae0:	1b40      	subs	r0, r0, r5
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9a03      	ldr	r2, [sp, #12]
 8003aec:	7013      	strb	r3, [r2, #0]
 8003aee:	e7ac      	b.n	8003a4a <_printf_i+0x122>
 8003af0:	002a      	movs	r2, r5
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	9906      	ldr	r1, [sp, #24]
 8003af6:	9805      	ldr	r0, [sp, #20]
 8003af8:	9d07      	ldr	r5, [sp, #28]
 8003afa:	47a8      	blx	r5
 8003afc:	3001      	adds	r0, #1
 8003afe:	d0ae      	beq.n	8003a5e <_printf_i+0x136>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	079b      	lsls	r3, r3, #30
 8003b04:	d415      	bmi.n	8003b32 <_printf_i+0x20a>
 8003b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b08:	68e0      	ldr	r0, [r4, #12]
 8003b0a:	4298      	cmp	r0, r3
 8003b0c:	daa9      	bge.n	8003a62 <_printf_i+0x13a>
 8003b0e:	0018      	movs	r0, r3
 8003b10:	e7a7      	b.n	8003a62 <_printf_i+0x13a>
 8003b12:	0022      	movs	r2, r4
 8003b14:	2301      	movs	r3, #1
 8003b16:	9906      	ldr	r1, [sp, #24]
 8003b18:	9805      	ldr	r0, [sp, #20]
 8003b1a:	9e07      	ldr	r6, [sp, #28]
 8003b1c:	3219      	adds	r2, #25
 8003b1e:	47b0      	blx	r6
 8003b20:	3001      	adds	r0, #1
 8003b22:	d09c      	beq.n	8003a5e <_printf_i+0x136>
 8003b24:	3501      	adds	r5, #1
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dcf0      	bgt.n	8003b12 <_printf_i+0x1ea>
 8003b30:	e7e9      	b.n	8003b06 <_printf_i+0x1de>
 8003b32:	2500      	movs	r5, #0
 8003b34:	e7f7      	b.n	8003b26 <_printf_i+0x1fe>
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	08003f88 	.word	0x08003f88
 8003b3c:	08003f99 	.word	0x08003f99

08003b40 <__sflush_r>:
 8003b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b42:	220c      	movs	r2, #12
 8003b44:	5e8b      	ldrsh	r3, [r1, r2]
 8003b46:	0005      	movs	r5, r0
 8003b48:	000c      	movs	r4, r1
 8003b4a:	071a      	lsls	r2, r3, #28
 8003b4c:	d456      	bmi.n	8003bfc <__sflush_r+0xbc>
 8003b4e:	684a      	ldr	r2, [r1, #4]
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	dc02      	bgt.n	8003b5a <__sflush_r+0x1a>
 8003b54:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003b56:	2a00      	cmp	r2, #0
 8003b58:	dd4e      	ble.n	8003bf8 <__sflush_r+0xb8>
 8003b5a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003b5c:	2f00      	cmp	r7, #0
 8003b5e:	d04b      	beq.n	8003bf8 <__sflush_r+0xb8>
 8003b60:	2200      	movs	r2, #0
 8003b62:	2080      	movs	r0, #128	@ 0x80
 8003b64:	682e      	ldr	r6, [r5, #0]
 8003b66:	602a      	str	r2, [r5, #0]
 8003b68:	001a      	movs	r2, r3
 8003b6a:	0140      	lsls	r0, r0, #5
 8003b6c:	6a21      	ldr	r1, [r4, #32]
 8003b6e:	4002      	ands	r2, r0
 8003b70:	4203      	tst	r3, r0
 8003b72:	d033      	beq.n	8003bdc <__sflush_r+0x9c>
 8003b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	075b      	lsls	r3, r3, #29
 8003b7a:	d506      	bpl.n	8003b8a <__sflush_r+0x4a>
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <__sflush_r+0x4a>
 8003b86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	0028      	movs	r0, r5
 8003b8e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003b90:	6a21      	ldr	r1, [r4, #32]
 8003b92:	47b8      	blx	r7
 8003b94:	89a2      	ldrh	r2, [r4, #12]
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	d106      	bne.n	8003ba8 <__sflush_r+0x68>
 8003b9a:	6829      	ldr	r1, [r5, #0]
 8003b9c:	291d      	cmp	r1, #29
 8003b9e:	d846      	bhi.n	8003c2e <__sflush_r+0xee>
 8003ba0:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <__sflush_r+0x108>)
 8003ba2:	40cb      	lsrs	r3, r1
 8003ba4:	07db      	lsls	r3, r3, #31
 8003ba6:	d542      	bpl.n	8003c2e <__sflush_r+0xee>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6063      	str	r3, [r4, #4]
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	6023      	str	r3, [r4, #0]
 8003bb0:	04d2      	lsls	r2, r2, #19
 8003bb2:	d505      	bpl.n	8003bc0 <__sflush_r+0x80>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <__sflush_r+0x7e>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d100      	bne.n	8003bc0 <__sflush_r+0x80>
 8003bbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bc2:	602e      	str	r6, [r5, #0]
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d017      	beq.n	8003bf8 <__sflush_r+0xb8>
 8003bc8:	0023      	movs	r3, r4
 8003bca:	3344      	adds	r3, #68	@ 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__sflush_r+0x96>
 8003bd0:	0028      	movs	r0, r5
 8003bd2:	f7ff fca3 	bl	800351c <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bda:	e00d      	b.n	8003bf8 <__sflush_r+0xb8>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	0028      	movs	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	0002      	movs	r2, r0
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d1c6      	bne.n	8003b76 <__sflush_r+0x36>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0c3      	beq.n	8003b76 <__sflush_r+0x36>
 8003bee:	2b1d      	cmp	r3, #29
 8003bf0:	d001      	beq.n	8003bf6 <__sflush_r+0xb6>
 8003bf2:	2b16      	cmp	r3, #22
 8003bf4:	d11a      	bne.n	8003c2c <__sflush_r+0xec>
 8003bf6:	602e      	str	r6, [r5, #0]
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e01e      	b.n	8003c3a <__sflush_r+0xfa>
 8003bfc:	690e      	ldr	r6, [r1, #16]
 8003bfe:	2e00      	cmp	r6, #0
 8003c00:	d0fa      	beq.n	8003bf8 <__sflush_r+0xb8>
 8003c02:	680f      	ldr	r7, [r1, #0]
 8003c04:	600e      	str	r6, [r1, #0]
 8003c06:	1bba      	subs	r2, r7, r6
 8003c08:	9201      	str	r2, [sp, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	079b      	lsls	r3, r3, #30
 8003c0e:	d100      	bne.n	8003c12 <__sflush_r+0xd2>
 8003c10:	694a      	ldr	r2, [r1, #20]
 8003c12:	60a2      	str	r2, [r4, #8]
 8003c14:	9b01      	ldr	r3, [sp, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	ddee      	ble.n	8003bf8 <__sflush_r+0xb8>
 8003c1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c1c:	0032      	movs	r2, r6
 8003c1e:	001f      	movs	r7, r3
 8003c20:	0028      	movs	r0, r5
 8003c22:	9b01      	ldr	r3, [sp, #4]
 8003c24:	6a21      	ldr	r1, [r4, #32]
 8003c26:	47b8      	blx	r7
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	dc07      	bgt.n	8003c3c <__sflush_r+0xfc>
 8003c2c:	89a2      	ldrh	r2, [r4, #12]
 8003c2e:	2340      	movs	r3, #64	@ 0x40
 8003c30:	2001      	movs	r0, #1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b21b      	sxth	r3, r3
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	4240      	negs	r0, r0
 8003c3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c3c:	9b01      	ldr	r3, [sp, #4]
 8003c3e:	1836      	adds	r6, r6, r0
 8003c40:	1a1b      	subs	r3, r3, r0
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	e7e6      	b.n	8003c14 <__sflush_r+0xd4>
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	20400001 	.word	0x20400001

08003c4c <_fflush_r>:
 8003c4c:	690b      	ldr	r3, [r1, #16]
 8003c4e:	b570      	push	{r4, r5, r6, lr}
 8003c50:	0005      	movs	r5, r0
 8003c52:	000c      	movs	r4, r1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <_fflush_r+0x12>
 8003c58:	2500      	movs	r5, #0
 8003c5a:	0028      	movs	r0, r5
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d004      	beq.n	8003c6c <_fflush_r+0x20>
 8003c62:	6a03      	ldr	r3, [r0, #32]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <_fflush_r+0x20>
 8003c68:	f7ff fa04 	bl	8003074 <__sinit>
 8003c6c:	220c      	movs	r2, #12
 8003c6e:	5ea3      	ldrsh	r3, [r4, r2]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f1      	beq.n	8003c58 <_fflush_r+0xc>
 8003c74:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c76:	07d2      	lsls	r2, r2, #31
 8003c78:	d404      	bmi.n	8003c84 <_fflush_r+0x38>
 8003c7a:	059b      	lsls	r3, r3, #22
 8003c7c:	d402      	bmi.n	8003c84 <_fflush_r+0x38>
 8003c7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c80:	f7ff fc49 	bl	8003516 <__retarget_lock_acquire_recursive>
 8003c84:	0028      	movs	r0, r5
 8003c86:	0021      	movs	r1, r4
 8003c88:	f7ff ff5a 	bl	8003b40 <__sflush_r>
 8003c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c8e:	0005      	movs	r5, r0
 8003c90:	07db      	lsls	r3, r3, #31
 8003c92:	d4e2      	bmi.n	8003c5a <_fflush_r+0xe>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	059b      	lsls	r3, r3, #22
 8003c98:	d4df      	bmi.n	8003c5a <_fflush_r+0xe>
 8003c9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c9c:	f7ff fc3c 	bl	8003518 <__retarget_lock_release_recursive>
 8003ca0:	e7db      	b.n	8003c5a <_fflush_r+0xe>
	...

08003ca4 <__swhatbuf_r>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	000e      	movs	r6, r1
 8003ca8:	001d      	movs	r5, r3
 8003caa:	230e      	movs	r3, #14
 8003cac:	5ec9      	ldrsh	r1, [r1, r3]
 8003cae:	0014      	movs	r4, r2
 8003cb0:	b096      	sub	sp, #88	@ 0x58
 8003cb2:	2900      	cmp	r1, #0
 8003cb4:	da0c      	bge.n	8003cd0 <__swhatbuf_r+0x2c>
 8003cb6:	89b2      	ldrh	r2, [r6, #12]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	0011      	movs	r1, r2
 8003cbc:	4019      	ands	r1, r3
 8003cbe:	421a      	tst	r2, r3
 8003cc0:	d114      	bne.n	8003cec <__swhatbuf_r+0x48>
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	6029      	str	r1, [r5, #0]
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	b016      	add	sp, #88	@ 0x58
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	466a      	mov	r2, sp
 8003cd2:	f000 f853 	bl	8003d7c <_fstat_r>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	dbed      	blt.n	8003cb6 <__swhatbuf_r+0x12>
 8003cda:	23f0      	movs	r3, #240	@ 0xf0
 8003cdc:	9901      	ldr	r1, [sp, #4]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	4019      	ands	r1, r3
 8003ce2:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__swhatbuf_r+0x50>)
 8003ce4:	18c9      	adds	r1, r1, r3
 8003ce6:	424b      	negs	r3, r1
 8003ce8:	4159      	adcs	r1, r3
 8003cea:	e7ea      	b.n	8003cc2 <__swhatbuf_r+0x1e>
 8003cec:	2100      	movs	r1, #0
 8003cee:	2340      	movs	r3, #64	@ 0x40
 8003cf0:	e7e9      	b.n	8003cc6 <__swhatbuf_r+0x22>
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	ffffe000 	.word	0xffffe000

08003cf8 <__smakebuf_r>:
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	2602      	movs	r6, #2
 8003cfc:	898b      	ldrh	r3, [r1, #12]
 8003cfe:	0005      	movs	r5, r0
 8003d00:	000c      	movs	r4, r1
 8003d02:	b085      	sub	sp, #20
 8003d04:	4233      	tst	r3, r6
 8003d06:	d007      	beq.n	8003d18 <__smakebuf_r+0x20>
 8003d08:	0023      	movs	r3, r4
 8003d0a:	3347      	adds	r3, #71	@ 0x47
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	6123      	str	r3, [r4, #16]
 8003d10:	2301      	movs	r3, #1
 8003d12:	6163      	str	r3, [r4, #20]
 8003d14:	b005      	add	sp, #20
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d18:	ab03      	add	r3, sp, #12
 8003d1a:	aa02      	add	r2, sp, #8
 8003d1c:	f7ff ffc2 	bl	8003ca4 <__swhatbuf_r>
 8003d20:	9f02      	ldr	r7, [sp, #8]
 8003d22:	9001      	str	r0, [sp, #4]
 8003d24:	0039      	movs	r1, r7
 8003d26:	0028      	movs	r0, r5
 8003d28:	f7ff f84a 	bl	8002dc0 <_malloc_r>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d108      	bne.n	8003d42 <__smakebuf_r+0x4a>
 8003d30:	220c      	movs	r2, #12
 8003d32:	5ea3      	ldrsh	r3, [r4, r2]
 8003d34:	059a      	lsls	r2, r3, #22
 8003d36:	d4ed      	bmi.n	8003d14 <__smakebuf_r+0x1c>
 8003d38:	2203      	movs	r2, #3
 8003d3a:	4393      	bics	r3, r2
 8003d3c:	431e      	orrs	r6, r3
 8003d3e:	81a6      	strh	r6, [r4, #12]
 8003d40:	e7e2      	b.n	8003d08 <__smakebuf_r+0x10>
 8003d42:	2380      	movs	r3, #128	@ 0x80
 8003d44:	89a2      	ldrh	r2, [r4, #12]
 8003d46:	6020      	str	r0, [r4, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	81a3      	strh	r3, [r4, #12]
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	6120      	str	r0, [r4, #16]
 8003d50:	6167      	str	r7, [r4, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <__smakebuf_r+0x78>
 8003d56:	0028      	movs	r0, r5
 8003d58:	230e      	movs	r3, #14
 8003d5a:	5ee1      	ldrsh	r1, [r4, r3]
 8003d5c:	f000 f820 	bl	8003da0 <_isatty_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d005      	beq.n	8003d70 <__smakebuf_r+0x78>
 8003d64:	2303      	movs	r3, #3
 8003d66:	89a2      	ldrh	r2, [r4, #12]
 8003d68:	439a      	bics	r2, r3
 8003d6a:	3b02      	subs	r3, #2
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	81a3      	strh	r3, [r4, #12]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	9a01      	ldr	r2, [sp, #4]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	81a3      	strh	r3, [r4, #12]
 8003d78:	e7cc      	b.n	8003d14 <__smakebuf_r+0x1c>
	...

08003d7c <_fstat_r>:
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	4d06      	ldr	r5, [pc, #24]	@ (8003d9c <_fstat_r+0x20>)
 8003d82:	0004      	movs	r4, r0
 8003d84:	0008      	movs	r0, r1
 8003d86:	0011      	movs	r1, r2
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	f7fc fed9 	bl	8000b40 <_fstat>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	d103      	bne.n	8003d9a <_fstat_r+0x1e>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d000      	beq.n	8003d9a <_fstat_r+0x1e>
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	200002d4 	.word	0x200002d4

08003da0 <_isatty_r>:
 8003da0:	2300      	movs	r3, #0
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	4d06      	ldr	r5, [pc, #24]	@ (8003dc0 <_isatty_r+0x20>)
 8003da6:	0004      	movs	r4, r0
 8003da8:	0008      	movs	r0, r1
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	f7fc fecd 	bl	8000b4a <_isatty>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d103      	bne.n	8003dbc <_isatty_r+0x1c>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d000      	beq.n	8003dbc <_isatty_r+0x1c>
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	200002d4 	.word	0x200002d4

08003dc4 <memchr>:
 8003dc4:	b2c9      	uxtb	r1, r1
 8003dc6:	1882      	adds	r2, r0, r2
 8003dc8:	4290      	cmp	r0, r2
 8003dca:	d101      	bne.n	8003dd0 <memchr+0xc>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	4770      	bx	lr
 8003dd0:	7803      	ldrb	r3, [r0, #0]
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	d0fb      	beq.n	8003dce <memchr+0xa>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	e7f6      	b.n	8003dc8 <memchr+0x4>
	...

08003ddc <_init>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr

08003de8 <_fini>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr
